
PTM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009568  08009568  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08009568  08009568  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009568  08009568  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000004b0  20000060  20000060  00020060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000510  20000510  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016c39  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033de  00000000  00000000  00036d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012d0  00000000  00000000  0003a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ebf  00000000  00000000  0003b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023155  00000000  00000000  0003c277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bd01  00000000  00000000  0005f3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4cb4  00000000  00000000  0007b0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000054a0  00000000  00000000  0014fd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00155224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009340 	.word	0x08009340

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08009340 	.word	0x08009340

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000a94:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <MX_ADC2_Init+0xb8>)
 8000a96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aec:	f001 fb2a 	bl	8002144 <HAL_ADC_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000af6:	f000 fef9 	bl	80018ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000afa:	2303      	movs	r3, #3
 8000afc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000b06:	2306      	movs	r3, #6
 8000b08:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000b18:	f001 ff34 	bl	8002984 <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b22:	f000 fee3 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000007c 	.word	0x2000007c
 8000b34:	50000100 	.word	0x50000100

08000b38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a15      	ldr	r2, [pc, #84]	; (8000bac <HAL_ADC_MspInit+0x74>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d124      	bne.n	8000ba4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6153      	str	r3, [r2, #20]
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f002 fde0 	bl	8003764 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	50000100 	.word	0x50000100
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_DMA_Init+0x38>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <MX_DMA_Init+0x38>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_DMA_Init+0x38>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2010      	movs	r0, #16
 8000bd8:	f002 fb63 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bdc:	2010      	movs	r0, #16
 8000bde:	f002 fb7c 	bl	80032da <HAL_NVIC_EnableIRQ>

}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a3a      	ldr	r2, [pc, #232]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1e:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a34      	ldr	r2, [pc, #208]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a2e      	ldr	r2, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <MX_GPIO_Init+0x104>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2120      	movs	r1, #32
 8000c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c6e:	f002 ff1b 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RIGHT_Pin|LEFT_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c78:	481f      	ldr	r0, [pc, #124]	; (8000cf8 <MX_GPIO_Init+0x108>)
 8000c7a:	f002 ff15 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RPM_UP_Pin|START_Pin;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4819      	ldr	r0, [pc, #100]	; (8000cf8 <MX_GPIO_Init+0x108>)
 8000c92:	f002 fd67 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c96:	2320      	movs	r3, #32
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f002 fd58 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_DOWN_Pin;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_GPIO_Init+0x10c>)
 8000cc8:	f002 fd4c 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RIGHT_Pin|LEFT_Pin;
 8000ccc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_GPIO_Init+0x108>)
 8000ce6:	f002 fd3d 	bl	8003764 <HAL_GPIO_Init>

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <MX_I2C1_Init+0x78>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <MX_I2C1_Init+0x7c>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d16:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d22:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3a:	480e      	ldr	r0, [pc, #56]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d3c:	f002 fecc 	bl	8003ad8 <HAL_I2C_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d46:	f000 fdd1 	bl	80018ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d4e:	f003 fa57 	bl	8004200 <HAL_I2CEx_ConfigAnalogFilter>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d58:	f000 fdc8 	bl	80018ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_I2C1_Init+0x74>)
 8000d60:	f003 fa99 	bl	8004296 <HAL_I2CEx_ConfigDigitalFilter>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d6a:	f000 fdbf 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200000cc 	.word	0x200000cc
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	2000090e 	.word	0x2000090e

08000d80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_I2C_MspInit+0x7c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d128      	bne.n	8000df4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dac:	6153      	str	r3, [r2, #20]
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dcc:	2304      	movs	r3, #4
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	480b      	ldr	r0, [pc, #44]	; (8000e04 <HAL_I2C_MspInit+0x84>)
 8000dd8:	f002 fcc4 	bl	8003764 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de6:	61d3      	str	r3, [r2, #28]
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000dea:	69db      	ldr	r3, [r3, #28]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000400 	.word	0x48000400

08000e08 <delay_us>:
#include "stm32f3xx_hal.h"
#include "i2c.h"
#include "tim.h"

void delay_us (uint16_t us)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <delay_us+0x30>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000e1a:	bf00      	nop
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <delay_us+0x30>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d3f9      	bcc.n	8000e1c <delay_us+0x14>
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200001c8 	.word	0x200001c8

08000e3c <lcd_init>:

void lcd_init(struct lcd_disp * lcd)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000e52:	2308      	movs	r3, #8
 8000e54:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000e56:	2028      	movs	r0, #40	; 0x28
 8000e58:	f001 f950 	bl	80020fc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	2130      	movs	r1, #48	; 0x30
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f829 	bl	8000ebc <lcd_write>
	HAL_Delay(5);
 8000e6a:	2005      	movs	r0, #5
 8000e6c:	f001 f946 	bl	80020fc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	2130      	movs	r1, #48	; 0x30
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f81f 	bl	8000ebc <lcd_write>
	HAL_Delay(1);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f001 f93c 	bl	80020fc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	2130      	movs	r1, #48	; 0x30
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f815 	bl	8000ebc <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f80e 	bl	8000ebc <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	7bfa      	ldrb	r2, [r7, #15]
 8000ea6:	210c      	movs	r1, #12
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f807 	bl	8000ebc <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f8e0 	bl	8001074 <lcd_clear>

}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	71bb      	strb	r3, [r7, #6]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	f023 030f 	bic.w	r3, r3, #15
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	797b      	ldrb	r3, [r7, #5]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000ee4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ee8:	f023 030f 	bic.w	r3, r3, #15
 8000eec:	b25a      	sxtb	r2, r3
 8000eee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	797b      	ldrb	r3, [r7, #5]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	b299      	uxth	r1, r3
 8000f24:	f107 020c 	add.w	r2, r7, #12
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <lcd_write+0x88>)
 8000f30:	f002 fe62 	bl	8003bf8 <HAL_I2C_Master_Transmit>
	delay_us(120);
 8000f34:	2078      	movs	r0, #120	; 0x78
 8000f36:	f7ff ff67 	bl	8000e08 <delay_us>
	//HAL_Delay(1);
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000cc 	.word	0x200000cc

08000f48 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	2300      	movs	r3, #0
 8000f56:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000f62:	2308      	movs	r3, #8
 8000f64:	73fb      	strb	r3, [r7, #15]
	}

	//lcd_clear(lcd);

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ffa4 	bl	8000ebc <lcd_write>
	while(lcd->first_line[i])
 8000f74:	e00f      	b.n	8000f96 <lcd_display+0x4e>
	{
		lcd_write(lcd->addr, lcd->first_line[i], (xpin | RS_PIN));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7818      	ldrb	r0, [r3, #0]
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4413      	add	r3, r2
 8000f80:	7859      	ldrb	r1, [r3, #1]
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f7ff ff96 	bl	8000ebc <lcd_write>
		i++;
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73bb      	strb	r3, [r7, #14]
	while(lcd->first_line[i])
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1e9      	bne.n	8000f76 <lcd_display+0x2e>
	}

	/* send second line data */
	i = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	21c0      	movs	r1, #192	; 0xc0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff84 	bl	8000ebc <lcd_write>
	while(lcd->second_line[i])
 8000fb4:	e00f      	b.n	8000fd6 <lcd_display+0x8e>
	{
		lcd_write(lcd->addr, lcd->second_line[i], (xpin | RS_PIN));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	7d99      	ldrb	r1, [r3, #22]
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	461a      	mov	r2, r3
 8000fcc:	f7ff ff76 	bl	8000ebc <lcd_write>
		i++;
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	73bb      	strb	r3, [r7, #14]
	while(lcd->second_line[i])
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	7d9b      	ldrb	r3, [r3, #22]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1e9      	bne.n	8000fb6 <lcd_display+0x6e>
	}

	i = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_3, xpin);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	2194      	movs	r1, #148	; 0x94
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff64 	bl	8000ebc <lcd_write>
	while(lcd->third_line[i])
 8000ff4:	e010      	b.n	8001018 <lcd_display+0xd0>
	{
		lcd_write(lcd->addr, lcd->third_line[i], (xpin | RS_PIN));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7818      	ldrb	r0, [r3, #0]
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	f7ff ff55 	bl	8000ebc <lcd_write>
		i++;
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	3301      	adds	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
	while(lcd->third_line[i])
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1e7      	bne.n	8000ff6 <lcd_display+0xae>
	}

	i = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_4, xpin);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	21d4      	movs	r1, #212	; 0xd4
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ff42 	bl	8000ebc <lcd_write>
	while(lcd->fourth_line[i])
 8001038:	e010      	b.n	800105c <lcd_display+0x114>
	{
		lcd_write(lcd->addr, lcd->fourth_line[i], (xpin | RS_PIN));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7818      	ldrb	r0, [r3, #0]
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	461a      	mov	r2, r3
 8001052:	f7ff ff33 	bl	8000ebc <lcd_write>
		i++;
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	3301      	adds	r3, #1
 800105a:	73bb      	strb	r3, [r7, #14]
	while(lcd->fourth_line[i])
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1e7      	bne.n	800103a <lcd_display+0xf2>
	}
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 800108a:	2308      	movs	r3, #8
 800108c:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff10 	bl	8000ebc <lcd_write>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	bool startReading, upReading, downReading;
	bool lastUpReading = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	71fb      	strb	r3, [r7, #7]
	bool lastDownReading = 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	71bb      	strb	r3, [r7, #6]
	bool lastStartReading = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	717b      	strb	r3, [r7, #5]

	motor.state = 0;
 80010b6:	4b82      	ldr	r3, [pc, #520]	; (80012c0 <main+0x21c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	motor.dir = 1;
 80010be:	4b80      	ldr	r3, [pc, #512]	; (80012c0 <main+0x21c>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
	motor.setRpm = 0;
 80010c4:	4b7e      	ldr	r3, [pc, #504]	; (80012c0 <main+0x21c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
	motor.overheat = 0;
 80010ca:	4b7d      	ldr	r3, [pc, #500]	; (80012c0 <main+0x21c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	disp.addr = (0x3f << 1);
 80010d2:	4b7c      	ldr	r3, [pc, #496]	; (80012c4 <main+0x220>)
 80010d4:	227e      	movs	r2, #126	; 0x7e
 80010d6:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 80010d8:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <main+0x220>)
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f000 ffa6 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f904 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f7ff fd82 	bl	8000bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ec:	f7ff fd62 	bl	8000bb4 <MX_DMA_Init>
  MX_TIM2_Init();
 80010f0:	f000 fd0e 	bl	8001b10 <MX_TIM2_Init>
  MX_TIM16_Init();
 80010f4:	f000 fdd8 	bl	8001ca8 <MX_TIM16_Init>
  MX_TIM3_Init();
 80010f8:	f000 fd5e 	bl	8001bb8 <MX_TIM3_Init>
  MX_ADC2_Init();
 80010fc:	f7ff fcbe 	bl	8000a7c <MX_ADC2_Init>
  MX_I2C1_Init();
 8001100:	f7ff fdfe 	bl	8000d00 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001104:	f000 fcb0 	bl	8001a68 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001108:	f000 fec4 	bl	8001e94 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800110c:	213c      	movs	r1, #60	; 0x3c
 800110e:	486e      	ldr	r0, [pc, #440]	; (80012c8 <main+0x224>)
 8001110:	f005 f8fa 	bl	8006308 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim1);
 8001114:	486d      	ldr	r0, [pc, #436]	; (80012cc <main+0x228>)
 8001116:	f004 fe0b 	bl	8005d30 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 800111a:	486d      	ldr	r0, [pc, #436]	; (80012d0 <main+0x22c>)
 800111c:	f004 fe70 	bl	8005e00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001120:	2100      	movs	r1, #0
 8001122:	486c      	ldr	r0, [pc, #432]	; (80012d4 <main+0x230>)
 8001124:	f004 ff3e 	bl	8005fa4 <HAL_TIM_PWM_Start>
	HAL_ADC_Start(&hadc2);
 8001128:	486b      	ldr	r0, [pc, #428]	; (80012d8 <main+0x234>)
 800112a:	f001 fa05 	bl	8002538 <HAL_ADC_Start>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuffer, RxBuffer_Size);
 800112e:	220a      	movs	r2, #10
 8001130:	496a      	ldr	r1, [pc, #424]	; (80012dc <main+0x238>)
 8001132:	486b      	ldr	r0, [pc, #428]	; (80012e0 <main+0x23c>)
 8001134:	f007 fb7b 	bl	800882e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001138:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <main+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b69      	ldr	r3, [pc, #420]	; (80012e4 <main+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]

	lcd_init(&disp);
 8001148:	485e      	ldr	r0, [pc, #376]	; (80012c4 <main+0x220>)
 800114a:	f7ff fe77 	bl	8000e3c <lcd_init>


	while (1) {


		sendData();
 800114e:	f000 f9a9 	bl	80014a4 <sendData>
		temp();
 8001152:	f000 f9f9 	bl	8001548 <temp>

		if(motor.temp > TEMP_MAX){
 8001156:	4b5a      	ldr	r3, [pc, #360]	; (80012c0 <main+0x21c>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	2b32      	cmp	r3, #50	; 0x32
 800115c:	dd0a      	ble.n	8001174 <main+0xd0>
			motor.overheat = 1;
 800115e:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <main+0x21c>)
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			motor.state = 0;
 8001166:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <main+0x21c>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			displayOverheat();
 800116e:	f000 f971 	bl	8001454 <displayOverheat>
 8001172:	e009      	b.n	8001188 <main+0xe4>
		}
		else if(motor.temp < TEMP_MIN){
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <main+0x21c>)
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	2b2c      	cmp	r3, #44	; 0x2c
 800117a:	dc05      	bgt.n	8001188 <main+0xe4>
			motor.overheat = 0;
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <main+0x21c>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			displayNormal();
 8001184:	f000 f922 	bl	80013cc <displayNormal>
		}

		lcd_display(&disp);
 8001188:	484e      	ldr	r0, [pc, #312]	; (80012c4 <main+0x220>)
 800118a:	f7ff fedd 	bl	8000f48 <lcd_display>

		startReading = HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 800118e:	2102      	movs	r1, #2
 8001190:	4855      	ldr	r0, [pc, #340]	; (80012e8 <main+0x244>)
 8001192:	f002 fc71 	bl	8003a78 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	713b      	strb	r3, [r7, #4]
		if (startReading == 1 && lastStartReading == 0) {
 80011a2:	793b      	ldrb	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01b      	beq.n	80011e0 <main+0x13c>
 80011a8:	797b      	ldrb	r3, [r7, #5]
 80011aa:	f083 0301 	eor.w	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d015      	beq.n	80011e0 <main+0x13c>
			if (motor.state == 0 && motor.overheat == 0)
 80011b4:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <main+0x21c>)
 80011b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10c      	bne.n	80011d8 <main+0x134>
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <main+0x21c>)
 80011c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011c4:	f083 0301 	eor.w	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <main+0x134>
				motor.state = 1;
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <main+0x21c>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80011d6:	e003      	b.n	80011e0 <main+0x13c>
			else
				motor.state = 0;
 80011d8:	4b39      	ldr	r3, [pc, #228]	; (80012c0 <main+0x21c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		}
		lastStartReading = startReading;
 80011e0:	793b      	ldrb	r3, [r7, #4]
 80011e2:	717b      	strb	r3, [r7, #5]

		downReading = HAL_GPIO_ReadPin(RPM_DOWN_GPIO_Port, RPM_DOWN_Pin);
 80011e4:	2101      	movs	r1, #1
 80011e6:	4841      	ldr	r0, [pc, #260]	; (80012ec <main+0x248>)
 80011e8:	f002 fc46 	bl	8003a78 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bf14      	ite	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	2300      	moveq	r3, #0
 80011f6:	70fb      	strb	r3, [r7, #3]
		if (downReading == 1 && lastDownReading == 0) {
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00a      	beq.n	8001214 <main+0x170>
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <main+0x170>
			motor.setRpm = motor.setRpm - 20;
 800120a:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <main+0x21c>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	3b14      	subs	r3, #20
 8001210:	4a2b      	ldr	r2, [pc, #172]	; (80012c0 <main+0x21c>)
 8001212:	6093      	str	r3, [r2, #8]
		}
		lastDownReading = downReading;
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	71bb      	strb	r3, [r7, #6]

		upReading = HAL_GPIO_ReadPin(RPM_UP_GPIO_Port, RPM_UP_Pin);
 8001218:	2101      	movs	r1, #1
 800121a:	4833      	ldr	r0, [pc, #204]	; (80012e8 <main+0x244>)
 800121c:	f002 fc2c 	bl	8003a78 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	70bb      	strb	r3, [r7, #2]
		if (upReading == 1 && lastUpReading == 0) {
 800122c:	78bb      	ldrb	r3, [r7, #2]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00a      	beq.n	8001248 <main+0x1a4>
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f083 0301 	eor.w	r3, r3, #1
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <main+0x1a4>
			motor.setRpm = motor.setRpm + 20;
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <main+0x21c>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	3314      	adds	r3, #20
 8001244:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <main+0x21c>)
 8001246:	6093      	str	r3, [r2, #8]
		}
		lastUpReading = upReading;
 8001248:	78bb      	ldrb	r3, [r7, #2]
 800124a:	71fb      	strb	r3, [r7, #7]

		if (motor.state) {
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <main+0x21c>)
 800124e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001252:	2b00      	cmp	r3, #0
 8001254:	d008      	beq.n	8001268 <main+0x1c4>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001256:	2201      	movs	r2, #1
 8001258:	2120      	movs	r1, #32
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f002 fc23 	bl	8003aa8 <HAL_GPIO_WritePin>
			setDir();
 8001262:	f000 f945 	bl	80014f0 <setDir>
 8001266:	e772      	b.n	800114e <main+0xaa>
		} else {
			HAL_GPIO_WritePin(RIGHT_GPIO_Port, RIGHT_Pin, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	481e      	ldr	r0, [pc, #120]	; (80012e8 <main+0x244>)
 8001270:	f002 fc1a 	bl	8003aa8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEFT_GPIO_Port, LEFT_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127a:	481b      	ldr	r0, [pc, #108]	; (80012e8 <main+0x244>)
 800127c:	f002 fc14 	bl	8003aa8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2120      	movs	r1, #32
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f002 fc0e 	bl	8003aa8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <main+0x230>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
			motor.err = 0;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <main+0x21c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
			motor.lastErr = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <main+0x21c>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
			motor.derivative = 0;
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <main+0x21c>)
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			motor.integral = 0;
 80012ae:	4904      	ldr	r1, [pc, #16]	; (80012c0 <main+0x21c>)
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		sendData();
 80012bc:	e747      	b.n	800114e <main+0xaa>
 80012be:	bf00      	nop
 80012c0:	20000120 	.word	0x20000120
 80012c4:	2000016c 	.word	0x2000016c
 80012c8:	20000214 	.word	0x20000214
 80012cc:	200001c8 	.word	0x200001c8
 80012d0:	200002ac 	.word	0x200002ac
 80012d4:	20000260 	.word	0x20000260
 80012d8:	2000007c 	.word	0x2000007c
 80012dc:	20000160 	.word	0x20000160
 80012e0:	200002f8 	.word	0x200002f8
 80012e4:	20000380 	.word	0x20000380
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000400 	.word	0x48000400

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0a6      	sub	sp, #152	; 0x98
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012fa:	2228      	movs	r2, #40	; 0x28
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f007 fb9a 	bl	8008a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2258      	movs	r2, #88	; 0x58
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f007 fb8c 	bl	8008a38 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001320:	2302      	movs	r3, #2
 8001322:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001328:	2310      	movs	r3, #16
 800132a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800133c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001340:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800134e:	4618      	mov	r0, r3
 8001350:	f002 ffee 	bl	8004330 <HAL_RCC_OscConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800135a:	f000 fac7 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135e:	230f      	movs	r3, #15
 8001360:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001362:	2302      	movs	r3, #2
 8001364:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001374:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f004 f82c 	bl	80053d8 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001386:	f000 fab1 	bl	80018ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <SystemClock_Config+0xd8>)
 800138c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800139c:	2300      	movs	r3, #0
 800139e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 80013a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fa47 	bl	8005844 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80013bc:	f000 fa96 	bl	80018ec <Error_Handler>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3798      	adds	r7, #152	; 0x98
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	00b010a2 	.word	0x00b010a2

080013cc <displayNormal>:

/* USER CODE BEGIN 4 */

void displayNormal(){
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
	char statusName[2][7] = {{"STOP  "}, {"START "}};
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <displayNormal+0x60>)
 80013d4:	463c      	mov	r4, r7
 80013d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d8:	c407      	stmia	r4!, {r0, r1, r2}
 80013da:	8023      	strh	r3, [r4, #0]
	sprintf((char *)disp.first_line, "Status: %s", statusName[motor.state]);
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <displayNormal+0x64>)
 80013de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80013e2:	4619      	mov	r1, r3
 80013e4:	463a      	mov	r2, r7
 80013e6:	460b      	mov	r3, r1
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	1a5b      	subs	r3, r3, r1
 80013ec:	4413      	add	r3, r2
 80013ee:	461a      	mov	r2, r3
 80013f0:	4910      	ldr	r1, [pc, #64]	; (8001434 <displayNormal+0x68>)
 80013f2:	4811      	ldr	r0, [pc, #68]	; (8001438 <displayNormal+0x6c>)
 80013f4:	f007 fb00 	bl	80089f8 <siprintf>
	sprintf((char *)disp.second_line, "Set RPM: %d    ", motor.setRpm);
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <displayNormal+0x64>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	461a      	mov	r2, r3
 80013fe:	490f      	ldr	r1, [pc, #60]	; (800143c <displayNormal+0x70>)
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <displayNormal+0x74>)
 8001402:	f007 faf9 	bl	80089f8 <siprintf>
	sprintf((char *)disp.third_line, "Actual RPM: %d    ", motor.actRpm);
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <displayNormal+0x64>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	461a      	mov	r2, r3
 800140c:	490d      	ldr	r1, [pc, #52]	; (8001444 <displayNormal+0x78>)
 800140e:	480e      	ldr	r0, [pc, #56]	; (8001448 <displayNormal+0x7c>)
 8001410:	f007 faf2 	bl	80089f8 <siprintf>
	sprintf((char *)disp.fourth_line, "Temperature: %d%cC ", motor.temp, 223);
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <displayNormal+0x64>)
 8001416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001418:	23df      	movs	r3, #223	; 0xdf
 800141a:	490c      	ldr	r1, [pc, #48]	; (800144c <displayNormal+0x80>)
 800141c:	480c      	ldr	r0, [pc, #48]	; (8001450 <displayNormal+0x84>)
 800141e:	f007 faeb 	bl	80089f8 <siprintf>
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	0800939c 	.word	0x0800939c
 8001430:	20000120 	.word	0x20000120
 8001434:	08009358 	.word	0x08009358
 8001438:	2000016d 	.word	0x2000016d
 800143c:	08009364 	.word	0x08009364
 8001440:	20000182 	.word	0x20000182
 8001444:	08009374 	.word	0x08009374
 8001448:	20000197 	.word	0x20000197
 800144c:	08009388 	.word	0x08009388
 8001450:	200001ac 	.word	0x200001ac

08001454 <displayOverheat>:

void displayOverheat(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	sprintf((char *)disp.first_line, "                    ");
 8001458:	490a      	ldr	r1, [pc, #40]	; (8001484 <displayOverheat+0x30>)
 800145a:	480b      	ldr	r0, [pc, #44]	; (8001488 <displayOverheat+0x34>)
 800145c:	f007 facc 	bl	80089f8 <siprintf>
	sprintf((char *)disp.second_line, "     !OVERHEAT!   ");
 8001460:	490a      	ldr	r1, [pc, #40]	; (800148c <displayOverheat+0x38>)
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <displayOverheat+0x3c>)
 8001464:	f007 fac8 	bl	80089f8 <siprintf>
	sprintf((char *)disp.third_line,  "       !%d%cC!   ", motor.temp, 223);
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <displayOverheat+0x40>)
 800146a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146c:	23df      	movs	r3, #223	; 0xdf
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <displayOverheat+0x44>)
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <displayOverheat+0x48>)
 8001472:	f007 fac1 	bl	80089f8 <siprintf>
	sprintf((char *)disp.fourth_line, "                    ");
 8001476:	4903      	ldr	r1, [pc, #12]	; (8001484 <displayOverheat+0x30>)
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <displayOverheat+0x4c>)
 800147a:	f007 fabd 	bl	80089f8 <siprintf>
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	080093ac 	.word	0x080093ac
 8001488:	2000016d 	.word	0x2000016d
 800148c:	080093c4 	.word	0x080093c4
 8001490:	20000182 	.word	0x20000182
 8001494:	20000120 	.word	0x20000120
 8001498:	080093d8 	.word	0x080093d8
 800149c:	20000197 	.word	0x20000197
 80014a0:	200001ac 	.word	0x200001ac

080014a4 <sendData>:

void sendData(){
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b08b      	sub	sp, #44	; 0x2c
 80014a8:	af02      	add	r7, sp, #8
	char msg[32];
	sprintf((char*) msg, "%d, %d, %d, %d\n", motor.actRpm, motor.setRpm, motor.err, 0);
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <sendData+0x40>)
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <sendData+0x40>)
 80014b0:	6899      	ldr	r1, [r3, #8]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <sendData+0x40>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4638      	mov	r0, r7
 80014b8:	2400      	movs	r4, #0
 80014ba:	9401      	str	r4, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	460b      	mov	r3, r1
 80014c0:	4909      	ldr	r1, [pc, #36]	; (80014e8 <sendData+0x44>)
 80014c2:	f007 fa99 	bl	80089f8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 100);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe fe89 	bl	80001e0 <strlen>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4639      	mov	r1, r7
 80014d4:	2364      	movs	r3, #100	; 0x64
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <sendData+0x48>)
 80014d8:	f006 f826 	bl	8007528 <HAL_UART_Transmit>
}
 80014dc:	bf00      	nop
 80014de:	3724      	adds	r7, #36	; 0x24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	20000120 	.word	0x20000120
 80014e8:	080093ec 	.word	0x080093ec
 80014ec:	200002f8 	.word	0x200002f8

080014f0 <setDir>:

void setDir(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if(motor.setRpm < 0){
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <setDir+0x50>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da10      	bge.n	800151e <setDir+0x2e>
		motor.dir = -1;
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <setDir+0x50>)
 80014fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001502:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RIGHT_GPIO_Port, RIGHT_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <setDir+0x54>)
 800150c:	f002 facc 	bl	8003aa8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_GPIO_Port, LEFT_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001516:	480b      	ldr	r0, [pc, #44]	; (8001544 <setDir+0x54>)
 8001518:	f002 fac6 	bl	8003aa8 <HAL_GPIO_WritePin>
	else {
		motor.dir = 1;
		HAL_GPIO_WritePin(LEFT_GPIO_Port, LEFT_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RIGHT_GPIO_Port, RIGHT_Pin, GPIO_PIN_SET);
	}
}
 800151c:	e00e      	b.n	800153c <setDir+0x4c>
		motor.dir = 1;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <setDir+0x50>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LEFT_GPIO_Port, LEFT_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152a:	4806      	ldr	r0, [pc, #24]	; (8001544 <setDir+0x54>)
 800152c:	f002 fabc 	bl	8003aa8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_GPIO_Port, RIGHT_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001536:	4803      	ldr	r0, [pc, #12]	; (8001544 <setDir+0x54>)
 8001538:	f002 fab6 	bl	8003aa8 <HAL_GPIO_WritePin>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000120 	.word	0x20000120
 8001544:	48000800 	.word	0x48000800

08001548 <temp>:

void temp(){
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK) {
 800154c:	210a      	movs	r1, #10
 800154e:	4838      	ldr	r0, [pc, #224]	; (8001630 <temp+0xe8>)
 8001550:	f001 f908 	bl	8002764 <HAL_ADC_PollForConversion>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <temp+0x26>
		motor.tempRead = HAL_ADC_GetValue(&hadc2);
 800155a:	4835      	ldr	r0, [pc, #212]	; (8001630 <temp+0xe8>)
 800155c:	f001 fa04 	bl	8002968 <HAL_ADC_GetValue>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b33      	ldr	r3, [pc, #204]	; (8001634 <temp+0xec>)
 8001566:	855a      	strh	r2, [r3, #42]	; 0x2a
		HAL_ADC_Start(&hadc2);
 8001568:	4831      	ldr	r0, [pc, #196]	; (8001630 <temp+0xe8>)
 800156a:	f000 ffe5 	bl	8002538 <HAL_ADC_Start>
	}

	motor.temp = 33000/(3.3*motor.tempRead/4096)-10000;
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <temp+0xec>)
 8001570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffde 	bl	8000534 <__aeabi_i2d>
 8001578:	a323      	add	r3, pc, #140	; (adr r3, 8001608 <temp+0xc0>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f843 	bl	8000608 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <temp+0xf0>)
 8001590:	f7ff f964 	bl	800085c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	a11d      	add	r1, pc, #116	; (adr r1, 8001610 <temp+0xc8>)
 800159a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800159e:	f7ff f95d 	bl	800085c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001618 <temp+0xd0>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7fe fe72 	bl	8000298 <__aeabi_dsub>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fa36 	bl	8000a2c <__aeabi_d2iz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <temp+0xec>)
 80015c4:	6253      	str	r3, [r2, #36]	; 0x24
	motor.temp = motor.temp*-0.00438+69.5;
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <temp+0xec>)
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffb2 	bl	8000534 <__aeabi_i2d>
 80015d0:	a313      	add	r3, pc, #76	; (adr r3, 8001620 <temp+0xd8>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7ff f817 	bl	8000608 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	a311      	add	r3, pc, #68	; (adr r3, 8001628 <temp+0xe0>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7fe fe58 	bl	800029c <__adddf3>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff fa1a 	bl	8000a2c <__aeabi_d2iz>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <temp+0xec>)
 80015fc:	6253      	str	r3, [r2, #36]	; 0x24
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	66666666 	.word	0x66666666
 800160c:	400a6666 	.word	0x400a6666
 8001610:	00000000 	.word	0x00000000
 8001614:	40e01d00 	.word	0x40e01d00
 8001618:	00000000 	.word	0x00000000
 800161c:	40c38800 	.word	0x40c38800
 8001620:	4c1a8ac6 	.word	0x4c1a8ac6
 8001624:	bf71f0c3 	.word	0xbf71f0c3
 8001628:	00000000 	.word	0x00000000
 800162c:	40516000 	.word	0x40516000
 8001630:	2000007c 	.word	0x2000007c
 8001634:	20000120 	.word	0x20000120
 8001638:	40b00000 	.word	0x40b00000
 800163c:	00000000 	.word	0x00000000

08001640 <pid>:

void pid() {
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	af00      	add	r7, sp, #0
	if(motor.state == 1){
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <pid+0x138>)
 8001646:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800164a:	2b01      	cmp	r3, #1
 800164c:	f040 8088 	bne.w	8001760 <pid+0x120>
	motor.err = (motor.setRpm - motor.actRpm)*motor.dir;
 8001650:	4b49      	ldr	r3, [pc, #292]	; (8001778 <pid+0x138>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4b48      	ldr	r3, [pc, #288]	; (8001778 <pid+0x138>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	4a47      	ldr	r2, [pc, #284]	; (8001778 <pid+0x138>)
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	4a45      	ldr	r2, [pc, #276]	; (8001778 <pid+0x138>)
 8001664:	61d3      	str	r3, [r2, #28]
	motor.integral += (double)(motor.err / ENCODER_FREQ);
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <pid+0x138>)
 8001668:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <pid+0x138>)
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff5f 	bl	8000534 <__aeabi_i2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <pid+0x13c>)
 800167c:	f7ff f8ee 	bl	800085c <__aeabi_ddiv>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7fe fe08 	bl	800029c <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4939      	ldr	r1, [pc, #228]	; (8001778 <pid+0x138>)
 8001692:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	motor.derivative = (double) (motor.err - motor.lastErr) * ENCODER_FREQ;
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <pid+0x138>)
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <pid+0x138>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff47 	bl	8000534 <__aeabi_i2d>
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	4b34      	ldr	r3, [pc, #208]	; (800177c <pid+0x13c>)
 80016ac:	f7fe ffac 	bl	8000608 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4930      	ldr	r1, [pc, #192]	; (8001778 <pid+0x138>)
 80016b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	motor.pwm = (int) KP * (motor.err + KI* motor.integral + KD * motor.derivative);
 80016ba:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <pid+0x138>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff38 	bl	8000534 <__aeabi_i2d>
 80016c4:	4604      	mov	r4, r0
 80016c6:	460d      	mov	r5, r1
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <pid+0x138>)
 80016ca:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80016ce:	a326      	add	r3, pc, #152	; (adr r3, 8001768 <pid+0x128>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ff98 	bl	8000608 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fddc 	bl	800029c <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <pid+0x138>)
 80016ee:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016f2:	a31f      	add	r3, pc, #124	; (adr r3, 8001770 <pid+0x130>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff86 	bl	8000608 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4620      	mov	r0, r4
 8001702:	4629      	mov	r1, r5
 8001704:	f7fe fdca 	bl	800029c <__adddf3>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <pid+0x140>)
 8001716:	f7fe ff77 	bl	8000608 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f983 	bl	8000a2c <__aeabi_d2iz>
 8001726:	4603      	mov	r3, r0
 8001728:	4a13      	ldr	r2, [pc, #76]	; (8001778 <pid+0x138>)
 800172a:	6193      	str	r3, [r2, #24]
	motor.lastErr = motor.err;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <pid+0x138>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	4a11      	ldr	r2, [pc, #68]	; (8001778 <pid+0x138>)
 8001732:	6213      	str	r3, [r2, #32]
	if (motor.pwm < 0)
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <pid+0x138>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b00      	cmp	r3, #0
 800173a:	da03      	bge.n	8001744 <pid+0x104>
		motor.pwm = 0;
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <pid+0x138>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
 8001742:	e008      	b.n	8001756 <pid+0x116>
	else if (motor.pwm > MAX_PWM)
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <pid+0x138>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800174c:	db03      	blt.n	8001756 <pid+0x116>
		motor.pwm = MAX_PWM;
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <pid+0x138>)
 8001750:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001754:	619a      	str	r2, [r3, #24]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motor.pwm);
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <pid+0x138>)
 8001758:	699a      	ldr	r2, [r3, #24]
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <pid+0x144>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001760:	bf00      	nop
 8001762:	bdb0      	pop	{r4, r5, r7, pc}
 8001764:	f3af 8000 	nop.w
 8001768:	cccccccd 	.word	0xcccccccd
 800176c:	4008cccc 	.word	0x4008cccc
 8001770:	47ae147b 	.word	0x47ae147b
 8001774:	3fb47ae1 	.word	0x3fb47ae1
 8001778:	20000120 	.word	0x20000120
 800177c:	40340000 	.word	0x40340000
 8001780:	401c0000 	.word	0x401c0000
 8001784:	20000260 	.word	0x20000260

08001788 <countRPM>:

void countRPM(){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	if (motor.actCount < motor.lastCount) {
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <countRPM+0x7c>)
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <countRPM+0x7c>)
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	da09      	bge.n	80017ac <countRPM+0x24>
		motor.count = motor.actCount + ENCODER_PULSE - motor.lastCount;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <countRPM+0x7c>)
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <countRPM+0x7c>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <countRPM+0x7c>)
 80017a8:	60d3      	str	r3, [r2, #12]
 80017aa:	e006      	b.n	80017ba <countRPM+0x32>
	} else {
		motor.count = motor.actCount - motor.lastCount;
 80017ac:	4b15      	ldr	r3, [pc, #84]	; (8001804 <countRPM+0x7c>)
 80017ae:	691a      	ldr	r2, [r3, #16]
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <countRPM+0x7c>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <countRPM+0x7c>)
 80017b8:	60d3      	str	r3, [r2, #12]
	}
	motor.lastCount = motor.actCount;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <countRPM+0x7c>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <countRPM+0x7c>)
 80017c0:	6153      	str	r3, [r2, #20]
	motor.actRpm = (int) motor.count * (60 * ENCODER_FREQ / ENCODER_PULSE);
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <countRPM+0x7c>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feb4 	bl	8000534 <__aeabi_i2d>
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <countRPM+0x80>)
 80017d2:	f7fe ff19 	bl	8000608 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f925 	bl	8000a2c <__aeabi_d2iz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <countRPM+0x7c>)
 80017e6:	6053      	str	r3, [r2, #4]
	if(motor.actRpm>500)
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <countRPM+0x7c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017f0:	dd05      	ble.n	80017fe <countRPM+0x76>
		motor.actRpm =  motor.actRpm-1200;
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <countRPM+0x7c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80017fa:	4a02      	ldr	r2, [pc, #8]	; (8001804 <countRPM+0x7c>)
 80017fc:	6053      	str	r3, [r2, #4]
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000120 	.word	0x20000120
 8001808:	3ff40000 	.word	0x3ff40000

0800180c <procesData>:

    void procesData(){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	switch (RxBuffer[0]) {
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <procesData+0x4c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b53      	cmp	r3, #83	; 0x53
 8001816:	d00a      	beq.n	800182e <procesData+0x22>
 8001818:	2b53      	cmp	r3, #83	; 0x53
 800181a:	dc15      	bgt.n	8001848 <procesData+0x3c>
 800181c:	2b50      	cmp	r3, #80	; 0x50
 800181e:	d00b      	beq.n	8001838 <procesData+0x2c>
 8001820:	2b52      	cmp	r3, #82	; 0x52
 8001822:	d111      	bne.n	8001848 <procesData+0x3c>
		case 'R':
			motor.state = RUN;
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <procesData+0x50>)
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			break;
 800182c:	e00d      	b.n	800184a <procesData+0x3e>
		case 'S':
			motor.state = STOP;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <procesData+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			break;
 8001836:	e008      	b.n	800184a <procesData+0x3e>
		case 'P':
			motor.setRpm = atoi((const char*)RxBuffer+2);
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <procesData+0x54>)
 800183a:	4618      	mov	r0, r3
 800183c:	f007 f84b 	bl	80088d6 <atoi>
 8001840:	4603      	mov	r3, r0
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <procesData+0x50>)
 8001844:	6093      	str	r3, [r2, #8]
			break;
 8001846:	e000      	b.n	800184a <procesData+0x3e>
		default:
			break;
 8001848:	bf00      	nop
	}
	memset(RxBuffer, 0, sizeof(RxBuffer));
 800184a:	220a      	movs	r2, #10
 800184c:	2100      	movs	r1, #0
 800184e:	4802      	ldr	r0, [pc, #8]	; (8001858 <procesData+0x4c>)
 8001850:	f007 f8f2 	bl	8008a38 <memset>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000160 	.word	0x20000160
 800185c:	20000120 	.word	0x20000120
 8001860:	20000162 	.word	0x20000162

08001864 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2){
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10e      	bne.n	8001898 <HAL_UARTEx_RxEventCallback+0x34>
		procesData();
 800187a:	f7ff ffc7 	bl	800180c <procesData>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuffer, RxBuffer_Size);
 800187e:	220a      	movs	r2, #10
 8001880:	4908      	ldr	r1, [pc, #32]	; (80018a4 <HAL_UARTEx_RxEventCallback+0x40>)
 8001882:	4809      	ldr	r0, [pc, #36]	; (80018a8 <HAL_UARTEx_RxEventCallback+0x44>)
 8001884:	f006 ffd3 	bl	800882e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_UARTEx_RxEventCallback+0x48>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_UARTEx_RxEventCallback+0x48>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0204 	bic.w	r2, r2, #4
 8001896:	601a      	str	r2, [r3, #0]
	}
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40004400 	.word	0x40004400
 80018a4:	20000160 	.word	0x20000160
 80018a8:	200002f8 	.word	0x200002f8
 80018ac:	20000380 	.word	0x20000380

080018b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d109      	bne.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x26>
		motor.actCount = __HAL_TIM_GET_COUNTER(&htim2);
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80018cc:	611a      	str	r2, [r3, #16]
		countRPM();
 80018ce:	f7ff ff5b 	bl	8001788 <countRPM>
		pid();
 80018d2:	f7ff feb5 	bl	8001640 <pid>
	}
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40014400 	.word	0x40014400
 80018e4:	20000214 	.word	0x20000214
 80018e8:	20000120 	.word	0x20000120

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80018f4:	e7fe      	b.n	80018f4 <Error_Handler+0x8>
	...

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_MspInit+0x44>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_MspInit+0x44>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6193      	str	r3, [r2, #24]
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_MspInit+0x44>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_MspInit+0x44>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a08      	ldr	r2, [pc, #32]	; (800193c <HAL_MspInit+0x44>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_MspInit+0x44>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800192e:	2007      	movs	r0, #7
 8001930:	f001 fcac 	bl	800328c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800198c:	f000 fb96 	bl	80020bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DMA1_Channel6_IRQHandler+0x10>)
 800199a:	f001 fdd5 	bl	8003548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000380 	.word	0x20000380

080019a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80019ae:	f004 fd39 	bl	8006424 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80019b2:	4803      	ldr	r0, [pc, #12]	; (80019c0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80019b4:	f004 fd36 	bl	8006424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200001c8 	.word	0x200001c8
 80019c0:	200002ac 	.word	0x200002ac

080019c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <USART2_IRQHandler+0x10>)
 80019ca:	f005 fe37 	bl	800763c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200002f8 	.word	0x200002f8

080019d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e0:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <_sbrk+0x5c>)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <_sbrk+0x60>)
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ec:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <_sbrk+0x64>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <_sbrk+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <_sbrk+0x64>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d207      	bcs.n	8001a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a08:	f007 f81e 	bl	8008a48 <__errno>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	220c      	movs	r2, #12
 8001a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	e009      	b.n	8001a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <_sbrk+0x64>)
 8001a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20010000 	.word	0x20010000
 8001a38:	00000400 	.word	0x00000400
 8001a3c:	200001c4 	.word	0x200001c4
 8001a40:	20000510 	.word	0x20000510

08001a44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <SystemInit+0x20>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <SystemInit+0x20>)
 8001a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001a88:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <MX_TIM1_Init+0xa4>)
 8001a8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001a8e:	2247      	movs	r2, #71	; 0x47
 8001a90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001a9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ab2:	4815      	ldr	r0, [pc, #84]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001ab4:	f004 f8e4 	bl	8005c80 <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001abe:	f7ff ff15 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001ad0:	f004 fedc 	bl	800688c <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001ada:	f7ff ff07 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_TIM1_Init+0xa0>)
 8001af0:	f005 fc22 	bl	8007338 <HAL_TIMEx_MasterConfigSynchronization>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001afa:	f7ff fef7 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001c8 	.word	0x200001c8
 8001b0c:	40012c00 	.word	0x40012c00

08001b10 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	; 0x30
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b16:	f107 030c 	add.w	r3, r7, #12
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f006 ff8a 	bl	8008a38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 959;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b44:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001b48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b82:	f004 fb1b 	bl	80061bc <HAL_TIM_Encoder_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b8c:	f7ff feae 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM2_Init+0xa4>)
 8001b9e:	f005 fbcb 	bl	8007338 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001ba8:	f7ff fea0 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000214 	.word	0x20000214

08001bb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08e      	sub	sp, #56	; 0x38
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	615a      	str	r2, [r3, #20]
 8001be8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001bec:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <MX_TIM3_Init+0xec>)
 8001bee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001bfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c0a:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c10:	4823      	ldr	r0, [pc, #140]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001c12:	f004 f835 	bl	8005c80 <HAL_TIM_Base_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c1c:	f7ff fe66 	bl	80018ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	481c      	ldr	r0, [pc, #112]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001c2e:	f004 fe2d 	bl	800688c <HAL_TIM_ConfigClockSource>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c38:	f7ff fe58 	bl	80018ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c3c:	4818      	ldr	r0, [pc, #96]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001c3e:	f004 f94f 	bl	8005ee0 <HAL_TIM_PWM_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c48:	f7ff fe50 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001c5c:	f005 fb6c 	bl	8007338 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c66:	f7ff fe41 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6a:	2360      	movs	r3, #96	; 0x60
 8001c6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001c82:	f004 fcef 	bl	8006664 <HAL_TIM_PWM_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c8c:	f7ff fe2e 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <MX_TIM3_Init+0xe8>)
 8001c92:	f000 f8c7 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 8001c96:	bf00      	nop
 8001c98:	3738      	adds	r7, #56	; 0x38
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000260 	.word	0x20000260
 8001ca4:	40000400 	.word	0x40000400

08001ca8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_TIM16_Init+0x48>)
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <MX_TIM16_Init+0x4c>)
 8001cb0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7199;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_TIM16_Init+0x48>)
 8001cb4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001cb8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <MX_TIM16_Init+0x48>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_TIM16_Init+0x48>)
 8001cc2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001cc6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_TIM16_Init+0x48>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_TIM16_Init+0x48>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_TIM16_Init+0x48>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_TIM16_Init+0x48>)
 8001cdc:	f003 ffd0 	bl	8005c80 <HAL_TIM_Base_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001ce6:	f7ff fe01 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002ac 	.word	0x200002ac
 8001cf4:	40014400 	.word	0x40014400

08001cf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_TIM_Base_MspInit+0x9c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d114      	bne.n	8001d34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d14:	6193      	str	r3, [r2, #24]
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2019      	movs	r0, #25
 8001d28:	f001 fabb 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d2c:	2019      	movs	r0, #25
 8001d2e:	f001 fad4 	bl	80032da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001d32:	e02a      	b.n	8001d8a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_TIM_Base_MspInit+0xa4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d10c      	bne.n	8001d58 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
}
 8001d56:	e018      	b.n	8001d8a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_TIM_Base_MspInit+0xa8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d113      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	6193      	str	r3, [r2, #24]
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_TIM_Base_MspInit+0xa0>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2019      	movs	r0, #25
 8001d80:	f001 fa8f 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d84:	2019      	movs	r0, #25
 8001d86:	f001 faa8 	bl	80032da <HAL_NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40014400 	.word	0x40014400

08001da4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc4:	d128      	bne.n	8001e18 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dc6:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	4a0f      	ldr	r2, [pc, #60]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	6153      	str	r3, [r2, #20]
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001df6:	2303      	movs	r3, #3
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e06:	2301      	movs	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e14:	f001 fca6 	bl	8003764 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b088      	sub	sp, #32
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a11      	ldr	r2, [pc, #68]	; (8001e88 <HAL_TIM_MspPostInit+0x64>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d11b      	bne.n	8001e7e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <HAL_TIM_MspPostInit+0x68>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <HAL_TIM_MspPostInit+0x68>)
 8001e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e50:	6153      	str	r3, [r2, #20]
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_TIM_MspPostInit+0x68>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ENABLE_PWM_Pin;
 8001e5e:	2340      	movs	r3, #64	; 0x40
 8001e60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ENABLE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	4619      	mov	r1, r3
 8001e78:	4805      	ldr	r0, [pc, #20]	; (8001e90 <HAL_TIM_MspPostInit+0x6c>)
 8001e7a:	f001 fc73 	bl	8003764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3720      	adds	r7, #32
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	48000800 	.word	0x48000800

08001e94 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001e9a:	4a15      	ldr	r2, [pc, #84]	; (8001ef0 <MX_USART2_UART_Init+0x5c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_USART2_UART_Init+0x58>)
 8001ed8:	f005 fad8 	bl	800748c <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ee2:	f7ff fd03 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200002f8 	.word	0x200002f8
 8001ef0:	40004400 	.word	0x40004400

08001ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <HAL_UART_MspInit+0xd8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d156      	bne.n	8001fc4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_UART_MspInit+0xdc>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <HAL_UART_MspInit+0xdc>)
 8001f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_UART_MspInit+0xdc>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_UART_MspInit+0xdc>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <HAL_UART_MspInit+0xdc>)
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f38:	6153      	str	r3, [r2, #20]
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_UART_MspInit+0xdc>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f46:	230c      	movs	r3, #12
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f56:	2307      	movs	r3, #7
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f64:	f001 fbfe 	bl	8003764 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_UART_MspInit+0xe4>)
 8001f6c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f7c:	2280      	movs	r2, #128	; 0x80
 8001f7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f98:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001f9a:	f001 f9b8 	bl	800330e <HAL_DMA_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001fa4:	f7ff fca2 	bl	80018ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001fac:	675a      	str	r2, [r3, #116]	; 0x74
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_UART_MspInit+0xe0>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2026      	movs	r0, #38	; 0x26
 8001fba:	f001 f972 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fbe:	2026      	movs	r0, #38	; 0x26
 8001fc0:	f001 f98b 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40004400 	.word	0x40004400
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	20000380 	.word	0x20000380
 8001fd8:	4002006c 	.word	0x4002006c

08001fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fe0:	f7ff fd30 	bl	8001a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fe6:	490d      	ldr	r1, [pc, #52]	; (800201c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe8:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <LoopForever+0xe>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fec:	e002      	b.n	8001ff4 <LoopCopyDataInit>

08001fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ff2:	3304      	adds	r3, #4

08001ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff8:	d3f9      	bcc.n	8001fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ffc:	4c0a      	ldr	r4, [pc, #40]	; (8002028 <LoopForever+0x16>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002000:	e001      	b.n	8002006 <LoopFillZerobss>

08002002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002004:	3204      	adds	r2, #4

08002006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002008:	d3fb      	bcc.n	8002002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800200a:	f006 fd23 	bl	8008a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800200e:	f7ff f849 	bl	80010a4 <main>

08002012 <LoopForever>:

LoopForever:
    b LoopForever
 8002012:	e7fe      	b.n	8002012 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002014:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800201c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002020:	08009570 	.word	0x08009570
  ldr r2, =_sbss
 8002024:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002028:	20000510 	.word	0x20000510

0800202c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC1_2_IRQHandler>
	...

08002030 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_Init+0x28>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_Init+0x28>)
 800203a:	f043 0310 	orr.w	r3, r3, #16
 800203e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002040:	2003      	movs	r0, #3
 8002042:	f001 f923 	bl	800328c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002046:	2000      	movs	r0, #0
 8002048:	f000 f808 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800204c:	f7ff fc54 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000

0800205c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_InitTick+0x54>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_InitTick+0x58>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f93b 	bl	80032f6 <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00e      	b.n	80020a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b0f      	cmp	r3, #15
 800208e:	d80a      	bhi.n	80020a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002090:	2200      	movs	r2, #0
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f001 f903 	bl	80032a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <HAL_InitTick+0x5c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_IncTick+0x20>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_IncTick+0x24>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_IncTick+0x24>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000008 	.word	0x20000008
 80020e0:	200003c4 	.word	0x200003c4

080020e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_GetTick+0x14>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	200003c4 	.word	0x200003c4

080020fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002104:	f7ff ffee 	bl	80020e4 <HAL_GetTick>
 8002108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d005      	beq.n	8002122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_Delay+0x44>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4413      	add	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002122:	bf00      	nop
 8002124:	f7ff ffde 	bl	80020e4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f7      	bhi.n	8002124 <HAL_Delay+0x28>
  {
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008

08002144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b09a      	sub	sp, #104	; 0x68
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e1e3      	b.n	800252c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d176      	bne.n	8002264 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d152      	bne.n	8002224 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe fccd 	bl	8000b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d13b      	bne.n	8002224 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 ff37 	bl	8003020 <ADC_Disable>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d12f      	bne.n	8002224 <HAL_ADC_Init+0xe0>
 80021c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d12b      	bne.n	8002224 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021d4:	f023 0302 	bic.w	r3, r3, #2
 80021d8:	f043 0202 	orr.w	r2, r3, #2
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002200:	4b92      	ldr	r3, [pc, #584]	; (800244c <HAL_ADC_Init+0x308>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a92      	ldr	r2, [pc, #584]	; (8002450 <HAL_ADC_Init+0x30c>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0c9a      	lsrs	r2, r3, #18
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002216:	e002      	b.n	800221e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	3b01      	subs	r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d007      	beq.n	8002242 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800223c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002240:	d110      	bne.n	8002264 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f023 0312 	bic.w	r3, r3, #18
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 8150 	bne.w	8002512 <HAL_ADC_Init+0x3ce>
 8002272:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 814b 	bne.w	8002512 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 8143 	bne.w	8002512 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002294:	f043 0202 	orr.w	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a4:	d004      	beq.n	80022b0 <HAL_ADC_Init+0x16c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6a      	ldr	r2, [pc, #424]	; (8002454 <HAL_ADC_Init+0x310>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_Init+0x170>
 80022b0:	4b69      	ldr	r3, [pc, #420]	; (8002458 <HAL_ADC_Init+0x314>)
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_Init+0x172>
 80022b4:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_ADC_Init+0x318>)
 80022b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c0:	d102      	bne.n	80022c8 <HAL_ADC_Init+0x184>
 80022c2:	4b64      	ldr	r3, [pc, #400]	; (8002454 <HAL_ADC_Init+0x310>)
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e01a      	b.n	80022fe <HAL_ADC_Init+0x1ba>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a61      	ldr	r2, [pc, #388]	; (8002454 <HAL_ADC_Init+0x310>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d103      	bne.n	80022da <HAL_ADC_Init+0x196>
 80022d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e011      	b.n	80022fe <HAL_ADC_Init+0x1ba>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a60      	ldr	r2, [pc, #384]	; (8002460 <HAL_ADC_Init+0x31c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d102      	bne.n	80022ea <HAL_ADC_Init+0x1a6>
 80022e4:	4b5f      	ldr	r3, [pc, #380]	; (8002464 <HAL_ADC_Init+0x320>)
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e009      	b.n	80022fe <HAL_ADC_Init+0x1ba>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5d      	ldr	r2, [pc, #372]	; (8002464 <HAL_ADC_Init+0x320>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d102      	bne.n	80022fa <HAL_ADC_Init+0x1b6>
 80022f4:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <HAL_ADC_Init+0x31c>)
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e001      	b.n	80022fe <HAL_ADC_Init+0x1ba>
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d108      	bne.n	800231e <HAL_ADC_Init+0x1da>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_ADC_Init+0x1da>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_ADC_Init+0x1dc>
 800231e:	2300      	movs	r3, #0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11c      	bne.n	800235e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002324:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_ADC_Init+0x202>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Init+0x202>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_ADC_Init+0x204>
 8002346:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002348:	2b00      	cmp	r3, #0
 800234a:	d108      	bne.n	800235e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800234c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7e5b      	ldrb	r3, [r3, #25]
 8002362:	035b      	lsls	r3, r3, #13
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002368:	2a01      	cmp	r2, #1
 800236a:	d002      	beq.n	8002372 <HAL_ADC_Init+0x22e>
 800236c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002370:	e000      	b.n	8002374 <HAL_ADC_Init+0x230>
 8002372:	2200      	movs	r2, #0
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4313      	orrs	r3, r2
 8002382:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002384:	4313      	orrs	r3, r2
 8002386:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d11b      	bne.n	80023ca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7e5b      	ldrb	r3, [r3, #25]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	3b01      	subs	r3, #1
 80023a0:	045a      	lsls	r2, r3, #17
 80023a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023aa:	663b      	str	r3, [r7, #96]	; 0x60
 80023ac:	e00d      	b.n	80023ca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80023b6:	f043 0220 	orr.w	r2, r3, #32
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d054      	beq.n	800247c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a22      	ldr	r2, [pc, #136]	; (8002460 <HAL_ADC_Init+0x31c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_ADC_Init+0x2a2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a20      	ldr	r2, [pc, #128]	; (8002464 <HAL_ADC_Init+0x320>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d140      	bne.n	8002468 <HAL_ADC_Init+0x324>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80023ee:	d02a      	beq.n	8002446 <HAL_ADC_Init+0x302>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f8:	d022      	beq.n	8002440 <HAL_ADC_Init+0x2fc>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002402:	d01a      	beq.n	800243a <HAL_ADC_Init+0x2f6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800240c:	d012      	beq.n	8002434 <HAL_ADC_Init+0x2f0>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002416:	d00a      	beq.n	800242e <HAL_ADC_Init+0x2ea>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002420:	d002      	beq.n	8002428 <HAL_ADC_Init+0x2e4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	e023      	b.n	8002470 <HAL_ADC_Init+0x32c>
 8002428:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800242c:	e020      	b.n	8002470 <HAL_ADC_Init+0x32c>
 800242e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002432:	e01d      	b.n	8002470 <HAL_ADC_Init+0x32c>
 8002434:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002438:	e01a      	b.n	8002470 <HAL_ADC_Init+0x32c>
 800243a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800243e:	e017      	b.n	8002470 <HAL_ADC_Init+0x32c>
 8002440:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002444:	e014      	b.n	8002470 <HAL_ADC_Init+0x32c>
 8002446:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800244a:	e011      	b.n	8002470 <HAL_ADC_Init+0x32c>
 800244c:	20000000 	.word	0x20000000
 8002450:	431bde83 	.word	0x431bde83
 8002454:	50000100 	.word	0x50000100
 8002458:	50000300 	.word	0x50000300
 800245c:	50000700 	.word	0x50000700
 8002460:	50000400 	.word	0x50000400
 8002464:	50000500 	.word	0x50000500
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002474:	4313      	orrs	r3, r2
 8002476:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002478:	4313      	orrs	r3, r2
 800247a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d114      	bne.n	80024b4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002498:	f023 0302 	bic.w	r3, r3, #2
 800249c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7e1b      	ldrb	r3, [r3, #24]
 80024a2:	039a      	lsls	r2, r3, #14
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4313      	orrs	r3, r2
 80024ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024b0:	4313      	orrs	r3, r2
 80024b2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_ADC_Init+0x3f0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80024c4:	430b      	orrs	r3, r1
 80024c6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10c      	bne.n	80024ea <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f023 010f 	bic.w	r1, r3, #15
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
 80024e8:	e007      	b.n	80024fa <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 020f 	bic.w	r2, r2, #15
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f023 0303 	bic.w	r3, r3, #3
 8002508:	f043 0201 	orr.w	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
 8002510:	e00a      	b.n	8002528 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f023 0312 	bic.w	r3, r3, #18
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002522:	2301      	movs	r3, #1
 8002524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002528:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800252c:	4618      	mov	r0, r3
 800252e:	3768      	adds	r7, #104	; 0x68
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	fff0c007 	.word	0xfff0c007

08002538 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80f9 	bne.w	8002746 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Start+0x2a>
 800255e:	2302      	movs	r3, #2
 8002560:	e0f4      	b.n	800274c <HAL_ADC_Start+0x214>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fcf4 	bl	8002f58 <ADC_Enable>
 8002570:	4603      	mov	r3, r0
 8002572:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80e0 	bne.w	800273c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002598:	d004      	beq.n	80025a4 <HAL_ADC_Start+0x6c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6d      	ldr	r2, [pc, #436]	; (8002754 <HAL_ADC_Start+0x21c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d106      	bne.n	80025b2 <HAL_ADC_Start+0x7a>
 80025a4:	4b6c      	ldr	r3, [pc, #432]	; (8002758 <HAL_ADC_Start+0x220>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <HAL_ADC_Start+0x9a>
 80025b0:	e005      	b.n	80025be <HAL_ADC_Start+0x86>
 80025b2:	4b6a      	ldr	r3, [pc, #424]	; (800275c <HAL_ADC_Start+0x224>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_ADC_Start+0x9a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c6:	d004      	beq.n	80025d2 <HAL_ADC_Start+0x9a>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a64      	ldr	r2, [pc, #400]	; (8002760 <HAL_ADC_Start+0x228>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d115      	bne.n	80025fe <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d036      	beq.n	800265a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80025fc:	e02d      	b.n	800265a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002612:	d004      	beq.n	800261e <HAL_ADC_Start+0xe6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a4e      	ldr	r2, [pc, #312]	; (8002754 <HAL_ADC_Start+0x21c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10a      	bne.n	8002634 <HAL_ADC_Start+0xfc>
 800261e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e008      	b.n	8002646 <HAL_ADC_Start+0x10e>
 8002634:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_ADC_Start+0x228>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf14      	ite	ne
 8002640:	2301      	movne	r3, #1
 8002642:	2300      	moveq	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002652:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002666:	d106      	bne.n	8002676 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f023 0206 	bic.w	r2, r3, #6
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
 8002674:	e002      	b.n	800267c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	221c      	movs	r2, #28
 800268a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002694:	d004      	beq.n	80026a0 <HAL_ADC_Start+0x168>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <HAL_ADC_Start+0x21c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d106      	bne.n	80026ae <HAL_ADC_Start+0x176>
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_ADC_Start+0x220>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d03e      	beq.n	800272a <HAL_ADC_Start+0x1f2>
 80026ac:	e005      	b.n	80026ba <HAL_ADC_Start+0x182>
 80026ae:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_ADC_Start+0x224>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d037      	beq.n	800272a <HAL_ADC_Start+0x1f2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c2:	d004      	beq.n	80026ce <HAL_ADC_Start+0x196>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_ADC_Start+0x21c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d106      	bne.n	80026dc <HAL_ADC_Start+0x1a4>
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_ADC_Start+0x220>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d027      	beq.n	800272a <HAL_ADC_Start+0x1f2>
 80026da:	e005      	b.n	80026e8 <HAL_ADC_Start+0x1b0>
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <HAL_ADC_Start+0x224>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d020      	beq.n	800272a <HAL_ADC_Start+0x1f2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026f0:	d004      	beq.n	80026fc <HAL_ADC_Start+0x1c4>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a17      	ldr	r2, [pc, #92]	; (8002754 <HAL_ADC_Start+0x21c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d106      	bne.n	800270a <HAL_ADC_Start+0x1d2>
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_ADC_Start+0x220>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	2b09      	cmp	r3, #9
 8002706:	d010      	beq.n	800272a <HAL_ADC_Start+0x1f2>
 8002708:	e005      	b.n	8002716 <HAL_ADC_Start+0x1de>
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_ADC_Start+0x224>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 031f 	and.w	r3, r3, #31
 8002712:	2b09      	cmp	r3, #9
 8002714:	d009      	beq.n	800272a <HAL_ADC_Start+0x1f2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800271e:	d004      	beq.n	800272a <HAL_ADC_Start+0x1f2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0e      	ldr	r2, [pc, #56]	; (8002760 <HAL_ADC_Start+0x228>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d10f      	bne.n	800274a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0204 	orr.w	r2, r2, #4
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	e006      	b.n	800274a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002744:	e001      	b.n	800274a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002746:	2302      	movs	r3, #2
 8002748:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	50000100 	.word	0x50000100
 8002758:	50000300 	.word	0x50000300
 800275c:	50000700 	.word	0x50000700
 8002760:	50000400 	.word	0x50000400

08002764 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d102      	bne.n	8002780 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800277a:	2308      	movs	r3, #8
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	e03a      	b.n	80027f6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002788:	d004      	beq.n	8002794 <HAL_ADC_PollForConversion+0x30>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a72      	ldr	r2, [pc, #456]	; (8002958 <HAL_ADC_PollForConversion+0x1f4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d101      	bne.n	8002798 <HAL_ADC_PollForConversion+0x34>
 8002794:	4b71      	ldr	r3, [pc, #452]	; (800295c <HAL_ADC_PollForConversion+0x1f8>)
 8002796:	e000      	b.n	800279a <HAL_ADC_PollForConversion+0x36>
 8002798:	4b71      	ldr	r3, [pc, #452]	; (8002960 <HAL_ADC_PollForConversion+0x1fc>)
 800279a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d112      	bne.n	80027ce <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d11d      	bne.n	80027f2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0bf      	b.n	800294e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f043 0220 	orr.w	r2, r3, #32
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0ad      	b.n	800294e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80027f2:	230c      	movs	r3, #12
 80027f4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027fe:	d004      	beq.n	800280a <HAL_ADC_PollForConversion+0xa6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a54      	ldr	r2, [pc, #336]	; (8002958 <HAL_ADC_PollForConversion+0x1f4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d106      	bne.n	8002818 <HAL_ADC_PollForConversion+0xb4>
 800280a:	4b54      	ldr	r3, [pc, #336]	; (800295c <HAL_ADC_PollForConversion+0x1f8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_ADC_PollForConversion+0xd4>
 8002816:	e005      	b.n	8002824 <HAL_ADC_PollForConversion+0xc0>
 8002818:	4b51      	ldr	r3, [pc, #324]	; (8002960 <HAL_ADC_PollForConversion+0x1fc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HAL_ADC_PollForConversion+0xd4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800282c:	d004      	beq.n	8002838 <HAL_ADC_PollForConversion+0xd4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a4c      	ldr	r2, [pc, #304]	; (8002964 <HAL_ADC_PollForConversion+0x200>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d104      	bne.n	8002842 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e00f      	b.n	8002862 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800284a:	d004      	beq.n	8002856 <HAL_ADC_PollForConversion+0xf2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a41      	ldr	r2, [pc, #260]	; (8002958 <HAL_ADC_PollForConversion+0x1f4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d102      	bne.n	800285c <HAL_ADC_PollForConversion+0xf8>
 8002856:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800285a:	e000      	b.n	800285e <HAL_ADC_PollForConversion+0xfa>
 800285c:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_ADC_PollForConversion+0x200>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002862:	f7ff fc3f 	bl	80020e4 <HAL_GetTick>
 8002866:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002868:	e021      	b.n	80028ae <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d01d      	beq.n	80028ae <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <HAL_ADC_PollForConversion+0x124>
 8002878:	f7ff fc34 	bl	80020e4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d212      	bcs.n	80028ae <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f043 0204 	orr.w	r2, r3, #4
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e04f      	b.n	800294e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0d6      	beq.n	800286a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d131      	bne.n	800293a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12c      	bne.n	800293a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d125      	bne.n	800293a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d112      	bne.n	8002922 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d112      	bne.n	800293a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f043 0201 	orr.w	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
 8002920:	e00b      	b.n	800293a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	50000100 	.word	0x50000100
 800295c:	50000300 	.word	0x50000300
 8002960:	50000700 	.word	0x50000700
 8002964:	50000400 	.word	0x50000400

08002968 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002984:	b480      	push	{r7}
 8002986:	b09b      	sub	sp, #108	; 0x6c
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x22>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e2c8      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x5b4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 82ac 	bne.w	8002f16 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d81c      	bhi.n	8002a00 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	461a      	mov	r2, r3
 80029da:	231f      	movs	r3, #31
 80029dc:	4093      	lsls	r3, r2
 80029de:	43db      	mvns	r3, r3
 80029e0:	4019      	ands	r1, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	fa00 f203 	lsl.w	r2, r0, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
 80029fe:	e063      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d81e      	bhi.n	8002a46 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4413      	add	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	3b1e      	subs	r3, #30
 8002a1c:	221f      	movs	r2, #31
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	4019      	ands	r1, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	3b1e      	subs	r3, #30
 8002a38:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	635a      	str	r2, [r3, #52]	; 0x34
 8002a44:	e040      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b0e      	cmp	r3, #14
 8002a4c:	d81e      	bhi.n	8002a8c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	3b3c      	subs	r3, #60	; 0x3c
 8002a62:	221f      	movs	r2, #31
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	4019      	ands	r1, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	3b3c      	subs	r3, #60	; 0x3c
 8002a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
 8002a8a:	e01d      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	3b5a      	subs	r3, #90	; 0x5a
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	4019      	ands	r1, r3
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	3b5a      	subs	r3, #90	; 0x5a
 8002abc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 80e5 	bne.w	8002ca2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b09      	cmp	r3, #9
 8002ade:	d91c      	bls.n	8002b1a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6999      	ldr	r1, [r3, #24]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	3b1e      	subs	r3, #30
 8002af2:	2207      	movs	r2, #7
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4019      	ands	r1, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6898      	ldr	r0, [r3, #8]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	3b1e      	subs	r3, #30
 8002b0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	619a      	str	r2, [r3, #24]
 8002b18:	e019      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6959      	ldr	r1, [r3, #20]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4019      	ands	r1, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6898      	ldr	r0, [r3, #8]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	fa00 f203 	lsl.w	r2, r0, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d84f      	bhi.n	8002c10 <HAL_ADC_ConfigChannel+0x28c>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <HAL_ADC_ConfigChannel+0x1f4>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002b89 	.word	0x08002b89
 8002b7c:	08002bab 	.word	0x08002bab
 8002b80:	08002bcd 	.word	0x08002bcd
 8002b84:	08002bef 	.word	0x08002bef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b8e:	4b99      	ldr	r3, [pc, #612]	; (8002df4 <HAL_ADC_ConfigChannel+0x470>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	0691      	lsls	r1, r2, #26
 8002b98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ba6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ba8:	e07b      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bb0:	4b90      	ldr	r3, [pc, #576]	; (8002df4 <HAL_ADC_ConfigChannel+0x470>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	0691      	lsls	r1, r2, #26
 8002bba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bc8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bca:	e06a      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002bd2:	4b88      	ldr	r3, [pc, #544]	; (8002df4 <HAL_ADC_ConfigChannel+0x470>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	0691      	lsls	r1, r2, #26
 8002bdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bde:	430a      	orrs	r2, r1
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002bea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002bec:	e059      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bf4:	4b7f      	ldr	r3, [pc, #508]	; (8002df4 <HAL_ADC_ConfigChannel+0x470>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	0691      	lsls	r1, r2, #26
 8002bfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c00:	430a      	orrs	r2, r1
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002c0c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c0e:	e048      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	069b      	lsls	r3, r3, #26
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d107      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c32:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	069b      	lsls	r3, r3, #26
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d107      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c56:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	069b      	lsls	r3, r3, #26
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c7a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	069b      	lsls	r3, r3, #26
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c9e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ca0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d108      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x33e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x33e>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x340>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f040 8131 	bne.w	8002f2c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d00f      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	400a      	ands	r2, r1
 8002cec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002cf0:	e049      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	409a      	lsls	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d91c      	bls.n	8002d4e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6999      	ldr	r1, [r3, #24]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	3b1b      	subs	r3, #27
 8002d26:	2207      	movs	r2, #7
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4019      	ands	r1, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6898      	ldr	r0, [r3, #8]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b1b      	subs	r3, #27
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	619a      	str	r2, [r3, #24]
 8002d4c:	e01b      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6959      	ldr	r1, [r3, #20]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	2207      	movs	r2, #7
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	4019      	ands	r1, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6898      	ldr	r0, [r3, #8]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d8e:	d004      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0x416>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_ADC_ConfigChannel+0x474>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x41a>
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_ADC_ConfigChannel+0x478>)
 8002d9c:	e000      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x41c>
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <HAL_ADC_ConfigChannel+0x47c>)
 8002da0:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d105      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002dba:	2b11      	cmp	r3, #17
 8002dbc:	d105      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002dce:	2b12      	cmp	r3, #18
 8002dd0:	f040 80ac 	bne.w	8002f2c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 80a5 	bne.w	8002f2c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dea:	d10b      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x480>
 8002dec:	4b02      	ldr	r3, [pc, #8]	; (8002df8 <HAL_ADC_ConfigChannel+0x474>)
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e023      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x4b6>
 8002df2:	bf00      	nop
 8002df4:	83fff000 	.word	0x83fff000
 8002df8:	50000100 	.word	0x50000100
 8002dfc:	50000300 	.word	0x50000300
 8002e00:	50000700 	.word	0x50000700
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_ADC_ConfigChannel+0x5c0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d103      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x492>
 8002e0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e011      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x4b6>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d102      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x4a2>
 8002e20:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_ADC_ConfigChannel+0x5c8>)
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e009      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x4b6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a48      	ldr	r2, [pc, #288]	; (8002f4c <HAL_ADC_ConfigChannel+0x5c8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d102      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x4b2>
 8002e30:	4b45      	ldr	r3, [pc, #276]	; (8002f48 <HAL_ADC_ConfigChannel+0x5c4>)
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e001      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x4b6>
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d108      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x4d6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x4d6>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x4d8>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d150      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x4fe>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x4fe>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x500>
 8002e82:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d13c      	bne.n	8002f02 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d11d      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x548>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e98:	d118      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ea6:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <HAL_ADC_ConfigChannel+0x5cc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <HAL_ADC_ConfigChannel+0x5d0>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	0c9a      	lsrs	r2, r3, #18
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ebc:	e002      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f9      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002eca:	e02e      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b11      	cmp	r3, #17
 8002ed2:	d10b      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x568>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002edc:	d106      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002eea:	e01e      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b12      	cmp	r3, #18
 8002ef2:	d11a      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002efe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f00:	e013      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f14:	e00a      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f2a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	376c      	adds	r7, #108	; 0x6c
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	50000100 	.word	0x50000100
 8002f48:	50000400 	.word	0x50000400
 8002f4c:	50000500 	.word	0x50000500
 8002f50:	20000000 	.word	0x20000000
 8002f54:	431bde83 	.word	0x431bde83

08002f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <ADC_Enable+0x2c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <ADC_Enable+0x2c>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <ADC_Enable+0x2e>
 8002f84:	2300      	movs	r3, #0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d143      	bne.n	8003012 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	4b22      	ldr	r3, [pc, #136]	; (800301c <ADC_Enable+0xc4>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f043 0210 	orr.w	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e02f      	b.n	8003014 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002fc4:	f7ff f88e 	bl	80020e4 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fca:	e01b      	b.n	8003004 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fcc:	f7ff f88a 	bl	80020e4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d914      	bls.n	8003004 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d00d      	beq.n	8003004 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e007      	b.n	8003014 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d1dc      	bne.n	8002fcc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	8000003f 	.word	0x8000003f

08003020 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d108      	bne.n	800304c <ADC_Disable+0x2c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <ADC_Disable+0x2c>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <ADC_Disable+0x2e>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d047      	beq.n	80030e2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030d 	and.w	r3, r3, #13
 800305c:	2b01      	cmp	r3, #1
 800305e:	d10f      	bne.n	8003080 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0202 	orr.w	r2, r2, #2
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2203      	movs	r2, #3
 8003076:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003078:	f7ff f834 	bl	80020e4 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800307e:	e029      	b.n	80030d4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0210 	orr.w	r2, r3, #16
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	f043 0201 	orr.w	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e023      	b.n	80030e4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800309c:	f7ff f822 	bl	80020e4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d914      	bls.n	80030d4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10d      	bne.n	80030d4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	f043 0210 	orr.w	r2, r3, #16
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	f043 0201 	orr.w	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e007      	b.n	80030e4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d0dc      	beq.n	800309c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db0b      	blt.n	800317a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <__NVIC_EnableIRQ+0x38>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2001      	movs	r0, #1
 8003172:	fa00 f202 	lsl.w	r2, r0, r2
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000e100 	.word	0xe000e100

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	; (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f1c3 0307 	rsb	r3, r3, #7
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf28      	it	cs
 80031fe:	2304      	movcs	r3, #4
 8003200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3304      	adds	r3, #4
 8003206:	2b06      	cmp	r3, #6
 8003208:	d902      	bls.n	8003210 <NVIC_EncodePriority+0x30>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3b03      	subs	r3, #3
 800320e:	e000      	b.n	8003212 <NVIC_EncodePriority+0x32>
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	401a      	ands	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43d9      	mvns	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	4313      	orrs	r3, r2
         );
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003258:	d301      	bcc.n	800325e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325a:	2301      	movs	r3, #1
 800325c:	e00f      	b.n	800327e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <SysTick_Config+0x40>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003266:	210f      	movs	r1, #15
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f7ff ff8e 	bl	800318c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <SysTick_Config+0x40>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <SysTick_Config+0x40>)
 8003278:	2207      	movs	r2, #7
 800327a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000e010 	.word	0xe000e010

0800328c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff29 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b4:	f7ff ff3e 	bl	8003134 <__NVIC_GetPriorityGrouping>
 80032b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff8e 	bl	80031e0 <NVIC_EncodePriority>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff5d 	bl	800318c <__NVIC_SetPriority>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff31 	bl	8003150 <__NVIC_EnableIRQ>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffa2 	bl	8003248 <SysTick_Config>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e037      	b.n	8003394 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800333a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800333e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f9b8 	bl	80036ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}  
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_DMA_Start_IT+0x20>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e04a      	b.n	8003452 <HAL_DMA_Start_IT+0xb6>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d13a      	bne.n	8003444 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f94b 	bl	800368e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 020e 	orr.w	r2, r2, #14
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e00f      	b.n	8003432 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 020a 	orr.w	r2, r2, #10
 8003420:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0204 	bic.w	r2, r2, #4
 8003430:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e005      	b.n	8003450 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003450:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003468:	2b02      	cmp	r3, #2
 800346a:	d008      	beq.n	800347e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2204      	movs	r2, #4
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e020      	b.n	80034c0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 020e 	bic.w	r2, r2, #14
 800348c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d005      	beq.n	80034ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2204      	movs	r2, #4
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
 80034ec:	e027      	b.n	800353e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 020e 	bic.w	r2, r2, #14
 80034fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
    } 
  }
  return status;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	2204      	movs	r2, #4
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d024      	beq.n	80035ba <HAL_DMA_IRQHandler+0x72>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01f      	beq.n	80035ba <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d107      	bne.n	8003598 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	2104      	movs	r1, #4
 80035a2:	fa01 f202 	lsl.w	r2, r1, r2
 80035a6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d06a      	beq.n	8003686 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80035b8:	e065      	b.n	8003686 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2202      	movs	r2, #2
 80035c0:	409a      	lsls	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d02c      	beq.n	8003624 <HAL_DMA_IRQHandler+0xdc>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d027      	beq.n	8003624 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 020a 	bic.w	r2, r2, #10
 80035f0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003602:	2102      	movs	r1, #2
 8003604:	fa01 f202 	lsl.w	r2, r1, r2
 8003608:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	d035      	beq.n	8003686 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003622:	e030      	b.n	8003686 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	2208      	movs	r2, #8
 800362a:	409a      	lsls	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d028      	beq.n	8003686 <HAL_DMA_IRQHandler+0x13e>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d023      	beq.n	8003686 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 020e 	bic.w	r2, r2, #14
 800364c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
    }
  }
}  
 8003684:	e7ff      	b.n	8003686 <HAL_DMA_IRQHandler+0x13e>
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800368e:	b480      	push	{r7}
 8003690:	b085      	sub	sp, #20
 8003692:	af00      	add	r7, sp, #0
 8003694:	60f8      	str	r0, [r7, #12]
 8003696:	60b9      	str	r1, [r7, #8]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	2101      	movs	r1, #1
 80036a6:	fa01 f202 	lsl.w	r2, r1, r2
 80036aa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d108      	bne.n	80036ce <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036cc:	e007      	b.n	80036de <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	60da      	str	r2, [r3, #12]
}
 80036de:	bf00      	nop
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <DMA_CalcBaseAndBitshift+0x60>)
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d80f      	bhi.n	8003720 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <DMA_CalcBaseAndBitshift+0x64>)
 8003708:	4413      	add	r3, r2
 800370a:	4a12      	ldr	r2, [pc, #72]	; (8003754 <DMA_CalcBaseAndBitshift+0x68>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	009a      	lsls	r2, r3, #2
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a0f      	ldr	r2, [pc, #60]	; (8003758 <DMA_CalcBaseAndBitshift+0x6c>)
 800371c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800371e:	e00e      	b.n	800373e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <DMA_CalcBaseAndBitshift+0x70>)
 8003728:	4413      	add	r3, r2
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <DMA_CalcBaseAndBitshift+0x68>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a09      	ldr	r2, [pc, #36]	; (8003760 <DMA_CalcBaseAndBitshift+0x74>)
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40020407 	.word	0x40020407
 8003750:	bffdfff8 	.word	0xbffdfff8
 8003754:	cccccccd 	.word	0xcccccccd
 8003758:	40020000 	.word	0x40020000
 800375c:	bffdfbf8 	.word	0xbffdfbf8
 8003760:	40020400 	.word	0x40020400

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003772:	e160      	b.n	8003a36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2101      	movs	r1, #1
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8152 	beq.w	8003a30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d005      	beq.n	80037a4 <HAL_GPIO_Init+0x40>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d130      	bne.n	8003806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037da:	2201      	movs	r2, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0201 	and.w	r2, r3, #1
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d017      	beq.n	8003842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d123      	bne.n	8003896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	08da      	lsrs	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3208      	adds	r2, #8
 8003856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	220f      	movs	r2, #15
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4013      	ands	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	08da      	lsrs	r2, r3, #3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3208      	adds	r2, #8
 8003890:	6939      	ldr	r1, [r7, #16]
 8003892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	2203      	movs	r2, #3
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0203 	and.w	r2, r3, #3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80ac 	beq.w	8003a30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d8:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <HAL_GPIO_Init+0x2f0>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	4a5d      	ldr	r2, [pc, #372]	; (8003a54 <HAL_GPIO_Init+0x2f0>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6193      	str	r3, [r2, #24]
 80038e4:	4b5b      	ldr	r3, [pc, #364]	; (8003a54 <HAL_GPIO_Init+0x2f0>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038f0:	4a59      	ldr	r2, [pc, #356]	; (8003a58 <HAL_GPIO_Init+0x2f4>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800391a:	d025      	beq.n	8003968 <HAL_GPIO_Init+0x204>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4f      	ldr	r2, [pc, #316]	; (8003a5c <HAL_GPIO_Init+0x2f8>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01f      	beq.n	8003964 <HAL_GPIO_Init+0x200>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a4e      	ldr	r2, [pc, #312]	; (8003a60 <HAL_GPIO_Init+0x2fc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d019      	beq.n	8003960 <HAL_GPIO_Init+0x1fc>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a4d      	ldr	r2, [pc, #308]	; (8003a64 <HAL_GPIO_Init+0x300>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_GPIO_Init+0x1f8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a4c      	ldr	r2, [pc, #304]	; (8003a68 <HAL_GPIO_Init+0x304>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00d      	beq.n	8003958 <HAL_GPIO_Init+0x1f4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a4b      	ldr	r2, [pc, #300]	; (8003a6c <HAL_GPIO_Init+0x308>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <HAL_GPIO_Init+0x1f0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a4a      	ldr	r2, [pc, #296]	; (8003a70 <HAL_GPIO_Init+0x30c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_GPIO_Init+0x1ec>
 800394c:	2306      	movs	r3, #6
 800394e:	e00c      	b.n	800396a <HAL_GPIO_Init+0x206>
 8003950:	2307      	movs	r3, #7
 8003952:	e00a      	b.n	800396a <HAL_GPIO_Init+0x206>
 8003954:	2305      	movs	r3, #5
 8003956:	e008      	b.n	800396a <HAL_GPIO_Init+0x206>
 8003958:	2304      	movs	r3, #4
 800395a:	e006      	b.n	800396a <HAL_GPIO_Init+0x206>
 800395c:	2303      	movs	r3, #3
 800395e:	e004      	b.n	800396a <HAL_GPIO_Init+0x206>
 8003960:	2302      	movs	r3, #2
 8003962:	e002      	b.n	800396a <HAL_GPIO_Init+0x206>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_GPIO_Init+0x206>
 8003968:	2300      	movs	r3, #0
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	f002 0203 	and.w	r2, r2, #3
 8003970:	0092      	lsls	r2, r2, #2
 8003972:	4093      	lsls	r3, r2
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397a:	4937      	ldr	r1, [pc, #220]	; (8003a58 <HAL_GPIO_Init+0x2f4>)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	089b      	lsrs	r3, r3, #2
 8003980:	3302      	adds	r3, #2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003988:	4b3a      	ldr	r3, [pc, #232]	; (8003a74 <HAL_GPIO_Init+0x310>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	43db      	mvns	r3, r3
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4013      	ands	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039ac:	4a31      	ldr	r2, [pc, #196]	; (8003a74 <HAL_GPIO_Init+0x310>)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039b2:	4b30      	ldr	r3, [pc, #192]	; (8003a74 <HAL_GPIO_Init+0x310>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039d6:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <HAL_GPIO_Init+0x310>)
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <HAL_GPIO_Init+0x310>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a00:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <HAL_GPIO_Init+0x310>)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a06:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_GPIO_Init+0x310>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a2a:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <HAL_GPIO_Init+0x310>)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3301      	adds	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f ae97 	bne.w	8003774 <HAL_GPIO_Init+0x10>
  }
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	48000400 	.word	0x48000400
 8003a60:	48000800 	.word	0x48000800
 8003a64:	48000c00 	.word	0x48000c00
 8003a68:	48001000 	.word	0x48001000
 8003a6c:	48001400 	.word	0x48001400
 8003a70:	48001800 	.word	0x48001800
 8003a74:	40010400 	.word	0x40010400

08003a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	887b      	ldrh	r3, [r7, #2]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
 8003a94:	e001      	b.n	8003a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab8:	787b      	ldrb	r3, [r7, #1]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e081      	b.n	8003bee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd f93e 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	e006      	b.n	8003b60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d104      	bne.n	8003b72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	461a      	mov	r2, r3
 8003c04:	460b      	mov	r3, r1
 8003c06:	817b      	strh	r3, [r7, #10]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	f040 80da 	bne.w	8003dce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_I2C_Master_Transmit+0x30>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e0d3      	b.n	8003dd0 <HAL_I2C_Master_Transmit+0x1d8>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c30:	f7fe fa58 	bl	80020e4 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2319      	movs	r3, #25
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f8f0 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0be      	b.n	8003dd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2221      	movs	r2, #33	; 0x21
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	893a      	ldrh	r2, [r7, #8]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2bff      	cmp	r3, #255	; 0xff
 8003c82:	d90e      	bls.n	8003ca2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	22ff      	movs	r2, #255	; 0xff
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	8979      	ldrh	r1, [r7, #10]
 8003c92:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fa7e 	bl	800419c <I2C_TransferConfig>
 8003ca0:	e06c      	b.n	8003d7c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	4b48      	ldr	r3, [pc, #288]	; (8003dd8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fa6d 	bl	800419c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cc2:	e05b      	b.n	8003d7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	6a39      	ldr	r1, [r7, #32]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f8fc 	bl	8003ec6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e07b      	b.n	8003dd0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d034      	beq.n	8003d7c <HAL_I2C_Master_Transmit+0x184>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d130      	bne.n	8003d7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f87f 	bl	8003e28 <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e04d      	b.n	8003dd0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2bff      	cmp	r3, #255	; 0xff
 8003d3c:	d90e      	bls.n	8003d5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	22ff      	movs	r2, #255	; 0xff
 8003d42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	8979      	ldrh	r1, [r7, #10]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fa21 	bl	800419c <I2C_TransferConfig>
 8003d5a:	e00f      	b.n	8003d7c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	8979      	ldrh	r1, [r7, #10]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa10 	bl	800419c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d19e      	bne.n	8003cc4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	6a39      	ldr	r1, [r7, #32]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f8e2 	bl	8003f54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e01a      	b.n	8003dd0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_I2C_Master_Transmit+0x1e4>)
 8003dae:	400b      	ands	r3, r1
 8003db0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	e000      	b.n	8003dd0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
  }
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	80002000 	.word	0x80002000
 8003ddc:	fe00e800 	.word	0xfe00e800

08003de0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d103      	bne.n	8003dfe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d007      	beq.n	8003e1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	619a      	str	r2, [r3, #24]
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e38:	e031      	b.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e40:	d02d      	beq.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe f94f 	bl	80020e4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d122      	bne.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4013      	ands	r3, r2
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d113      	bne.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00f      	b.n	8003ebe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	bf0c      	ite	eq
 8003eae:	2301      	moveq	r3, #1
 8003eb0:	2300      	movne	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d0be      	beq.n	8003e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ed2:	e033      	b.n	8003f3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f87f 	bl	8003fdc <I2C_IsErrorOccurred>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e031      	b.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d025      	beq.n	8003f3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef0:	f7fe f8f8 	bl	80020e4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d11a      	bne.n	8003f3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d013      	beq.n	8003f3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e007      	b.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d1c4      	bne.n	8003ed4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f60:	e02f      	b.n	8003fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f838 	bl	8003fdc <I2C_IsErrorOccurred>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e02d      	b.n	8003fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fe f8b5 	bl	80020e4 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11a      	bne.n	8003fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d013      	beq.n	8003fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e007      	b.n	8003fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d1c8      	bne.n	8003f62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d068      	beq.n	80040da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004010:	e049      	b.n	80040a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d045      	beq.n	80040a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fe f863 	bl	80020e4 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_IsErrorOccurred+0x54>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d13a      	bne.n	80040a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004042:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	d121      	bne.n	8004098 <I2C_IsErrorOccurred+0xbc>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405a:	d01d      	beq.n	8004098 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b20      	cmp	r3, #32
 8004060:	d01a      	beq.n	8004098 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004070:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004072:	f7fe f837 	bl	80020e4 <HAL_GetTick>
 8004076:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004078:	e00e      	b.n	8004098 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800407a:	f7fe f833 	bl	80020e4 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b19      	cmp	r3, #25
 8004086:	d907      	bls.n	8004098 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f043 0320 	orr.w	r3, r3, #32
 800408e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004096:	e006      	b.n	80040a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b20      	cmp	r3, #32
 80040a4:	d1e9      	bne.n	800407a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d003      	beq.n	80040bc <I2C_IsErrorOccurred+0xe0>
 80040b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0aa      	beq.n	8004012 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d103      	bne.n	80040cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2220      	movs	r2, #32
 80040ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00b      	beq.n	8004104 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800411e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f043 0302 	orr.w	r3, r3, #2
 8004136:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004140:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01c      	beq.n	800418a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fe45 	bl	8003de0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6859      	ldr	r1, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <I2C_IsErrorOccurred+0x1bc>)
 8004162:	400b      	ands	r3, r1
 8004164:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	431a      	orrs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800418a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800418e:	4618      	mov	r0, r3
 8004190:	3728      	adds	r7, #40	; 0x28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	fe00e800 	.word	0xfe00e800

0800419c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	4613      	mov	r3, r2
 80041ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041ae:	897b      	ldrh	r3, [r7, #10]
 80041b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041b4:	7a7b      	ldrb	r3, [r7, #9]
 80041b6:	041b      	lsls	r3, r3, #16
 80041b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	0d5b      	lsrs	r3, r3, #21
 80041d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <I2C_TransferConfig+0x60>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	43db      	mvns	r3, r3
 80041e0:	ea02 0103 	and.w	r1, r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	03ff63ff 	.word	0x03ff63ff

08004200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b20      	cmp	r3, #32
 8004214:	d138      	bne.n	8004288 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004220:	2302      	movs	r3, #2
 8004222:	e032      	b.n	800428a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004252:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	e000      	b.n	800428a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004288:	2302      	movs	r3, #2
  }
}
 800428a:	4618      	mov	r0, r3
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d139      	bne.n	8004320 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d101      	bne.n	80042ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e033      	b.n	8004322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2224      	movs	r2, #36	; 0x24
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004336:	af00      	add	r7, sp, #0
 8004338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004340:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004346:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d102      	bne.n	8004356 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f001 b83a 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004356:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800435a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 816f 	beq.w	800464a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800436c:	4bb5      	ldr	r3, [pc, #724]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b04      	cmp	r3, #4
 8004376:	d00c      	beq.n	8004392 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004378:	4bb2      	ldr	r3, [pc, #712]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d15c      	bne.n	800443e <HAL_RCC_OscConfig+0x10e>
 8004384:	4baf      	ldr	r3, [pc, #700]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d155      	bne.n	800443e <HAL_RCC_OscConfig+0x10e>
 8004392:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004396:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d102      	bne.n	80043c4 <HAL_RCC_OscConfig+0x94>
 80043be:	4ba1      	ldr	r3, [pc, #644]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	e015      	b.n	80043f0 <HAL_RCC_OscConfig+0xc0>
 80043c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80043d0:	fa93 f3a3 	rbit	r3, r3
 80043d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80043d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80043e0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80043ec:	4b95      	ldr	r3, [pc, #596]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043f4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80043f8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80043fc:	fa92 f2a2 	rbit	r2, r2
 8004400:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004404:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004408:	fab2 f282 	clz	r2, r2
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	f042 0220 	orr.w	r2, r2, #32
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	f002 021f 	and.w	r2, r2, #31
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f202 	lsl.w	r2, r1, r2
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8111 	beq.w	8004648 <HAL_RCC_OscConfig+0x318>
 8004426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800442a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 8108 	bne.w	8004648 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f000 bfc6 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004442:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x12e>
 8004450:	4b7c      	ldr	r3, [pc, #496]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a7b      	ldr	r2, [pc, #492]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 8004456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	e036      	b.n	80044cc <HAL_RCC_OscConfig+0x19c>
 800445e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004462:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x158>
 800446e:	4b75      	ldr	r3, [pc, #468]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a74      	ldr	r2, [pc, #464]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 8004474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b72      	ldr	r3, [pc, #456]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a71      	ldr	r2, [pc, #452]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 8004480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e021      	b.n	80044cc <HAL_RCC_OscConfig+0x19c>
 8004488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800448c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x184>
 800449a:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a69      	ldr	r2, [pc, #420]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b67      	ldr	r3, [pc, #412]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a66      	ldr	r2, [pc, #408]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0x19c>
 80044b4:	4b63      	ldr	r3, [pc, #396]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a62      	ldr	r2, [pc, #392]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b60      	ldr	r3, [pc, #384]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a5f      	ldr	r2, [pc, #380]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d059      	beq.n	8004590 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd fe02 	bl	80020e4 <HAL_GetTick>
 80044e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e6:	f7fd fdfd 	bl	80020e4 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d902      	bls.n	80044fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	f000 bf67 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>
 80044fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004500:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004508:	fa93 f3a3 	rbit	r3, r3
 800450c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004510:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004514:	fab3 f383 	clz	r3, r3
 8004518:	b2db      	uxtb	r3, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	b2db      	uxtb	r3, r3
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	d102      	bne.n	800452e <HAL_RCC_OscConfig+0x1fe>
 8004528:	4b46      	ldr	r3, [pc, #280]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	e015      	b.n	800455a <HAL_RCC_OscConfig+0x22a>
 800452e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004532:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004546:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800454a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004556:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800455e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004562:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004566:	fa92 f2a2 	rbit	r2, r2
 800456a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800456e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004572:	fab2 f282 	clz	r2, r2
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	f042 0220 	orr.w	r2, r2, #32
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	f002 021f 	and.w	r2, r2, #31
 8004582:	2101      	movs	r1, #1
 8004584:	fa01 f202 	lsl.w	r2, r1, r2
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ab      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1b6>
 800458e:	e05c      	b.n	800464a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fd fda8 	bl	80020e4 <HAL_GetTick>
 8004594:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459a:	f7fd fda3 	bl	80020e4 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d902      	bls.n	80045b0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	f000 bf0d 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>
 80045b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80045c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c8:	fab3 f383 	clz	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d102      	bne.n	80045e2 <HAL_RCC_OscConfig+0x2b2>
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	e015      	b.n	800460e <HAL_RCC_OscConfig+0x2de>
 80045e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80045f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80045fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <HAL_RCC_OscConfig+0x314>)
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004612:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004616:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800461a:	fa92 f2a2 	rbit	r2, r2
 800461e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004622:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004626:	fab2 f282 	clz	r2, r2
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	f042 0220 	orr.w	r2, r2, #32
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	f002 021f 	and.w	r2, r2, #31
 8004636:	2101      	movs	r1, #1
 8004638:	fa01 f202 	lsl.w	r2, r1, r2
 800463c:	4013      	ands	r3, r2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ab      	bne.n	800459a <HAL_RCC_OscConfig+0x26a>
 8004642:	e002      	b.n	800464a <HAL_RCC_OscConfig+0x31a>
 8004644:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800464e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 817f 	beq.w	800495e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004660:	4ba7      	ldr	r3, [pc, #668]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800466c:	4ba4      	ldr	r3, [pc, #656]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b08      	cmp	r3, #8
 8004676:	d173      	bne.n	8004760 <HAL_RCC_OscConfig+0x430>
 8004678:	4ba1      	ldr	r3, [pc, #644]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004684:	d16c      	bne.n	8004760 <HAL_RCC_OscConfig+0x430>
 8004686:	2302      	movs	r3, #2
 8004688:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004698:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d102      	bne.n	80046b6 <HAL_RCC_OscConfig+0x386>
 80046b0:	4b93      	ldr	r3, [pc, #588]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	e013      	b.n	80046de <HAL_RCC_OscConfig+0x3ae>
 80046b6:	2302      	movs	r3, #2
 80046b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80046c8:	2302      	movs	r3, #2
 80046ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80046ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80046da:	4b89      	ldr	r3, [pc, #548]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2202      	movs	r2, #2
 80046e0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80046e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80046e8:	fa92 f2a2 	rbit	r2, r2
 80046ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80046f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80046f4:	fab2 f282 	clz	r2, r2
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	f042 0220 	orr.w	r2, r2, #32
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	f002 021f 	and.w	r2, r2, #31
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f202 	lsl.w	r2, r1, r2
 800470a:	4013      	ands	r3, r2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCC_OscConfig+0x3f6>
 8004710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004714:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d002      	beq.n	8004726 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f000 be52 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004726:	4b76      	ldr	r3, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800472e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004732:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	21f8      	movs	r1, #248	; 0xf8
 800473c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004744:	fa91 f1a1 	rbit	r1, r1
 8004748:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800474c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004750:	fab1 f181 	clz	r1, r1
 8004754:	b2c9      	uxtb	r1, r1
 8004756:	408b      	lsls	r3, r1
 8004758:	4969      	ldr	r1, [pc, #420]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e0fe      	b.n	800495e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004764:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8088 	beq.w	8004882 <HAL_RCC_OscConfig+0x552>
 8004772:	2301      	movs	r3, #1
 8004774:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004784:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004788:	fab3 f383 	clz	r3, r3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004792:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	461a      	mov	r2, r3
 800479a:	2301      	movs	r3, #1
 800479c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479e:	f7fd fca1 	bl	80020e4 <HAL_GetTick>
 80047a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047a8:	f7fd fc9c 	bl	80020e4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d902      	bls.n	80047be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	f000 be06 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>
 80047be:	2302      	movs	r3, #2
 80047c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047c8:	fa93 f3a3 	rbit	r3, r3
 80047cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80047d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	fab3 f383 	clz	r3, r3
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d102      	bne.n	80047ee <HAL_RCC_OscConfig+0x4be>
 80047e8:	4b45      	ldr	r3, [pc, #276]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	e013      	b.n	8004816 <HAL_RCC_OscConfig+0x4e6>
 80047ee:	2302      	movs	r3, #2
 80047f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004800:	2302      	movs	r3, #2
 8004802:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004806:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2202      	movs	r2, #2
 8004818:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800481c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004820:	fa92 f2a2 	rbit	r2, r2
 8004824:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004828:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800482c:	fab2 f282 	clz	r2, r2
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	f042 0220 	orr.w	r2, r2, #32
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	f002 021f 	and.w	r2, r2, #31
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f202 	lsl.w	r2, r1, r2
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0af      	beq.n	80047a8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004848:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004850:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004854:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	21f8      	movs	r1, #248	; 0xf8
 800485e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004866:	fa91 f1a1 	rbit	r1, r1
 800486a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800486e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004872:	fab1 f181 	clz	r1, r1
 8004876:	b2c9      	uxtb	r1, r1
 8004878:	408b      	lsls	r3, r1
 800487a:	4921      	ldr	r1, [pc, #132]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 800487c:	4313      	orrs	r3, r2
 800487e:	600b      	str	r3, [r1, #0]
 8004880:	e06d      	b.n	800495e <HAL_RCC_OscConfig+0x62e>
 8004882:	2301      	movs	r3, #1
 8004884:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004894:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004898:	fab3 f383 	clz	r3, r3
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	461a      	mov	r2, r3
 80048aa:	2300      	movs	r3, #0
 80048ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fd fc19 	bl	80020e4 <HAL_GetTick>
 80048b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b8:	f7fd fc14 	bl	80020e4 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d902      	bls.n	80048ce <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	f000 bd7e 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>
 80048ce:	2302      	movs	r3, #2
 80048d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80048e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e4:	fab3 f383 	clz	r3, r3
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d105      	bne.n	8004904 <HAL_RCC_OscConfig+0x5d4>
 80048f8:	4b01      	ldr	r3, [pc, #4]	; (8004900 <HAL_RCC_OscConfig+0x5d0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	e016      	b.n	800492c <HAL_RCC_OscConfig+0x5fc>
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000
 8004904:	2302      	movs	r3, #2
 8004906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004916:	2302      	movs	r3, #2
 8004918:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800491c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004928:	4bbf      	ldr	r3, [pc, #764]	; (8004c28 <HAL_RCC_OscConfig+0x8f8>)
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	2202      	movs	r2, #2
 800492e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004932:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004936:	fa92 f2a2 	rbit	r2, r2
 800493a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800493e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004942:	fab2 f282 	clz	r2, r2
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	f042 0220 	orr.w	r2, r2, #32
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	f002 021f 	and.w	r2, r2, #31
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f202 	lsl.w	r2, r1, r2
 8004958:	4013      	ands	r3, r2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1ac      	bne.n	80048b8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800495e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004962:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8113 	beq.w	8004b9a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004974:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004978:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d07c      	beq.n	8004a7e <HAL_RCC_OscConfig+0x74e>
 8004984:	2301      	movs	r3, #1
 8004986:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800498e:	fa93 f3a3 	rbit	r3, r3
 8004992:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004996:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	4ba2      	ldr	r3, [pc, #648]	; (8004c2c <HAL_RCC_OscConfig+0x8fc>)
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	461a      	mov	r2, r3
 80049aa:	2301      	movs	r3, #1
 80049ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ae:	f7fd fb99 	bl	80020e4 <HAL_GetTick>
 80049b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b8:	f7fd fb94 	bl	80020e4 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d902      	bls.n	80049ce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	f000 bcfe 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>
 80049ce:	2302      	movs	r3, #2
 80049d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d8:	fa93 f2a3 	rbit	r2, r3
 80049dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ee:	2202      	movs	r2, #2
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	fa93 f2a3 	rbit	r2, r3
 8004a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a12:	2202      	movs	r2, #2
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	fa93 f2a3 	rbit	r2, r3
 8004a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004a2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a2e:	4b7e      	ldr	r3, [pc, #504]	; (8004c28 <HAL_RCC_OscConfig+0x8f8>)
 8004a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a3a:	2102      	movs	r1, #2
 8004a3c:	6019      	str	r1, [r3, #0]
 8004a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	fa93 f1a3 	rbit	r1, r3
 8004a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a54:	6019      	str	r1, [r3, #0]
  return result;
 8004a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	fab3 f383 	clz	r3, r3
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f003 031f 	and.w	r3, r3, #31
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d09d      	beq.n	80049b8 <HAL_RCC_OscConfig+0x688>
 8004a7c:	e08d      	b.n	8004b9a <HAL_RCC_OscConfig+0x86a>
 8004a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	fa93 f2a3 	rbit	r2, r3
 8004a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004aa0:	601a      	str	r2, [r3, #0]
  return result;
 8004aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004aa6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004aaa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4b5d      	ldr	r3, [pc, #372]	; (8004c2c <HAL_RCC_OscConfig+0x8fc>)
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fb10 	bl	80020e4 <HAL_GetTick>
 8004ac4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	e00a      	b.n	8004ae0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aca:	f7fd fb0b 	bl	80020e4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d902      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	f000 bc75 	b.w	80053ca <HAL_RCC_OscConfig+0x109a>
 8004ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004ae8:	2202      	movs	r2, #2
 8004aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	fa93 f2a3 	rbit	r2, r3
 8004afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004afe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	fa93 f2a3 	rbit	r2, r3
 8004b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b30:	2202      	movs	r2, #2
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	fa93 f2a3 	rbit	r2, r3
 8004b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004b4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b4c:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_RCC_OscConfig+0x8f8>)
 8004b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b58:	2102      	movs	r1, #2
 8004b5a:	6019      	str	r1, [r3, #0]
 8004b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	fa93 f1a3 	rbit	r1, r3
 8004b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b6e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004b72:	6019      	str	r1, [r3, #0]
  return result;
 8004b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2101      	movs	r1, #1
 8004b90:	fa01 f303 	lsl.w	r3, r1, r3
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d197      	bne.n	8004aca <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 81a5 	beq.w	8004efa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb6:	4b1c      	ldr	r3, [pc, #112]	; (8004c28 <HAL_RCC_OscConfig+0x8f8>)
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d116      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_RCC_OscConfig+0x8f8>)
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_RCC_OscConfig+0x8f8>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	61d3      	str	r3, [r2, #28]
 8004bce:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <HAL_RCC_OscConfig+0x8f8>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004be4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <HAL_RCC_OscConfig+0x900>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d121      	bne.n	8004c40 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <HAL_RCC_OscConfig+0x900>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <HAL_RCC_OscConfig+0x900>)
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c08:	f7fd fa6c 	bl	80020e4 <HAL_GetTick>
 8004c0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c10:	e010      	b.n	8004c34 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c12:	f7fd fa67 	bl	80020e4 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b64      	cmp	r3, #100	; 0x64
 8004c20:	d908      	bls.n	8004c34 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e3d1      	b.n	80053ca <HAL_RCC_OscConfig+0x109a>
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	10908120 	.word	0x10908120
 8004c30:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c34:	4b8d      	ldr	r3, [pc, #564]	; (8004e6c <HAL_RCC_OscConfig+0xb3c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0e8      	beq.n	8004c12 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x92e>
 8004c50:	4b87      	ldr	r3, [pc, #540]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	4a86      	ldr	r2, [pc, #536]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6213      	str	r3, [r2, #32]
 8004c5c:	e035      	b.n	8004cca <HAL_RCC_OscConfig+0x99a>
 8004c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCC_OscConfig+0x958>
 8004c6e:	4b80      	ldr	r3, [pc, #512]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	4a7f      	ldr	r2, [pc, #508]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6213      	str	r3, [r2, #32]
 8004c7a:	4b7d      	ldr	r3, [pc, #500]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	4a7c      	ldr	r2, [pc, #496]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	6213      	str	r3, [r2, #32]
 8004c86:	e020      	b.n	8004cca <HAL_RCC_OscConfig+0x99a>
 8004c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b05      	cmp	r3, #5
 8004c96:	d10c      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x982>
 8004c98:	4b75      	ldr	r3, [pc, #468]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	4a74      	ldr	r2, [pc, #464]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004c9e:	f043 0304 	orr.w	r3, r3, #4
 8004ca2:	6213      	str	r3, [r2, #32]
 8004ca4:	4b72      	ldr	r3, [pc, #456]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	4a71      	ldr	r2, [pc, #452]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6213      	str	r3, [r2, #32]
 8004cb0:	e00b      	b.n	8004cca <HAL_RCC_OscConfig+0x99a>
 8004cb2:	4b6f      	ldr	r3, [pc, #444]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4a6e      	ldr	r2, [pc, #440]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6213      	str	r3, [r2, #32]
 8004cbe:	4b6c      	ldr	r3, [pc, #432]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	4a6b      	ldr	r2, [pc, #428]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8081 	beq.w	8004dde <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cdc:	f7fd fa02 	bl	80020e4 <HAL_GetTick>
 8004ce0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	e00b      	b.n	8004cfe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fd f9fd 	bl	80020e4 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e365      	b.n	80053ca <HAL_RCC_OscConfig+0x109a>
 8004cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d02:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d06:	2202      	movs	r2, #2
 8004d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d0e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	fa93 f2a3 	rbit	r2, r3
 8004d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d26:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	fa93 f2a3 	rbit	r2, r3
 8004d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d44:	601a      	str	r2, [r3, #0]
  return result;
 8004d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d4a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004d4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d102      	bne.n	8004d6a <HAL_RCC_OscConfig+0xa3a>
 8004d64:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	e013      	b.n	8004d92 <HAL_RCC_OscConfig+0xa62>
 8004d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d6e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d72:	2202      	movs	r2, #2
 8004d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d7a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	fa93 f2a3 	rbit	r2, r3
 8004d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d88:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d96:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004d9a:	2102      	movs	r1, #2
 8004d9c:	6011      	str	r1, [r2, #0]
 8004d9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004da2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	fa92 f1a2 	rbit	r1, r2
 8004dac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004db0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004db4:	6011      	str	r1, [r2, #0]
  return result;
 8004db6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dba:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	fab2 f282 	clz	r2, r2
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	f002 021f 	and.w	r2, r2, #31
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d084      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x9b6>
 8004ddc:	e083      	b.n	8004ee6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dde:	f7fd f981 	bl	80020e4 <HAL_GetTick>
 8004de2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de6:	e00b      	b.n	8004e00 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fd f97c 	bl	80020e4 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e2e4      	b.n	80053ca <HAL_RCC_OscConfig+0x109a>
 8004e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e08:	2202      	movs	r2, #2
 8004e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e10:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	fa93 f2a3 	rbit	r2, r3
 8004e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	fa93 f2a3 	rbit	r2, r3
 8004e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e46:	601a      	str	r2, [r3, #0]
  return result;
 8004e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e4c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d106      	bne.n	8004e74 <HAL_RCC_OscConfig+0xb44>
 8004e66:	4b02      	ldr	r3, [pc, #8]	; (8004e70 <HAL_RCC_OscConfig+0xb40>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	e017      	b.n	8004e9c <HAL_RCC_OscConfig+0xb6c>
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	40021000 	.word	0x40021000
 8004e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e84:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	fa93 f2a3 	rbit	r2, r3
 8004e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e92:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	4bb3      	ldr	r3, [pc, #716]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ea0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	6011      	str	r1, [r2, #0]
 8004ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004eac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	fa92 f1a2 	rbit	r1, r2
 8004eb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004eba:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004ebe:	6011      	str	r1, [r2, #0]
  return result;
 8004ec0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ec4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	fab2 f282 	clz	r2, r2
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	f002 021f 	and.w	r2, r2, #31
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d180      	bne.n	8004de8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ee6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eee:	4b9e      	ldr	r3, [pc, #632]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4a9d      	ldr	r2, [pc, #628]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8004ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004efe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 825e 	beq.w	80053c8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f0c:	4b96      	ldr	r3, [pc, #600]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	f000 821f 	beq.w	8005358 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	f040 8170 	bne.w	800520c <HAL_RCC_OscConfig+0xedc>
 8004f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f3e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	fa93 f2a3 	rbit	r2, r3
 8004f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f50:	601a      	str	r2, [r3, #0]
  return result;
 8004f52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004f5a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f5c:	fab3 f383 	clz	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7fd f8b7 	bl	80020e4 <HAL_GetTick>
 8004f76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f7a:	e009      	b.n	8004f90 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fd f8b2 	bl	80020e4 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e21c      	b.n	80053ca <HAL_RCC_OscConfig+0x109a>
 8004f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fa2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	fa93 f2a3 	rbit	r2, r3
 8004fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fb4:	601a      	str	r2, [r3, #0]
  return result;
 8004fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004fbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc0:	fab3 f383 	clz	r3, r3
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d102      	bne.n	8004fda <HAL_RCC_OscConfig+0xcaa>
 8004fd4:	4b64      	ldr	r3, [pc, #400]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	e027      	b.n	800502a <HAL_RCC_OscConfig+0xcfa>
 8004fda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fde:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fec:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	fa93 f2a3 	rbit	r2, r3
 8004ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ffa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005004:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005012:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	fa93 f2a3 	rbit	r2, r3
 800501c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005020:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	4b50      	ldr	r3, [pc, #320]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800502e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005032:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005036:	6011      	str	r1, [r2, #0]
 8005038:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800503c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	fa92 f1a2 	rbit	r1, r2
 8005046:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800504a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800504e:	6011      	str	r1, [r2, #0]
  return result;
 8005050:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005054:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	fab2 f282 	clz	r2, r2
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	f042 0220 	orr.w	r2, r2, #32
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	f002 021f 	and.w	r2, r2, #31
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f202 	lsl.w	r2, r1, r2
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d182      	bne.n	8004f7c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005076:	4b3c      	ldr	r3, [pc, #240]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	f023 020f 	bic.w	r2, r3, #15
 800507e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005082:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	4937      	ldr	r1, [pc, #220]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 800508c:	4313      	orrs	r3, r2
 800508e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800509c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a19      	ldr	r1, [r3, #32]
 80050a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	492d      	ldr	r1, [pc, #180]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	604b      	str	r3, [r1, #4]
 80050b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80050c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	fa93 f2a3 	rbit	r2, r3
 80050d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050dc:	601a      	str	r2, [r3, #0]
  return result;
 80050de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80050e6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e8:	fab3 f383 	clz	r3, r3
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	461a      	mov	r2, r3
 80050fa:	2301      	movs	r3, #1
 80050fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fe:	f7fc fff1 	bl	80020e4 <HAL_GetTick>
 8005102:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005106:	e009      	b.n	800511c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005108:	f7fc ffec 	bl	80020e4 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e156      	b.n	80053ca <HAL_RCC_OscConfig+0x109a>
 800511c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005120:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800512e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	fa93 f2a3 	rbit	r2, r3
 8005138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800513c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005140:	601a      	str	r2, [r3, #0]
  return result;
 8005142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005146:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800514a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800514c:	fab3 f383 	clz	r3, r3
 8005150:	b2db      	uxtb	r3, r3
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	d105      	bne.n	800516c <HAL_RCC_OscConfig+0xe3c>
 8005160:	4b01      	ldr	r3, [pc, #4]	; (8005168 <HAL_RCC_OscConfig+0xe38>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	e02a      	b.n	80051bc <HAL_RCC_OscConfig+0xe8c>
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005170:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005174:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800517e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	fa93 f2a3 	rbit	r2, r3
 8005188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800518c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005196:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800519a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051a4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	fa93 f2a3 	rbit	r2, r3
 80051ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	4b86      	ldr	r3, [pc, #536]	; (80053d4 <HAL_RCC_OscConfig+0x10a4>)
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051c0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80051c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	fa92 f1a2 	rbit	r1, r2
 80051d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051dc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80051e0:	6011      	str	r1, [r2, #0]
  return result;
 80051e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051e6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	fab2 f282 	clz	r2, r2
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	f042 0220 	orr.w	r2, r2, #32
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	f002 021f 	and.w	r2, r2, #31
 80051fc:	2101      	movs	r1, #1
 80051fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	f43f af7f 	beq.w	8005108 <HAL_RCC_OscConfig+0xdd8>
 800520a:	e0dd      	b.n	80053c8 <HAL_RCC_OscConfig+0x1098>
 800520c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005210:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005214:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800521e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	fa93 f2a3 	rbit	r2, r3
 8005228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800522c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005230:	601a      	str	r2, [r3, #0]
  return result;
 8005232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005236:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800523a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523c:	fab3 f383 	clz	r3, r3
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005246:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	461a      	mov	r2, r3
 800524e:	2300      	movs	r3, #0
 8005250:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fc ff47 	bl	80020e4 <HAL_GetTick>
 8005256:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800525a:	e009      	b.n	8005270 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525c:	f7fc ff42 	bl	80020e4 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e0ac      	b.n	80053ca <HAL_RCC_OscConfig+0x109a>
 8005270:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005274:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800527c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005282:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	fa93 f2a3 	rbit	r2, r3
 800528c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005290:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005294:	601a      	str	r2, [r3, #0]
  return result;
 8005296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800529a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800529e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052a0:	fab3 f383 	clz	r3, r3
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_OscConfig+0xf8a>
 80052b4:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <HAL_RCC_OscConfig+0x10a4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	e027      	b.n	800530a <HAL_RCC_OscConfig+0xfda>
 80052ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052be:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80052c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	fa93 f2a3 	rbit	r2, r3
 80052d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052e4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80052e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	fa93 f2a3 	rbit	r2, r3
 80052fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005300:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <HAL_RCC_OscConfig+0x10a4>)
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800530e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005312:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005316:	6011      	str	r1, [r2, #0]
 8005318:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800531c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	fa92 f1a2 	rbit	r1, r2
 8005326:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800532a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800532e:	6011      	str	r1, [r2, #0]
  return result;
 8005330:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005334:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	fab2 f282 	clz	r2, r2
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	f042 0220 	orr.w	r2, r2, #32
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	f002 021f 	and.w	r2, r2, #31
 800534a:	2101      	movs	r1, #1
 800534c:	fa01 f202 	lsl.w	r2, r1, r2
 8005350:	4013      	ands	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d182      	bne.n	800525c <HAL_RCC_OscConfig+0xf2c>
 8005356:	e037      	b.n	80053c8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005358:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800535c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e02e      	b.n	80053ca <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800536c:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <HAL_RCC_OscConfig+0x10a4>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005374:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <HAL_RCC_OscConfig+0x10a4>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800537c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005380:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005388:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	429a      	cmp	r2, r3
 8005392:	d117      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005394:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005398:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800539c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d10b      	bne.n	80053c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80053ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053b0:	f003 020f 	and.w	r2, r3, #15
 80053b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40021000 	.word	0x40021000

080053d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b09e      	sub	sp, #120	; 0x78
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e162      	b.n	80056b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f0:	4b90      	ldr	r3, [pc, #576]	; (8005634 <HAL_RCC_ClockConfig+0x25c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d910      	bls.n	8005420 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053fe:	4b8d      	ldr	r3, [pc, #564]	; (8005634 <HAL_RCC_ClockConfig+0x25c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f023 0207 	bic.w	r2, r3, #7
 8005406:	498b      	ldr	r1, [pc, #556]	; (8005634 <HAL_RCC_ClockConfig+0x25c>)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4313      	orrs	r3, r2
 800540c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	4b89      	ldr	r3, [pc, #548]	; (8005634 <HAL_RCC_ClockConfig+0x25c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e14a      	b.n	80056b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542c:	4b82      	ldr	r3, [pc, #520]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	497f      	ldr	r1, [pc, #508]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 800543a:	4313      	orrs	r3, r2
 800543c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80dc 	beq.w	8005604 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d13c      	bne.n	80054ce <HAL_RCC_ClockConfig+0xf6>
 8005454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005458:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800545c:	fa93 f3a3 	rbit	r3, r3
 8005460:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005464:	fab3 f383 	clz	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d102      	bne.n	800547e <HAL_RCC_ClockConfig+0xa6>
 8005478:	4b6f      	ldr	r3, [pc, #444]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	e00f      	b.n	800549e <HAL_RCC_ClockConfig+0xc6>
 800547e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005482:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005486:	fa93 f3a3 	rbit	r3, r3
 800548a:	667b      	str	r3, [r7, #100]	; 0x64
 800548c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005490:	663b      	str	r3, [r7, #96]	; 0x60
 8005492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005494:	fa93 f3a3 	rbit	r3, r3
 8005498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800549a:	4b67      	ldr	r3, [pc, #412]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80054a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80054a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054a6:	fa92 f2a2 	rbit	r2, r2
 80054aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80054ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054ae:	fab2 f282 	clz	r2, r2
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	f042 0220 	orr.w	r2, r2, #32
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	f002 021f 	and.w	r2, r2, #31
 80054be:	2101      	movs	r1, #1
 80054c0:	fa01 f202 	lsl.w	r2, r1, r2
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d17b      	bne.n	80055c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e0f3      	b.n	80056b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d13c      	bne.n	8005550 <HAL_RCC_ClockConfig+0x178>
 80054d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054de:	fa93 f3a3 	rbit	r3, r3
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e6:	fab3 f383 	clz	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d102      	bne.n	8005500 <HAL_RCC_ClockConfig+0x128>
 80054fa:	4b4f      	ldr	r3, [pc, #316]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	e00f      	b.n	8005520 <HAL_RCC_ClockConfig+0x148>
 8005500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005508:	fa93 f3a3 	rbit	r3, r3
 800550c:	647b      	str	r3, [r7, #68]	; 0x44
 800550e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005512:	643b      	str	r3, [r7, #64]	; 0x40
 8005514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005516:	fa93 f3a3 	rbit	r3, r3
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551c:	4b46      	ldr	r3, [pc, #280]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005524:	63ba      	str	r2, [r7, #56]	; 0x38
 8005526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005528:	fa92 f2a2 	rbit	r2, r2
 800552c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800552e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005530:	fab2 f282 	clz	r2, r2
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	f042 0220 	orr.w	r2, r2, #32
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	f002 021f 	and.w	r2, r2, #31
 8005540:	2101      	movs	r1, #1
 8005542:	fa01 f202 	lsl.w	r2, r1, r2
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d13a      	bne.n	80055c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0b2      	b.n	80056b6 <HAL_RCC_ClockConfig+0x2de>
 8005550:	2302      	movs	r3, #2
 8005552:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	fa93 f3a3 	rbit	r3, r3
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555e:	fab3 f383 	clz	r3, r3
 8005562:	b2db      	uxtb	r3, r3
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	b2db      	uxtb	r3, r3
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	d102      	bne.n	8005578 <HAL_RCC_ClockConfig+0x1a0>
 8005572:	4b31      	ldr	r3, [pc, #196]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	e00d      	b.n	8005594 <HAL_RCC_ClockConfig+0x1bc>
 8005578:	2302      	movs	r3, #2
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	fa93 f3a3 	rbit	r3, r3
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
 8005584:	2302      	movs	r3, #2
 8005586:	623b      	str	r3, [r7, #32]
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	fa93 f3a3 	rbit	r3, r3
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	4b29      	ldr	r3, [pc, #164]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2202      	movs	r2, #2
 8005596:	61ba      	str	r2, [r7, #24]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	fa92 f2a2 	rbit	r2, r2
 800559e:	617a      	str	r2, [r7, #20]
  return result;
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	fab2 f282 	clz	r2, r2
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	f042 0220 	orr.w	r2, r2, #32
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	f002 021f 	and.w	r2, r2, #31
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f202 	lsl.w	r2, r1, r2
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e079      	b.n	80056b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055c2:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f023 0203 	bic.w	r2, r3, #3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	491a      	ldr	r1, [pc, #104]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055d4:	f7fc fd86 	bl	80020e4 <HAL_GetTick>
 80055d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055da:	e00a      	b.n	80055f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055dc:	f7fc fd82 	bl	80020e4 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e061      	b.n	80056b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <HAL_RCC_ClockConfig+0x260>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f003 020c 	and.w	r2, r3, #12
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	429a      	cmp	r2, r3
 8005602:	d1eb      	bne.n	80055dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <HAL_RCC_ClockConfig+0x25c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d214      	bcs.n	800563c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <HAL_RCC_ClockConfig+0x25c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f023 0207 	bic.w	r2, r3, #7
 800561a:	4906      	ldr	r1, [pc, #24]	; (8005634 <HAL_RCC_ClockConfig+0x25c>)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	4313      	orrs	r3, r2
 8005620:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005622:	4b04      	ldr	r3, [pc, #16]	; (8005634 <HAL_RCC_ClockConfig+0x25c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d005      	beq.n	800563c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e040      	b.n	80056b6 <HAL_RCC_ClockConfig+0x2de>
 8005634:	40022000 	.word	0x40022000
 8005638:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005648:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <HAL_RCC_ClockConfig+0x2e8>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	491a      	ldr	r1, [pc, #104]	; (80056c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005666:	4b16      	ldr	r3, [pc, #88]	; (80056c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	4912      	ldr	r1, [pc, #72]	; (80056c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005676:	4313      	orrs	r3, r2
 8005678:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800567a:	f000 f829 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 800567e:	4601      	mov	r1, r0
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005688:	22f0      	movs	r2, #240	; 0xf0
 800568a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	fa92 f2a2 	rbit	r2, r2
 8005692:	60fa      	str	r2, [r7, #12]
  return result;
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	fab2 f282 	clz	r2, r2
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	40d3      	lsrs	r3, r2
 800569e:	4a09      	ldr	r2, [pc, #36]	; (80056c4 <HAL_RCC_ClockConfig+0x2ec>)
 80056a0:	5cd3      	ldrb	r3, [r2, r3]
 80056a2:	fa21 f303 	lsr.w	r3, r1, r3
 80056a6:	4a08      	ldr	r2, [pc, #32]	; (80056c8 <HAL_RCC_ClockConfig+0x2f0>)
 80056a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <HAL_RCC_ClockConfig+0x2f4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fc fcd4 	bl	800205c <HAL_InitTick>
  
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3778      	adds	r7, #120	; 0x78
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	40021000 	.word	0x40021000
 80056c4:	080093fc 	.word	0x080093fc
 80056c8:	20000000 	.word	0x20000000
 80056cc:	20000004 	.word	0x20000004

080056d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b08b      	sub	sp, #44	; 0x2c
 80056d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
 80056da:	2300      	movs	r3, #0
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	2300      	movs	r3, #0
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80056ea:	4b2a      	ldr	r3, [pc, #168]	; (8005794 <HAL_RCC_GetSysClockFreq+0xc4>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d002      	beq.n	8005700 <HAL_RCC_GetSysClockFreq+0x30>
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d003      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x36>
 80056fe:	e03f      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005700:	4b25      	ldr	r3, [pc, #148]	; (8005798 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005702:	623b      	str	r3, [r7, #32]
      break;
 8005704:	e03f      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800570c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005710:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	fa92 f2a2 	rbit	r2, r2
 8005718:	607a      	str	r2, [r7, #4]
  return result;
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	fab2 f282 	clz	r2, r2
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	40d3      	lsrs	r3, r2
 8005724:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005726:	5cd3      	ldrb	r3, [r2, r3]
 8005728:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800572a:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <HAL_RCC_GetSysClockFreq+0xc4>)
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	220f      	movs	r2, #15
 8005734:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	fa92 f2a2 	rbit	r2, r2
 800573c:	60fa      	str	r2, [r7, #12]
  return result;
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	fab2 f282 	clz	r2, r2
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	40d3      	lsrs	r3, r2
 8005748:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800574a:	5cd3      	ldrb	r3, [r2, r3]
 800574c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005758:	4a0f      	ldr	r2, [pc, #60]	; (8005798 <HAL_RCC_GetSysClockFreq+0xc8>)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
 8005768:	e007      	b.n	800577a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800576a:	4a0b      	ldr	r2, [pc, #44]	; (8005798 <HAL_RCC_GetSysClockFreq+0xc8>)
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	fb02 f303 	mul.w	r3, r2, r3
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	623b      	str	r3, [r7, #32]
      break;
 800577e:	e002      	b.n	8005786 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005782:	623b      	str	r3, [r7, #32]
      break;
 8005784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005786:	6a3b      	ldr	r3, [r7, #32]
}
 8005788:	4618      	mov	r0, r3
 800578a:	372c      	adds	r7, #44	; 0x2c
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	40021000 	.word	0x40021000
 8005798:	007a1200 	.word	0x007a1200
 800579c:	08009414 	.word	0x08009414
 80057a0:	08009424 	.word	0x08009424

080057a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a8:	4b03      	ldr	r3, [pc, #12]	; (80057b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057aa:	681b      	ldr	r3, [r3, #0]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20000000 	.word	0x20000000

080057bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80057c2:	f7ff ffef 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 80057c6:	4601      	mov	r1, r0
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80057d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	fa92 f2a2 	rbit	r2, r2
 80057dc:	603a      	str	r2, [r7, #0]
  return result;
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	fab2 f282 	clz	r2, r2
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	40d3      	lsrs	r3, r2
 80057e8:	4a04      	ldr	r2, [pc, #16]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80057ea:	5cd3      	ldrb	r3, [r2, r3]
 80057ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40021000 	.word	0x40021000
 80057fc:	0800940c 	.word	0x0800940c

08005800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005806:	f7ff ffcd 	bl	80057a4 <HAL_RCC_GetHCLKFreq>
 800580a:	4601      	mov	r1, r0
 800580c:	4b0b      	ldr	r3, [pc, #44]	; (800583c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005814:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005818:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	fa92 f2a2 	rbit	r2, r2
 8005820:	603a      	str	r2, [r7, #0]
  return result;
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	fab2 f282 	clz	r2, r2
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	40d3      	lsrs	r3, r2
 800582c:	4a04      	ldr	r2, [pc, #16]	; (8005840 <HAL_RCC_GetPCLK2Freq+0x40>)
 800582e:	5cd3      	ldrb	r3, [r2, r3]
 8005830:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40021000 	.word	0x40021000
 8005840:	0800940c 	.word	0x0800940c

08005844 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b092      	sub	sp, #72	; 0x48
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005854:	2300      	movs	r3, #0
 8005856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80d4 	beq.w	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005868:	4b4e      	ldr	r3, [pc, #312]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10e      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005874:	4b4b      	ldr	r3, [pc, #300]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	4a4a      	ldr	r2, [pc, #296]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800587e:	61d3      	str	r3, [r2, #28]
 8005880:	4b48      	ldr	r3, [pc, #288]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005892:	4b45      	ldr	r3, [pc, #276]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d118      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800589e:	4b42      	ldr	r3, [pc, #264]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a41      	ldr	r2, [pc, #260]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058aa:	f7fc fc1b 	bl	80020e4 <HAL_GetTick>
 80058ae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b0:	e008      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b2:	f7fc fc17 	bl	80020e4 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b64      	cmp	r3, #100	; 0x64
 80058be:	d901      	bls.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e1d6      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c4:	4b38      	ldr	r3, [pc, #224]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058d0:	4b34      	ldr	r3, [pc, #208]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8084 	beq.w	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d07c      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058f0:	4b2c      	ldr	r3, [pc, #176]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80058fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800590a:	fab3 f383 	clz	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	4b26      	ldr	r3, [pc, #152]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	461a      	mov	r2, r3
 800591a:	2301      	movs	r3, #1
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005922:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	fa93 f3a3 	rbit	r3, r3
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800592e:	fab3 f383 	clz	r3, r3
 8005932:	b2db      	uxtb	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	4b1d      	ldr	r3, [pc, #116]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	461a      	mov	r2, r3
 800593e:	2300      	movs	r3, #0
 8005940:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005942:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005946:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d04b      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fc fbc7 	bl	80020e4 <HAL_GetTick>
 8005956:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	e00a      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fc fbc3 	bl	80020e4 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	; 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e180      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005970:	2302      	movs	r3, #2
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	fa93 f3a3 	rbit	r3, r3
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
 800597c:	2302      	movs	r3, #2
 800597e:	623b      	str	r3, [r7, #32]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	fa93 f3a3 	rbit	r3, r3
 8005986:	61fb      	str	r3, [r7, #28]
  return result;
 8005988:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598a:	fab3 f383 	clz	r3, r3
 800598e:	b2db      	uxtb	r3, r3
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f043 0302 	orr.w	r3, r3, #2
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d108      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800599e:	4b01      	ldr	r3, [pc, #4]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	e00d      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80059a4:	40021000 	.word	0x40021000
 80059a8:	40007000 	.word	0x40007000
 80059ac:	10908100 	.word	0x10908100
 80059b0:	2302      	movs	r3, #2
 80059b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	fa93 f3a3 	rbit	r3, r3
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	4b9a      	ldr	r3, [pc, #616]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	2202      	movs	r2, #2
 80059c2:	613a      	str	r2, [r7, #16]
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	fa92 f2a2 	rbit	r2, r2
 80059ca:	60fa      	str	r2, [r7, #12]
  return result;
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	fab2 f282 	clz	r2, r2
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	f002 021f 	and.w	r2, r2, #31
 80059de:	2101      	movs	r1, #1
 80059e0:	fa01 f202 	lsl.w	r2, r1, r2
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0b7      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80059ea:	4b8f      	ldr	r3, [pc, #572]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	498c      	ldr	r1, [pc, #560]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d105      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a04:	4b88      	ldr	r3, [pc, #544]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4a87      	ldr	r2, [pc, #540]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a1c:	4b82      	ldr	r3, [pc, #520]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	f023 0203 	bic.w	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	497f      	ldr	r1, [pc, #508]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a3a:	4b7b      	ldr	r3, [pc, #492]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	4978      	ldr	r1, [pc, #480]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a58:	4b73      	ldr	r3, [pc, #460]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	4970      	ldr	r1, [pc, #448]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a76:	4b6c      	ldr	r3, [pc, #432]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	f023 0210 	bic.w	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4969      	ldr	r1, [pc, #420]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005a94:	4b64      	ldr	r3, [pc, #400]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa0:	4961      	ldr	r1, [pc, #388]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ab2:	4b5d      	ldr	r3, [pc, #372]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab6:	f023 0220 	bic.w	r2, r3, #32
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	495a      	ldr	r1, [pc, #360]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ad0:	4b55      	ldr	r3, [pc, #340]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	4952      	ldr	r1, [pc, #328]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005aee:	4b4e      	ldr	r3, [pc, #312]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	494b      	ldr	r1, [pc, #300]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b0c:	4b46      	ldr	r3, [pc, #280]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	4943      	ldr	r1, [pc, #268]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b2a:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	493c      	ldr	r1, [pc, #240]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b48:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	4934      	ldr	r1, [pc, #208]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b66:	4b30      	ldr	r3, [pc, #192]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	492d      	ldr	r1, [pc, #180]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b84:	4b28      	ldr	r3, [pc, #160]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	4925      	ldr	r1, [pc, #148]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005ba2:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	491e      	ldr	r1, [pc, #120]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	4916      	ldr	r1, [pc, #88]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d008      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005bde:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	490f      	ldr	r1, [pc, #60]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c08:	4907      	ldr	r1, [pc, #28]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005c1a:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	e002      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2e:	4913      	ldr	r1, [pc, #76]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d008      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005c40:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4c:	490b      	ldr	r1, [pc, #44]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6a:	4904      	ldr	r1, [pc, #16]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3748      	adds	r7, #72	; 0x48
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000

08005c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e049      	b.n	8005d26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fc f826 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 fed6 	bl	8006a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
	...

08005d30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d001      	beq.n	8005d48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e047      	b.n	8005dd8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a23      	ldr	r2, [pc, #140]	; (8005de4 <HAL_TIM_Base_Start+0xb4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d01d      	beq.n	8005d96 <HAL_TIM_Base_Start+0x66>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d018      	beq.n	8005d96 <HAL_TIM_Base_Start+0x66>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <HAL_TIM_Base_Start+0xb8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <HAL_TIM_Base_Start+0x66>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1e      	ldr	r2, [pc, #120]	; (8005dec <HAL_TIM_Base_Start+0xbc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_TIM_Base_Start+0x66>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <HAL_TIM_Base_Start+0xc0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_TIM_Base_Start+0x66>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_TIM_Base_Start+0xc4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIM_Base_Start+0x66>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <HAL_TIM_Base_Start+0xc8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d115      	bne.n	8005dc2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <HAL_TIM_Base_Start+0xcc>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d015      	beq.n	8005dd4 <HAL_TIM_Base_Start+0xa4>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dae:	d011      	beq.n	8005dd4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc0:	e008      	b.n	8005dd4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e000      	b.n	8005dd6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40013400 	.word	0x40013400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40015000 	.word	0x40015000
 8005dfc:	00010007 	.word	0x00010007

08005e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d001      	beq.n	8005e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e04f      	b.n	8005eb8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a23      	ldr	r2, [pc, #140]	; (8005ec4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01d      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x76>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e42:	d018      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x76>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x76>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1e      	ldr	r2, [pc, #120]	; (8005ecc <HAL_TIM_Base_Start_IT+0xcc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00e      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x76>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1c      	ldr	r2, [pc, #112]	; (8005ed0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d009      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x76>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a1b      	ldr	r2, [pc, #108]	; (8005ed4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d004      	beq.n	8005e76 <HAL_TIM_Base_Start_IT+0x76>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d115      	bne.n	8005ea2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	4b17      	ldr	r3, [pc, #92]	; (8005edc <HAL_TIM_Base_Start_IT+0xdc>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b06      	cmp	r3, #6
 8005e86:	d015      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0xb4>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8e:	d011      	beq.n	8005eb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea0:	e008      	b.n	8005eb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e000      	b.n	8005eb6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40000400 	.word	0x40000400
 8005ecc:	40000800 	.word	0x40000800
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40015000 	.word	0x40015000
 8005edc:	00010007 	.word	0x00010007

08005ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e049      	b.n	8005f86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f841 	bl	8005f8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f000 fda6 	bl	8006a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <HAL_TIM_PWM_Start+0x24>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	e03c      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d109      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0x3e>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	bf14      	ite	ne
 8005fda:	2301      	movne	r3, #1
 8005fdc:	2300      	moveq	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	e02f      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d109      	bne.n	8005ffc <HAL_TIM_PWM_Start+0x58>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e022      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d109      	bne.n	8006016 <HAL_TIM_PWM_Start+0x72>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	bf14      	ite	ne
 800600e:	2301      	movne	r3, #1
 8006010:	2300      	moveq	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	e015      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b10      	cmp	r3, #16
 800601a:	d109      	bne.n	8006030 <HAL_TIM_PWM_Start+0x8c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	e008      	b.n	8006042 <HAL_TIM_PWM_Start+0x9e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0a1      	b.n	800618e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <HAL_TIM_PWM_Start+0xb6>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006058:	e023      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Start+0xc6>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006068:	e01b      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Start+0xd6>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006078:	e013      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b0c      	cmp	r3, #12
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Start+0xe6>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006088:	e00b      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b10      	cmp	r3, #16
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Start+0xf6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006098:	e003      	b.n	80060a2 <HAL_TIM_PWM_Start+0xfe>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f91e 	bl	80072ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a38      	ldr	r2, [pc, #224]	; (8006198 <HAL_TIM_PWM_Start+0x1f4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d018      	beq.n	80060ec <HAL_TIM_PWM_Start+0x148>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a37      	ldr	r2, [pc, #220]	; (800619c <HAL_TIM_PWM_Start+0x1f8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d013      	beq.n	80060ec <HAL_TIM_PWM_Start+0x148>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a35      	ldr	r2, [pc, #212]	; (80061a0 <HAL_TIM_PWM_Start+0x1fc>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00e      	beq.n	80060ec <HAL_TIM_PWM_Start+0x148>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a34      	ldr	r2, [pc, #208]	; (80061a4 <HAL_TIM_PWM_Start+0x200>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d009      	beq.n	80060ec <HAL_TIM_PWM_Start+0x148>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a32      	ldr	r2, [pc, #200]	; (80061a8 <HAL_TIM_PWM_Start+0x204>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d004      	beq.n	80060ec <HAL_TIM_PWM_Start+0x148>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a31      	ldr	r2, [pc, #196]	; (80061ac <HAL_TIM_PWM_Start+0x208>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d101      	bne.n	80060f0 <HAL_TIM_PWM_Start+0x14c>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <HAL_TIM_PWM_Start+0x14e>
 80060f0:	2300      	movs	r3, #0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006104:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a23      	ldr	r2, [pc, #140]	; (8006198 <HAL_TIM_PWM_Start+0x1f4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d01d      	beq.n	800614c <HAL_TIM_PWM_Start+0x1a8>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006118:	d018      	beq.n	800614c <HAL_TIM_PWM_Start+0x1a8>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a24      	ldr	r2, [pc, #144]	; (80061b0 <HAL_TIM_PWM_Start+0x20c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d013      	beq.n	800614c <HAL_TIM_PWM_Start+0x1a8>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a22      	ldr	r2, [pc, #136]	; (80061b4 <HAL_TIM_PWM_Start+0x210>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00e      	beq.n	800614c <HAL_TIM_PWM_Start+0x1a8>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_TIM_PWM_Start+0x1f8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d009      	beq.n	800614c <HAL_TIM_PWM_Start+0x1a8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <HAL_TIM_PWM_Start+0x1fc>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d004      	beq.n	800614c <HAL_TIM_PWM_Start+0x1a8>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a19      	ldr	r2, [pc, #100]	; (80061ac <HAL_TIM_PWM_Start+0x208>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d115      	bne.n	8006178 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <HAL_TIM_PWM_Start+0x214>)
 8006154:	4013      	ands	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b06      	cmp	r3, #6
 800615c:	d015      	beq.n	800618a <HAL_TIM_PWM_Start+0x1e6>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006164:	d011      	beq.n	800618a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0201 	orr.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006176:	e008      	b.n	800618a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e000      	b.n	800618c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40013400 	.word	0x40013400
 80061a0:	40014000 	.word	0x40014000
 80061a4:	40014400 	.word	0x40014400
 80061a8:	40014800 	.word	0x40014800
 80061ac:	40015000 	.word	0x40015000
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40000800 	.word	0x40000800
 80061b8:	00010007 	.word	0x00010007

080061bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e097      	b.n	8006300 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d106      	bne.n	80061ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fb fddd 	bl	8001da4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006200:	f023 0307 	bic.w	r3, r3, #7
 8006204:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f000 fc2d 	bl	8006a70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	4313      	orrs	r3, r2
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800625c:	f023 030c 	bic.w	r3, r3, #12
 8006260:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800626c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	4313      	orrs	r3, r2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	011a      	lsls	r2, r3, #4
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	031b      	lsls	r3, r3, #12
 800628c:	4313      	orrs	r3, r2
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800629a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80062a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	4313      	orrs	r3, r2
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006318:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006320:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006328:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006330:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d110      	bne.n	800635a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d102      	bne.n	8006344 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800633e:	7b7b      	ldrb	r3, [r7, #13]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d001      	beq.n	8006348 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e069      	b.n	800641c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006358:	e031      	b.n	80063be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b04      	cmp	r3, #4
 800635e:	d110      	bne.n	8006382 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006360:	7bbb      	ldrb	r3, [r7, #14]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d102      	bne.n	800636c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006366:	7b3b      	ldrb	r3, [r7, #12]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d001      	beq.n	8006370 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e055      	b.n	800641c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006380:	e01d      	b.n	80063be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d108      	bne.n	800639a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d105      	bne.n	800639a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800638e:	7b7b      	ldrb	r3, [r7, #13]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d102      	bne.n	800639a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006394:	7b3b      	ldrb	r3, [r7, #12]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d001      	beq.n	800639e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e03e      	b.n	800641c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_TIM_Encoder_Start+0xc4>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d008      	beq.n	80063dc <HAL_TIM_Encoder_Start+0xd4>
 80063ca:	e00f      	b.n	80063ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2201      	movs	r2, #1
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 ff89 	bl	80072ec <TIM_CCxChannelCmd>
      break;
 80063da:	e016      	b.n	800640a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2201      	movs	r2, #1
 80063e2:	2104      	movs	r1, #4
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 ff81 	bl	80072ec <TIM_CCxChannelCmd>
      break;
 80063ea:	e00e      	b.n	800640a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	2100      	movs	r1, #0
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 ff79 	bl	80072ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2201      	movs	r2, #1
 8006400:	2104      	movs	r1, #4
 8006402:	4618      	mov	r0, r3
 8006404:	f000 ff72 	bl	80072ec <TIM_CCxChannelCmd>
      break;
 8006408:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0201 	orr.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d122      	bne.n	8006480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b02      	cmp	r3, #2
 8006446:	d11b      	bne.n	8006480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0202 	mvn.w	r2, #2
 8006450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fae3 	bl	8006a32 <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fad5 	bl	8006a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fae6 	bl	8006a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b04      	cmp	r3, #4
 800648c:	d122      	bne.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b04      	cmp	r3, #4
 800649a:	d11b      	bne.n	80064d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0204 	mvn.w	r2, #4
 80064a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fab9 	bl	8006a32 <HAL_TIM_IC_CaptureCallback>
 80064c0:	e005      	b.n	80064ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 faab 	bl	8006a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fabc 	bl	8006a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	f003 0308 	and.w	r3, r3, #8
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d122      	bne.n	8006528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d11b      	bne.n	8006528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0208 	mvn.w	r2, #8
 80064f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2204      	movs	r2, #4
 80064fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa8f 	bl	8006a32 <HAL_TIM_IC_CaptureCallback>
 8006514:	e005      	b.n	8006522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa81 	bl	8006a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fa92 	bl	8006a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b10      	cmp	r3, #16
 8006534:	d122      	bne.n	800657c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b10      	cmp	r3, #16
 8006542:	d11b      	bne.n	800657c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0210 	mvn.w	r2, #16
 800654c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2208      	movs	r2, #8
 8006552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fa65 	bl	8006a32 <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fa57 	bl	8006a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fa68 	bl	8006a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b01      	cmp	r3, #1
 8006588:	d10e      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b01      	cmp	r3, #1
 8006596:	d107      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0201 	mvn.w	r2, #1
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fb f984 	bl	80018b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b2:	2b80      	cmp	r3, #128	; 0x80
 80065b4:	d10e      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c0:	2b80      	cmp	r3, #128	; 0x80
 80065c2:	d107      	bne.n	80065d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 ff48 	bl	8007464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e2:	d10e      	bne.n	8006602 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d107      	bne.n	8006602 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 ff3b 	bl	8007478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d10e      	bne.n	800662e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661a:	2b40      	cmp	r3, #64	; 0x40
 800661c:	d107      	bne.n	800662e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006626:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fa16 	bl	8006a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b20      	cmp	r3, #32
 800663a:	d10e      	bne.n	800665a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0320 	and.w	r3, r3, #32
 8006646:	2b20      	cmp	r3, #32
 8006648:	d107      	bne.n	800665a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f06f 0220 	mvn.w	r2, #32
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fefb 	bl	8007450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800667e:	2302      	movs	r3, #2
 8006680:	e0ff      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b14      	cmp	r3, #20
 800668e:	f200 80f0 	bhi.w	8006872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006873 	.word	0x08006873
 80066a0:	08006873 	.word	0x08006873
 80066a4:	08006873 	.word	0x08006873
 80066a8:	0800672d 	.word	0x0800672d
 80066ac:	08006873 	.word	0x08006873
 80066b0:	08006873 	.word	0x08006873
 80066b4:	08006873 	.word	0x08006873
 80066b8:	0800676f 	.word	0x0800676f
 80066bc:	08006873 	.word	0x08006873
 80066c0:	08006873 	.word	0x08006873
 80066c4:	08006873 	.word	0x08006873
 80066c8:	080067af 	.word	0x080067af
 80066cc:	08006873 	.word	0x08006873
 80066d0:	08006873 	.word	0x08006873
 80066d4:	08006873 	.word	0x08006873
 80066d8:	080067f1 	.word	0x080067f1
 80066dc:	08006873 	.word	0x08006873
 80066e0:	08006873 	.word	0x08006873
 80066e4:	08006873 	.word	0x08006873
 80066e8:	08006831 	.word	0x08006831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fa5a 	bl	8006bac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0208 	orr.w	r2, r2, #8
 8006706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0204 	bic.w	r2, r2, #4
 8006716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6999      	ldr	r1, [r3, #24]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	619a      	str	r2, [r3, #24]
      break;
 800672a:	e0a5      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fad4 	bl	8006ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6999      	ldr	r1, [r3, #24]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	619a      	str	r2, [r3, #24]
      break;
 800676c:	e084      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fb47 	bl	8006e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0208 	orr.w	r2, r2, #8
 8006788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0204 	bic.w	r2, r2, #4
 8006798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69d9      	ldr	r1, [r3, #28]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	61da      	str	r2, [r3, #28]
      break;
 80067ac:	e064      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fbb9 	bl	8006f2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	021a      	lsls	r2, r3, #8
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	61da      	str	r2, [r3, #28]
      break;
 80067ee:	e043      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fc08 	bl	800700c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0208 	orr.w	r2, r2, #8
 800680a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0204 	bic.w	r2, r2, #4
 800681a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800682e:	e023      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fc52 	bl	80070e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800684a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	021a      	lsls	r2, r3, #8
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006870:	e002      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
      break;
 8006876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_TIM_ConfigClockSource+0x1c>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e0b6      	b.n	8006a16 <HAL_TIM_ConfigClockSource+0x18a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e4:	d03e      	beq.n	8006964 <HAL_TIM_ConfigClockSource+0xd8>
 80068e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ea:	f200 8087 	bhi.w	80069fc <HAL_TIM_ConfigClockSource+0x170>
 80068ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f2:	f000 8086 	beq.w	8006a02 <HAL_TIM_ConfigClockSource+0x176>
 80068f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068fa:	d87f      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x170>
 80068fc:	2b70      	cmp	r3, #112	; 0x70
 80068fe:	d01a      	beq.n	8006936 <HAL_TIM_ConfigClockSource+0xaa>
 8006900:	2b70      	cmp	r3, #112	; 0x70
 8006902:	d87b      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x170>
 8006904:	2b60      	cmp	r3, #96	; 0x60
 8006906:	d050      	beq.n	80069aa <HAL_TIM_ConfigClockSource+0x11e>
 8006908:	2b60      	cmp	r3, #96	; 0x60
 800690a:	d877      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x170>
 800690c:	2b50      	cmp	r3, #80	; 0x50
 800690e:	d03c      	beq.n	800698a <HAL_TIM_ConfigClockSource+0xfe>
 8006910:	2b50      	cmp	r3, #80	; 0x50
 8006912:	d873      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x170>
 8006914:	2b40      	cmp	r3, #64	; 0x40
 8006916:	d058      	beq.n	80069ca <HAL_TIM_ConfigClockSource+0x13e>
 8006918:	2b40      	cmp	r3, #64	; 0x40
 800691a:	d86f      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x170>
 800691c:	2b30      	cmp	r3, #48	; 0x30
 800691e:	d064      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x15e>
 8006920:	2b30      	cmp	r3, #48	; 0x30
 8006922:	d86b      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x170>
 8006924:	2b20      	cmp	r3, #32
 8006926:	d060      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x15e>
 8006928:	2b20      	cmp	r3, #32
 800692a:	d867      	bhi.n	80069fc <HAL_TIM_ConfigClockSource+0x170>
 800692c:	2b00      	cmp	r3, #0
 800692e:	d05c      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x15e>
 8006930:	2b10      	cmp	r3, #16
 8006932:	d05a      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0x15e>
 8006934:	e062      	b.n	80069fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006946:	f000 fcb1 	bl	80072ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	609a      	str	r2, [r3, #8]
      break;
 8006962:	e04f      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006974:	f000 fc9a 	bl	80072ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006986:	609a      	str	r2, [r3, #8]
      break;
 8006988:	e03c      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006996:	461a      	mov	r2, r3
 8006998:	f000 fc0e 	bl	80071b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2150      	movs	r1, #80	; 0x50
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fc67 	bl	8007276 <TIM_ITRx_SetConfig>
      break;
 80069a8:	e02c      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069b6:	461a      	mov	r2, r3
 80069b8:	f000 fc2d 	bl	8007216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2160      	movs	r1, #96	; 0x60
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fc57 	bl	8007276 <TIM_ITRx_SetConfig>
      break;
 80069c8:	e01c      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069d6:	461a      	mov	r2, r3
 80069d8:	f000 fbee 	bl	80071b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2140      	movs	r1, #64	; 0x40
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 fc47 	bl	8007276 <TIM_ITRx_SetConfig>
      break;
 80069e8:	e00c      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f000 fc3e 	bl	8007276 <TIM_ITRx_SetConfig>
      break;
 80069fa:	e003      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006a00:	e000      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a4e:	bf00      	nop
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
	...

08006a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a42      	ldr	r2, [pc, #264]	; (8006b8c <TIM_Base_SetConfig+0x11c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d013      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8e:	d00f      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a3f      	ldr	r2, [pc, #252]	; (8006b90 <TIM_Base_SetConfig+0x120>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a3e      	ldr	r2, [pc, #248]	; (8006b94 <TIM_Base_SetConfig+0x124>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d007      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <TIM_Base_SetConfig+0x128>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3c      	ldr	r2, [pc, #240]	; (8006b9c <TIM_Base_SetConfig+0x12c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d108      	bne.n	8006ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a31      	ldr	r2, [pc, #196]	; (8006b8c <TIM_Base_SetConfig+0x11c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d01f      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad0:	d01b      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2e      	ldr	r2, [pc, #184]	; (8006b90 <TIM_Base_SetConfig+0x120>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d017      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2d      	ldr	r2, [pc, #180]	; (8006b94 <TIM_Base_SetConfig+0x124>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2c      	ldr	r2, [pc, #176]	; (8006b98 <TIM_Base_SetConfig+0x128>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2c      	ldr	r2, [pc, #176]	; (8006ba0 <TIM_Base_SetConfig+0x130>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00b      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <TIM_Base_SetConfig+0x134>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <TIM_Base_SetConfig+0x138>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a25      	ldr	r2, [pc, #148]	; (8006b9c <TIM_Base_SetConfig+0x12c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d108      	bne.n	8006b1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a12      	ldr	r2, [pc, #72]	; (8006b8c <TIM_Base_SetConfig+0x11c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <TIM_Base_SetConfig+0x100>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a13      	ldr	r2, [pc, #76]	; (8006b98 <TIM_Base_SetConfig+0x128>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00f      	beq.n	8006b70 <TIM_Base_SetConfig+0x100>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a13      	ldr	r2, [pc, #76]	; (8006ba0 <TIM_Base_SetConfig+0x130>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00b      	beq.n	8006b70 <TIM_Base_SetConfig+0x100>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <TIM_Base_SetConfig+0x134>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d007      	beq.n	8006b70 <TIM_Base_SetConfig+0x100>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a11      	ldr	r2, [pc, #68]	; (8006ba8 <TIM_Base_SetConfig+0x138>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_Base_SetConfig+0x100>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a0c      	ldr	r2, [pc, #48]	; (8006b9c <TIM_Base_SetConfig+0x12c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d103      	bne.n	8006b78 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	615a      	str	r2, [r3, #20]
}
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40013400 	.word	0x40013400
 8006b9c:	40015000 	.word	0x40015000
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40014400 	.word	0x40014400
 8006ba8:	40014800 	.word	0x40014800

08006bac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f023 0201 	bic.w	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f023 0302 	bic.w	r3, r3, #2
 8006bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a30      	ldr	r2, [pc, #192]	; (8006cc8 <TIM_OC1_SetConfig+0x11c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d013      	beq.n	8006c34 <TIM_OC1_SetConfig+0x88>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a2f      	ldr	r2, [pc, #188]	; (8006ccc <TIM_OC1_SetConfig+0x120>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00f      	beq.n	8006c34 <TIM_OC1_SetConfig+0x88>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a2e      	ldr	r2, [pc, #184]	; (8006cd0 <TIM_OC1_SetConfig+0x124>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00b      	beq.n	8006c34 <TIM_OC1_SetConfig+0x88>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a2d      	ldr	r2, [pc, #180]	; (8006cd4 <TIM_OC1_SetConfig+0x128>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d007      	beq.n	8006c34 <TIM_OC1_SetConfig+0x88>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a2c      	ldr	r2, [pc, #176]	; (8006cd8 <TIM_OC1_SetConfig+0x12c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d003      	beq.n	8006c34 <TIM_OC1_SetConfig+0x88>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a2b      	ldr	r2, [pc, #172]	; (8006cdc <TIM_OC1_SetConfig+0x130>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d10c      	bne.n	8006c4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f023 0308 	bic.w	r3, r3, #8
 8006c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f023 0304 	bic.w	r3, r3, #4
 8006c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1d      	ldr	r2, [pc, #116]	; (8006cc8 <TIM_OC1_SetConfig+0x11c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d013      	beq.n	8006c7e <TIM_OC1_SetConfig+0xd2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1c      	ldr	r2, [pc, #112]	; (8006ccc <TIM_OC1_SetConfig+0x120>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00f      	beq.n	8006c7e <TIM_OC1_SetConfig+0xd2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <TIM_OC1_SetConfig+0x124>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00b      	beq.n	8006c7e <TIM_OC1_SetConfig+0xd2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <TIM_OC1_SetConfig+0x128>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d007      	beq.n	8006c7e <TIM_OC1_SetConfig+0xd2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <TIM_OC1_SetConfig+0x12c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d003      	beq.n	8006c7e <TIM_OC1_SetConfig+0xd2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <TIM_OC1_SetConfig+0x130>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d111      	bne.n	8006ca2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	621a      	str	r2, [r3, #32]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40013400 	.word	0x40013400
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400
 8006cd8:	40014800 	.word	0x40014800
 8006cdc:	40015000 	.word	0x40015000

08006ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f023 0210 	bic.w	r2, r3, #16
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0320 	bic.w	r3, r3, #32
 8006d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a2c      	ldr	r2, [pc, #176]	; (8006df0 <TIM_OC2_SetConfig+0x110>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d007      	beq.n	8006d54 <TIM_OC2_SetConfig+0x74>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a2b      	ldr	r2, [pc, #172]	; (8006df4 <TIM_OC2_SetConfig+0x114>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d003      	beq.n	8006d54 <TIM_OC2_SetConfig+0x74>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a2a      	ldr	r2, [pc, #168]	; (8006df8 <TIM_OC2_SetConfig+0x118>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d10d      	bne.n	8006d70 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <TIM_OC2_SetConfig+0x110>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d013      	beq.n	8006da0 <TIM_OC2_SetConfig+0xc0>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1e      	ldr	r2, [pc, #120]	; (8006df4 <TIM_OC2_SetConfig+0x114>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00f      	beq.n	8006da0 <TIM_OC2_SetConfig+0xc0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <TIM_OC2_SetConfig+0x11c>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00b      	beq.n	8006da0 <TIM_OC2_SetConfig+0xc0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1d      	ldr	r2, [pc, #116]	; (8006e00 <TIM_OC2_SetConfig+0x120>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d007      	beq.n	8006da0 <TIM_OC2_SetConfig+0xc0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a1c      	ldr	r2, [pc, #112]	; (8006e04 <TIM_OC2_SetConfig+0x124>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d003      	beq.n	8006da0 <TIM_OC2_SetConfig+0xc0>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a17      	ldr	r2, [pc, #92]	; (8006df8 <TIM_OC2_SetConfig+0x118>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d113      	bne.n	8006dc8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dae:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	621a      	str	r2, [r3, #32]
}
 8006de2:	bf00      	nop
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40012c00 	.word	0x40012c00
 8006df4:	40013400 	.word	0x40013400
 8006df8:	40015000 	.word	0x40015000
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800

08006e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a2b      	ldr	r2, [pc, #172]	; (8006f14 <TIM_OC3_SetConfig+0x10c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d007      	beq.n	8006e7a <TIM_OC3_SetConfig+0x72>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a2a      	ldr	r2, [pc, #168]	; (8006f18 <TIM_OC3_SetConfig+0x110>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_OC3_SetConfig+0x72>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a29      	ldr	r2, [pc, #164]	; (8006f1c <TIM_OC3_SetConfig+0x114>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d10d      	bne.n	8006e96 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e94:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <TIM_OC3_SetConfig+0x10c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d013      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xbe>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <TIM_OC3_SetConfig+0x110>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00f      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xbe>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	; (8006f20 <TIM_OC3_SetConfig+0x118>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00b      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xbe>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1c      	ldr	r2, [pc, #112]	; (8006f24 <TIM_OC3_SetConfig+0x11c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d007      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xbe>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	; (8006f28 <TIM_OC3_SetConfig+0x120>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d003      	beq.n	8006ec6 <TIM_OC3_SetConfig+0xbe>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	; (8006f1c <TIM_OC3_SetConfig+0x114>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d113      	bne.n	8006eee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	621a      	str	r2, [r3, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40015000 	.word	0x40015000
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40014400 	.word	0x40014400
 8006f28:	40014800 	.word	0x40014800

08006f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	021b      	lsls	r3, r3, #8
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	031b      	lsls	r3, r3, #12
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <TIM_OC4_SetConfig+0xc8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x8c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <TIM_OC4_SetConfig+0xcc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d00f      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x8c>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a18      	ldr	r2, [pc, #96]	; (8006ffc <TIM_OC4_SetConfig+0xd0>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x8c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a17      	ldr	r2, [pc, #92]	; (8007000 <TIM_OC4_SetConfig+0xd4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x8c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a16      	ldr	r2, [pc, #88]	; (8007004 <TIM_OC4_SetConfig+0xd8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_OC4_SetConfig+0x8c>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a15      	ldr	r2, [pc, #84]	; (8007008 <TIM_OC4_SetConfig+0xdc>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d109      	bne.n	8006fcc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	019b      	lsls	r3, r3, #6
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	621a      	str	r2, [r3, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800
 8007008:	40015000 	.word	0x40015000

0800700c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007050:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	041b      	lsls	r3, r3, #16
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <TIM_OC5_SetConfig+0xbc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <TIM_OC5_SetConfig+0x82>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a18      	ldr	r2, [pc, #96]	; (80070cc <TIM_OC5_SetConfig+0xc0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00f      	beq.n	800708e <TIM_OC5_SetConfig+0x82>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a17      	ldr	r2, [pc, #92]	; (80070d0 <TIM_OC5_SetConfig+0xc4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00b      	beq.n	800708e <TIM_OC5_SetConfig+0x82>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a16      	ldr	r2, [pc, #88]	; (80070d4 <TIM_OC5_SetConfig+0xc8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d007      	beq.n	800708e <TIM_OC5_SetConfig+0x82>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <TIM_OC5_SetConfig+0xcc>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <TIM_OC5_SetConfig+0x82>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a14      	ldr	r2, [pc, #80]	; (80070dc <TIM_OC5_SetConfig+0xd0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d109      	bne.n	80070a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	621a      	str	r2, [r3, #32]
}
 80070bc:	bf00      	nop
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	40012c00 	.word	0x40012c00
 80070cc:	40013400 	.word	0x40013400
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800
 80070dc:	40015000 	.word	0x40015000

080070e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800710e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	051b      	lsls	r3, r3, #20
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a1a      	ldr	r2, [pc, #104]	; (80071a0 <TIM_OC6_SetConfig+0xc0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <TIM_OC6_SetConfig+0x84>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a19      	ldr	r2, [pc, #100]	; (80071a4 <TIM_OC6_SetConfig+0xc4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d00f      	beq.n	8007164 <TIM_OC6_SetConfig+0x84>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <TIM_OC6_SetConfig+0xc8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00b      	beq.n	8007164 <TIM_OC6_SetConfig+0x84>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a17      	ldr	r2, [pc, #92]	; (80071ac <TIM_OC6_SetConfig+0xcc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <TIM_OC6_SetConfig+0x84>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a16      	ldr	r2, [pc, #88]	; (80071b0 <TIM_OC6_SetConfig+0xd0>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_OC6_SetConfig+0x84>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <TIM_OC6_SetConfig+0xd4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d109      	bne.n	8007178 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800716a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40012c00 	.word	0x40012c00
 80071a4:	40013400 	.word	0x40013400
 80071a8:	40014000 	.word	0x40014000
 80071ac:	40014400 	.word	0x40014400
 80071b0:	40014800 	.word	0x40014800
 80071b4:	40015000 	.word	0x40015000

080071b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	f023 0201 	bic.w	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f023 030a 	bic.w	r3, r3, #10
 80071f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007216:	b480      	push	{r7}
 8007218:	b087      	sub	sp, #28
 800721a:	af00      	add	r7, sp, #0
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	f023 0210 	bic.w	r2, r3, #16
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	031b      	lsls	r3, r3, #12
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	621a      	str	r2, [r3, #32]
}
 800726a:	bf00      	nop
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007276:	b480      	push	{r7}
 8007278:	b085      	sub	sp, #20
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800728c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4313      	orrs	r3, r2
 8007294:	f043 0307 	orr.w	r3, r3, #7
 8007298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	609a      	str	r2, [r3, #8]
}
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	021a      	lsls	r2, r3, #8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	609a      	str	r2, [r3, #8]
}
 80072e0:	bf00      	nop
 80072e2:	371c      	adds	r7, #28
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	2201      	movs	r2, #1
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a1a      	ldr	r2, [r3, #32]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	43db      	mvns	r3, r3
 800730e:	401a      	ands	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a1a      	ldr	r2, [r3, #32]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	fa01 f303 	lsl.w	r3, r1, r3
 8007324:	431a      	orrs	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
	...

08007338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800734c:	2302      	movs	r3, #2
 800734e:	e06d      	b.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a30      	ldr	r2, [pc, #192]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d009      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a2f      	ldr	r2, [pc, #188]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d004      	beq.n	800738e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a2d      	ldr	r2, [pc, #180]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d108      	bne.n	80073a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007394:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d01d      	beq.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073cc:	d018      	beq.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d013      	beq.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1a      	ldr	r2, [pc, #104]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00e      	beq.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a15      	ldr	r2, [pc, #84]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d009      	beq.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a16      	ldr	r2, [pc, #88]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d004      	beq.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a11      	ldr	r2, [pc, #68]	; (8007440 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10c      	bne.n	800741a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007406:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	4313      	orrs	r3, r2
 8007410:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40013400 	.word	0x40013400
 8007440:	40015000 	.word	0x40015000
 8007444:	40000400 	.word	0x40000400
 8007448:	40000800 	.word	0x40000800
 800744c:	40014000 	.word	0x40014000

08007450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e040      	b.n	8007520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d106      	bne.n	80074b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7fa fd20 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2224      	movs	r2, #36	; 0x24
 80074b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fbc4 	bl	8007c58 <UART_SetConfig>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e022      	b.n	8007520 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fd8c 	bl	8008000 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fe13 	bl	8008144 <UART_CheckIdleState>
 800751e:	4603      	mov	r3, r0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	; 0x28
 800752c:	af02      	add	r7, sp, #8
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800753c:	2b20      	cmp	r3, #32
 800753e:	d178      	bne.n	8007632 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <HAL_UART_Transmit+0x24>
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e071      	b.n	8007634 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2221      	movs	r2, #33	; 0x21
 800755c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800755e:	f7fa fdc1 	bl	80020e4 <HAL_GetTick>
 8007562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800757c:	d108      	bne.n	8007590 <HAL_UART_Transmit+0x68>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e003      	b.n	8007598 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007598:	e030      	b.n	80075fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2180      	movs	r1, #128	; 0x80
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fe75 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2220      	movs	r2, #32
 80075b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e03c      	b.n	8007634 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10b      	bne.n	80075d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	881a      	ldrh	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075cc:	b292      	uxth	r2, r2
 80075ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	3302      	adds	r3, #2
 80075d4:	61bb      	str	r3, [r7, #24]
 80075d6:	e008      	b.n	80075ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	781a      	ldrb	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	b292      	uxth	r2, r2
 80075e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	3301      	adds	r3, #1
 80075e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1c8      	bne.n	800759a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2200      	movs	r2, #0
 8007610:	2140      	movs	r1, #64	; 0x40
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 fe3e 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e005      	b.n	8007634 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	e000      	b.n	8007634 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007632:	2302      	movs	r3, #2
  }
}
 8007634:	4618      	mov	r0, r3
 8007636:	3720      	adds	r7, #32
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b0ba      	sub	sp, #232	; 0xe8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007662:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007666:	f640 030f 	movw	r3, #2063	; 0x80f
 800766a:	4013      	ands	r3, r2
 800766c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d115      	bne.n	80076a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00f      	beq.n	80076a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 82ab 	beq.w	8007bf0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
      }
      return;
 80076a2:	e2a5      	b.n	8007bf0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 8117 	beq.w	80078dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076be:	4b85      	ldr	r3, [pc, #532]	; (80078d4 <HAL_UART_IRQHandler+0x298>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 810a 	beq.w	80078dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d011      	beq.n	80076f8 <HAL_UART_IRQHandler+0xbc>
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00b      	beq.n	80076f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2201      	movs	r2, #1
 80076e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ee:	f043 0201 	orr.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d011      	beq.n	8007728 <HAL_UART_IRQHandler+0xec>
 8007704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2202      	movs	r2, #2
 8007716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800771e:	f043 0204 	orr.w	r2, r3, #4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d011      	beq.n	8007758 <HAL_UART_IRQHandler+0x11c>
 8007734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2204      	movs	r2, #4
 8007746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774e:	f043 0202 	orr.w	r2, r3, #2
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d017      	beq.n	8007794 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	d105      	bne.n	800777c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007774:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2208      	movs	r2, #8
 8007782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800778a:	f043 0208 	orr.w	r2, r3, #8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800779c:	2b00      	cmp	r3, #0
 800779e:	d012      	beq.n	80077c6 <HAL_UART_IRQHandler+0x18a>
 80077a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00c      	beq.n	80077c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077bc:	f043 0220 	orr.w	r2, r3, #32
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 8211 	beq.w	8007bf4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00d      	beq.n	80077fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d007      	beq.n	80077fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007800:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d005      	beq.n	800781e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007816:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04f      	beq.n	80078be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fe66 	bl	80084f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b40      	cmp	r3, #64	; 0x40
 8007830:	d141      	bne.n	80078b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3308      	adds	r3, #8
 8007838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	3308      	adds	r3, #8
 800785a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800785e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800786a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1d9      	bne.n	8007832 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788a:	4a13      	ldr	r2, [pc, #76]	; (80078d8 <HAL_UART_IRQHandler+0x29c>)
 800788c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007892:	4618      	mov	r0, r3
 8007894:	f7fb fe1a 	bl	80034cc <HAL_DMA_Abort_IT>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d017      	beq.n	80078ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ac:	e00f      	b.n	80078ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f9c8 	bl	8007c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	e00b      	b.n	80078ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9c4 	bl	8007c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078bc:	e007      	b.n	80078ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f9c0 	bl	8007c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80078cc:	e192      	b.n	8007bf4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ce:	bf00      	nop
    return;
 80078d0:	e190      	b.n	8007bf4 <HAL_UART_IRQHandler+0x5b8>
 80078d2:	bf00      	nop
 80078d4:	04000120 	.word	0x04000120
 80078d8:	0800879b 	.word	0x0800879b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	f040 814b 	bne.w	8007b7c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ea:	f003 0310 	and.w	r3, r3, #16
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f000 8144 	beq.w	8007b7c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 813d 	beq.w	8007b7c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2210      	movs	r2, #16
 8007908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	f040 80b5 	bne.w	8007a84 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007926:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8164 	beq.w	8007bf8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800793a:	429a      	cmp	r2, r3
 800793c:	f080 815c 	bcs.w	8007bf8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007946:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	2b20      	cmp	r3, #32
 8007952:	f000 8086 	beq.w	8007a62 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800796a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800796e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007984:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800798c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1da      	bne.n	8007956 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079aa:	e853 3f00 	ldrex	r3, [r3]
 80079ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b2:	f023 0301 	bic.w	r3, r3, #1
 80079b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e1      	bne.n	80079a0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a00:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e3      	bne.n	80079dc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a32:	f023 0310 	bic.w	r3, r3, #16
 8007a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e4      	bne.n	8007a22 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fb fcfc 	bl	800345a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7f9 fef1 	bl	8001864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a82:	e0b9      	b.n	8007bf8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80ab 	beq.w	8007bfc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 80a6 	beq.w	8007bfc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ad4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e4      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3308      	adds	r3, #8
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	623b      	str	r3, [r7, #32]
   return(result);
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	f023 0301 	bic.w	r3, r3, #1
 8007afc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b0a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e3      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0310 	bic.w	r3, r3, #16
 8007b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b54:	61fb      	str	r3, [r7, #28]
 8007b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	69b9      	ldr	r1, [r7, #24]
 8007b5a:	69fa      	ldr	r2, [r7, #28]
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	617b      	str	r3, [r7, #20]
   return(result);
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e4      	bne.n	8007b32 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7f9 fe75 	bl	8001864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b7a:	e03f      	b.n	8007bfc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00e      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x56a>
 8007b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fe3b 	bl	800881a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ba4:	e02d      	b.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d01c      	beq.n	8007c00 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
    }
    return;
 8007bce:	e017      	b.n	8007c00 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d012      	beq.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
 8007bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00c      	beq.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fdec 	bl	80087c6 <UART_EndTransmit_IT>
    return;
 8007bee:	e008      	b.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007bf0:	bf00      	nop
 8007bf2:	e006      	b.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007bf4:	bf00      	nop
 8007bf6:	e004      	b.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007bf8:	bf00      	nop
 8007bfa:	e002      	b.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007bfc:	bf00      	nop
 8007bfe:	e000      	b.n	8007c02 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007c00:	bf00      	nop
  }

}
 8007c02:	37e8      	adds	r7, #232	; 0xe8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b92      	ldr	r3, [pc, #584]	; (8007ecc <UART_SetConfig+0x274>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	6979      	ldr	r1, [r7, #20]
 8007c8c:	430b      	orrs	r3, r1
 8007c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68da      	ldr	r2, [r3, #12]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a1b      	ldr	r3, [r3, #32]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a80      	ldr	r2, [pc, #512]	; (8007ed0 <UART_SetConfig+0x278>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d120      	bne.n	8007d16 <UART_SetConfig+0xbe>
 8007cd4:	4b7f      	ldr	r3, [pc, #508]	; (8007ed4 <UART_SetConfig+0x27c>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d817      	bhi.n	8007d10 <UART_SetConfig+0xb8>
 8007ce0:	a201      	add	r2, pc, #4	; (adr r2, 8007ce8 <UART_SetConfig+0x90>)
 8007ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce6:	bf00      	nop
 8007ce8:	08007cf9 	.word	0x08007cf9
 8007cec:	08007d05 	.word	0x08007d05
 8007cf0:	08007d0b 	.word	0x08007d0b
 8007cf4:	08007cff 	.word	0x08007cff
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	77fb      	strb	r3, [r7, #31]
 8007cfc:	e0b5      	b.n	8007e6a <UART_SetConfig+0x212>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	77fb      	strb	r3, [r7, #31]
 8007d02:	e0b2      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d04:	2304      	movs	r3, #4
 8007d06:	77fb      	strb	r3, [r7, #31]
 8007d08:	e0af      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d0a:	2308      	movs	r3, #8
 8007d0c:	77fb      	strb	r3, [r7, #31]
 8007d0e:	e0ac      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d10:	2310      	movs	r3, #16
 8007d12:	77fb      	strb	r3, [r7, #31]
 8007d14:	e0a9      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a6f      	ldr	r2, [pc, #444]	; (8007ed8 <UART_SetConfig+0x280>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d124      	bne.n	8007d6a <UART_SetConfig+0x112>
 8007d20:	4b6c      	ldr	r3, [pc, #432]	; (8007ed4 <UART_SetConfig+0x27c>)
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d2c:	d011      	beq.n	8007d52 <UART_SetConfig+0xfa>
 8007d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d32:	d817      	bhi.n	8007d64 <UART_SetConfig+0x10c>
 8007d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d38:	d011      	beq.n	8007d5e <UART_SetConfig+0x106>
 8007d3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d3e:	d811      	bhi.n	8007d64 <UART_SetConfig+0x10c>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <UART_SetConfig+0xf4>
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d48:	d006      	beq.n	8007d58 <UART_SetConfig+0x100>
 8007d4a:	e00b      	b.n	8007d64 <UART_SetConfig+0x10c>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	77fb      	strb	r3, [r7, #31]
 8007d50:	e08b      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d52:	2302      	movs	r3, #2
 8007d54:	77fb      	strb	r3, [r7, #31]
 8007d56:	e088      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	77fb      	strb	r3, [r7, #31]
 8007d5c:	e085      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d5e:	2308      	movs	r3, #8
 8007d60:	77fb      	strb	r3, [r7, #31]
 8007d62:	e082      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d64:	2310      	movs	r3, #16
 8007d66:	77fb      	strb	r3, [r7, #31]
 8007d68:	e07f      	b.n	8007e6a <UART_SetConfig+0x212>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a5b      	ldr	r2, [pc, #364]	; (8007edc <UART_SetConfig+0x284>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d124      	bne.n	8007dbe <UART_SetConfig+0x166>
 8007d74:	4b57      	ldr	r3, [pc, #348]	; (8007ed4 <UART_SetConfig+0x27c>)
 8007d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007d7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d80:	d011      	beq.n	8007da6 <UART_SetConfig+0x14e>
 8007d82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007d86:	d817      	bhi.n	8007db8 <UART_SetConfig+0x160>
 8007d88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d8c:	d011      	beq.n	8007db2 <UART_SetConfig+0x15a>
 8007d8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d92:	d811      	bhi.n	8007db8 <UART_SetConfig+0x160>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <UART_SetConfig+0x148>
 8007d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d9c:	d006      	beq.n	8007dac <UART_SetConfig+0x154>
 8007d9e:	e00b      	b.n	8007db8 <UART_SetConfig+0x160>
 8007da0:	2300      	movs	r3, #0
 8007da2:	77fb      	strb	r3, [r7, #31]
 8007da4:	e061      	b.n	8007e6a <UART_SetConfig+0x212>
 8007da6:	2302      	movs	r3, #2
 8007da8:	77fb      	strb	r3, [r7, #31]
 8007daa:	e05e      	b.n	8007e6a <UART_SetConfig+0x212>
 8007dac:	2304      	movs	r3, #4
 8007dae:	77fb      	strb	r3, [r7, #31]
 8007db0:	e05b      	b.n	8007e6a <UART_SetConfig+0x212>
 8007db2:	2308      	movs	r3, #8
 8007db4:	77fb      	strb	r3, [r7, #31]
 8007db6:	e058      	b.n	8007e6a <UART_SetConfig+0x212>
 8007db8:	2310      	movs	r3, #16
 8007dba:	77fb      	strb	r3, [r7, #31]
 8007dbc:	e055      	b.n	8007e6a <UART_SetConfig+0x212>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a47      	ldr	r2, [pc, #284]	; (8007ee0 <UART_SetConfig+0x288>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d124      	bne.n	8007e12 <UART_SetConfig+0x1ba>
 8007dc8:	4b42      	ldr	r3, [pc, #264]	; (8007ed4 <UART_SetConfig+0x27c>)
 8007dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dcc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007dd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dd4:	d011      	beq.n	8007dfa <UART_SetConfig+0x1a2>
 8007dd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007dda:	d817      	bhi.n	8007e0c <UART_SetConfig+0x1b4>
 8007ddc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007de0:	d011      	beq.n	8007e06 <UART_SetConfig+0x1ae>
 8007de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007de6:	d811      	bhi.n	8007e0c <UART_SetConfig+0x1b4>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <UART_SetConfig+0x19c>
 8007dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007df0:	d006      	beq.n	8007e00 <UART_SetConfig+0x1a8>
 8007df2:	e00b      	b.n	8007e0c <UART_SetConfig+0x1b4>
 8007df4:	2300      	movs	r3, #0
 8007df6:	77fb      	strb	r3, [r7, #31]
 8007df8:	e037      	b.n	8007e6a <UART_SetConfig+0x212>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	77fb      	strb	r3, [r7, #31]
 8007dfe:	e034      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e00:	2304      	movs	r3, #4
 8007e02:	77fb      	strb	r3, [r7, #31]
 8007e04:	e031      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e06:	2308      	movs	r3, #8
 8007e08:	77fb      	strb	r3, [r7, #31]
 8007e0a:	e02e      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e0c:	2310      	movs	r3, #16
 8007e0e:	77fb      	strb	r3, [r7, #31]
 8007e10:	e02b      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a33      	ldr	r2, [pc, #204]	; (8007ee4 <UART_SetConfig+0x28c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d124      	bne.n	8007e66 <UART_SetConfig+0x20e>
 8007e1c:	4b2d      	ldr	r3, [pc, #180]	; (8007ed4 <UART_SetConfig+0x27c>)
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007e24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e28:	d011      	beq.n	8007e4e <UART_SetConfig+0x1f6>
 8007e2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e2e:	d817      	bhi.n	8007e60 <UART_SetConfig+0x208>
 8007e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e34:	d011      	beq.n	8007e5a <UART_SetConfig+0x202>
 8007e36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e3a:	d811      	bhi.n	8007e60 <UART_SetConfig+0x208>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <UART_SetConfig+0x1f0>
 8007e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e44:	d006      	beq.n	8007e54 <UART_SetConfig+0x1fc>
 8007e46:	e00b      	b.n	8007e60 <UART_SetConfig+0x208>
 8007e48:	2300      	movs	r3, #0
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e00d      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	77fb      	strb	r3, [r7, #31]
 8007e52:	e00a      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e54:	2304      	movs	r3, #4
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e007      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	77fb      	strb	r3, [r7, #31]
 8007e5e:	e004      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e60:	2310      	movs	r3, #16
 8007e62:	77fb      	strb	r3, [r7, #31]
 8007e64:	e001      	b.n	8007e6a <UART_SetConfig+0x212>
 8007e66:	2310      	movs	r3, #16
 8007e68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69db      	ldr	r3, [r3, #28]
 8007e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e72:	d16b      	bne.n	8007f4c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007e74:	7ffb      	ldrb	r3, [r7, #31]
 8007e76:	2b08      	cmp	r3, #8
 8007e78:	d838      	bhi.n	8007eec <UART_SetConfig+0x294>
 8007e7a:	a201      	add	r2, pc, #4	; (adr r2, 8007e80 <UART_SetConfig+0x228>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ead 	.word	0x08007ead
 8007e88:	08007eb5 	.word	0x08007eb5
 8007e8c:	08007eed 	.word	0x08007eed
 8007e90:	08007ebb 	.word	0x08007ebb
 8007e94:	08007eed 	.word	0x08007eed
 8007e98:	08007eed 	.word	0x08007eed
 8007e9c:	08007eed 	.word	0x08007eed
 8007ea0:	08007ec3 	.word	0x08007ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea4:	f7fd fc8a 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8007ea8:	61b8      	str	r0, [r7, #24]
        break;
 8007eaa:	e024      	b.n	8007ef6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eac:	f7fd fca8 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 8007eb0:	61b8      	str	r0, [r7, #24]
        break;
 8007eb2:	e020      	b.n	8007ef6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb4:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <UART_SetConfig+0x290>)
 8007eb6:	61bb      	str	r3, [r7, #24]
        break;
 8007eb8:	e01d      	b.n	8007ef6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eba:	f7fd fc09 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 8007ebe:	61b8      	str	r0, [r7, #24]
        break;
 8007ec0:	e019      	b.n	8007ef6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec6:	61bb      	str	r3, [r7, #24]
        break;
 8007ec8:	e015      	b.n	8007ef6 <UART_SetConfig+0x29e>
 8007eca:	bf00      	nop
 8007ecc:	efff69f3 	.word	0xefff69f3
 8007ed0:	40013800 	.word	0x40013800
 8007ed4:	40021000 	.word	0x40021000
 8007ed8:	40004400 	.word	0x40004400
 8007edc:	40004800 	.word	0x40004800
 8007ee0:	40004c00 	.word	0x40004c00
 8007ee4:	40005000 	.word	0x40005000
 8007ee8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	77bb      	strb	r3, [r7, #30]
        break;
 8007ef4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d073      	beq.n	8007fe4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	005a      	lsls	r2, r3, #1
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	441a      	add	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b0f      	cmp	r3, #15
 8007f16:	d916      	bls.n	8007f46 <UART_SetConfig+0x2ee>
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1e:	d212      	bcs.n	8007f46 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f023 030f 	bic.w	r3, r3, #15
 8007f28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	89fb      	ldrh	r3, [r7, #14]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	89fa      	ldrh	r2, [r7, #14]
 8007f42:	60da      	str	r2, [r3, #12]
 8007f44:	e04e      	b.n	8007fe4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	77bb      	strb	r3, [r7, #30]
 8007f4a:	e04b      	b.n	8007fe4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f4c:	7ffb      	ldrb	r3, [r7, #31]
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d827      	bhi.n	8007fa2 <UART_SetConfig+0x34a>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <UART_SetConfig+0x300>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f85 	.word	0x08007f85
 8007f60:	08007f8d 	.word	0x08007f8d
 8007f64:	08007fa3 	.word	0x08007fa3
 8007f68:	08007f93 	.word	0x08007f93
 8007f6c:	08007fa3 	.word	0x08007fa3
 8007f70:	08007fa3 	.word	0x08007fa3
 8007f74:	08007fa3 	.word	0x08007fa3
 8007f78:	08007f9b 	.word	0x08007f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f7c:	f7fd fc1e 	bl	80057bc <HAL_RCC_GetPCLK1Freq>
 8007f80:	61b8      	str	r0, [r7, #24]
        break;
 8007f82:	e013      	b.n	8007fac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f84:	f7fd fc3c 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 8007f88:	61b8      	str	r0, [r7, #24]
        break;
 8007f8a:	e00f      	b.n	8007fac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f8c:	4b1b      	ldr	r3, [pc, #108]	; (8007ffc <UART_SetConfig+0x3a4>)
 8007f8e:	61bb      	str	r3, [r7, #24]
        break;
 8007f90:	e00c      	b.n	8007fac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f92:	f7fd fb9d 	bl	80056d0 <HAL_RCC_GetSysClockFreq>
 8007f96:	61b8      	str	r0, [r7, #24]
        break;
 8007f98:	e008      	b.n	8007fac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f9e:	61bb      	str	r3, [r7, #24]
        break;
 8007fa0:	e004      	b.n	8007fac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	77bb      	strb	r3, [r7, #30]
        break;
 8007faa:	bf00      	nop
    }

    if (pclk != 0U)
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d018      	beq.n	8007fe4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	085a      	lsrs	r2, r3, #1
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	441a      	add	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	2b0f      	cmp	r3, #15
 8007fca:	d909      	bls.n	8007fe0 <UART_SetConfig+0x388>
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd2:	d205      	bcs.n	8007fe0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	60da      	str	r2, [r3, #12]
 8007fde:	e001      	b.n	8007fe4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ff0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3720      	adds	r7, #32
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	007a1200 	.word	0x007a1200

08008000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00a      	beq.n	800802a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00a      	beq.n	800804c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01a      	beq.n	8008116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fe:	d10a      	bne.n	8008116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	605a      	str	r2, [r3, #4]
  }
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b098      	sub	sp, #96	; 0x60
 8008148:	af02      	add	r7, sp, #8
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008154:	f7f9 ffc6 	bl	80020e4 <HAL_GetTick>
 8008158:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b08      	cmp	r3, #8
 8008166:	d12e      	bne.n	80081c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008170:	2200      	movs	r2, #0
 8008172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f88c 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d021      	beq.n	80081c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008196:	653b      	str	r3, [r7, #80]	; 0x50
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081a0:	647b      	str	r3, [r7, #68]	; 0x44
 80081a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e6      	bne.n	8008182 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e062      	b.n	800828c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b04      	cmp	r3, #4
 80081d2:	d149      	bne.n	8008268 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081dc:	2200      	movs	r2, #0
 80081de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f856 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d03c      	beq.n	8008268 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	623b      	str	r3, [r7, #32]
   return(result);
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820c:	633b      	str	r3, [r7, #48]	; 0x30
 800820e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e6      	bne.n	80081ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3308      	adds	r3, #8
 8008226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0301 	bic.w	r3, r3, #1
 8008236:	64bb      	str	r3, [r7, #72]	; 0x48
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3308      	adds	r3, #8
 800823e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008240:	61fa      	str	r2, [r7, #28]
 8008242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	69b9      	ldr	r1, [r7, #24]
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	617b      	str	r3, [r7, #20]
   return(result);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e5      	bne.n	8008220 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e011      	b.n	800828c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2220      	movs	r2, #32
 800826c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3758      	adds	r7, #88	; 0x58
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	4613      	mov	r3, r2
 80082a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a4:	e049      	b.n	800833a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d045      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ae:	f7f9 ff19 	bl	80020e4 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d302      	bcc.n	80082c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e048      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d031      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d110      	bne.n	8008306 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2208      	movs	r2, #8
 80082ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f8ff 	bl	80084f0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2208      	movs	r2, #8
 80082f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e029      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008314:	d111      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800831e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f8e5 	bl	80084f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e00f      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4013      	ands	r3, r2
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	bf0c      	ite	eq
 800834a:	2301      	moveq	r3, #1
 800834c:	2300      	movne	r3, #0
 800834e:	b2db      	uxtb	r3, r3
 8008350:	461a      	mov	r2, r3
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	429a      	cmp	r2, r3
 8008356:	d0a6      	beq.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b096      	sub	sp, #88	; 0x58
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2222      	movs	r2, #34	; 0x22
 800838c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008394:	2b00      	cmp	r3, #0
 8008396:	d028      	beq.n	80083ea <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800839c:	4a3e      	ldr	r2, [pc, #248]	; (8008498 <UART_Start_Receive_DMA+0x134>)
 800839e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083a4:	4a3d      	ldr	r2, [pc, #244]	; (800849c <UART_Start_Receive_DMA+0x138>)
 80083a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ac:	4a3c      	ldr	r2, [pc, #240]	; (80084a0 <UART_Start_Receive_DMA+0x13c>)
 80083ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083b4:	2200      	movs	r2, #0
 80083b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3324      	adds	r3, #36	; 0x24
 80083c2:	4619      	mov	r1, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c8:	461a      	mov	r2, r3
 80083ca:	88fb      	ldrh	r3, [r7, #6]
 80083cc:	f7fa ffe6 	bl	800339c <HAL_DMA_Start_IT>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2210      	movs	r2, #16
 80083da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e051      	b.n	800848e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d018      	beq.n	8008424 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008406:	657b      	str	r3, [r7, #84]	; 0x54
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008410:	64bb      	str	r3, [r7, #72]	; 0x48
 8008412:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008416:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800841e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e6      	bne.n	80083f2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	653b      	str	r3, [r7, #80]	; 0x50
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008444:	637a      	str	r2, [r7, #52]	; 0x34
 8008446:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800844a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e5      	bne.n	8008424 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	3308      	adds	r3, #8
 800845e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	e853 3f00 	ldrex	r3, [r3]
 8008466:	613b      	str	r3, [r7, #16]
   return(result);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800846e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3308      	adds	r3, #8
 8008476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008478:	623a      	str	r2, [r7, #32]
 800847a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	69f9      	ldr	r1, [r7, #28]
 800847e:	6a3a      	ldr	r2, [r7, #32]
 8008480:	e841 2300 	strex	r3, r2, [r1]
 8008484:	61bb      	str	r3, [r7, #24]
   return(result);
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e5      	bne.n	8008458 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3758      	adds	r7, #88	; 0x58
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	080085b9 	.word	0x080085b9
 800849c:	080086df 	.word	0x080086df
 80084a0:	0800871d 	.word	0x0800871d

080084a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b089      	sub	sp, #36	; 0x24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	6979      	ldr	r1, [r7, #20]
 80084d0:	69ba      	ldr	r2, [r7, #24]
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	613b      	str	r3, [r7, #16]
   return(result);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e6      	bne.n	80084ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2220      	movs	r2, #32
 80084e2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80084e4:	bf00      	nop
 80084e6:	3724      	adds	r7, #36	; 0x24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b095      	sub	sp, #84	; 0x54
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800850c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008516:	643b      	str	r3, [r7, #64]	; 0x40
 8008518:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800851c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e6      	bne.n	80084f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	61fb      	str	r3, [r7, #28]
   return(result);
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	f023 0301 	bic.w	r3, r3, #1
 8008540:	64bb      	str	r3, [r7, #72]	; 0x48
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800854a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800854c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008552:	e841 2300 	strex	r3, r2, [r1]
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1e5      	bne.n	800852a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008562:	2b01      	cmp	r3, #1
 8008564:	d118      	bne.n	8008598 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	60bb      	str	r3, [r7, #8]
   return(result);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f023 0310 	bic.w	r3, r3, #16
 800857a:	647b      	str	r3, [r7, #68]	; 0x44
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008588:	6979      	ldr	r1, [r7, #20]
 800858a:	69ba      	ldr	r2, [r7, #24]
 800858c:	e841 2300 	strex	r3, r2, [r1]
 8008590:	613b      	str	r3, [r7, #16]
   return(result);
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1e6      	bne.n	8008566 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80085ac:	bf00      	nop
 80085ae:	3754      	adds	r7, #84	; 0x54
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b09c      	sub	sp, #112	; 0x70
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	d071      	beq.n	80086b2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80085ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80085f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e6      	bne.n	80085d6 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	667b      	str	r3, [r7, #100]	; 0x64
 8008620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008628:	647a      	str	r2, [r7, #68]	; 0x44
 800862a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800862e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	623b      	str	r3, [r7, #32]
   return(result);
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008652:	663b      	str	r3, [r7, #96]	; 0x60
 8008654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3308      	adds	r3, #8
 800865a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800865c:	633a      	str	r2, [r7, #48]	; 0x30
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008672:	2220      	movs	r2, #32
 8008674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867c:	2b01      	cmp	r3, #1
 800867e:	d118      	bne.n	80086b2 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	60fb      	str	r3, [r7, #12]
   return(result);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f023 0310 	bic.w	r3, r3, #16
 8008694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	69b9      	ldr	r1, [r7, #24]
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	617b      	str	r3, [r7, #20]
   return(result);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e6      	bne.n	8008680 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b4:	2200      	movs	r2, #0
 80086b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d107      	bne.n	80086d0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086c6:	4619      	mov	r1, r3
 80086c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ca:	f7f9 f8cb 	bl	8001864 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086ce:	e002      	b.n	80086d6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80086d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086d2:	f7ff faa3 	bl	8007c1c <HAL_UART_RxCpltCallback>
}
 80086d6:	bf00      	nop
 80086d8:	3770      	adds	r7, #112	; 0x70
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d109      	bne.n	800870e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	b29b      	uxth	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7f9 f8ac 	bl	8001864 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800870c:	e002      	b.n	8008714 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff fa8e 	bl	8007c30 <HAL_UART_RxHalfCpltCallback>
}
 8008714:	bf00      	nop
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008736:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d109      	bne.n	800875a <UART_DMAError+0x3e>
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b21      	cmp	r3, #33	; 0x21
 800874a:	d106      	bne.n	800875a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008754:	6978      	ldr	r0, [r7, #20]
 8008756:	f7ff fea5 	bl	80084a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008764:	2b40      	cmp	r3, #64	; 0x40
 8008766:	d109      	bne.n	800877c <UART_DMAError+0x60>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b22      	cmp	r3, #34	; 0x22
 800876c:	d106      	bne.n	800877c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008776:	6978      	ldr	r0, [r7, #20]
 8008778:	f7ff feba 	bl	80084f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008782:	f043 0210 	orr.w	r2, r3, #16
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878c:	6978      	ldr	r0, [r7, #20]
 800878e:	f7ff fa59 	bl	8007c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff fa43 	bl	8007c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b088      	sub	sp, #32
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	60bb      	str	r3, [r7, #8]
   return(result);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	613b      	str	r3, [r7, #16]
   return(result);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e6      	bne.n	80087ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff f9fb 	bl	8007c08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008812:	bf00      	nop
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b08c      	sub	sp, #48	; 0x30
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	4613      	mov	r3, r2
 800883a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008842:	2b20      	cmp	r3, #32
 8008844:	d142      	bne.n	80088cc <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d002      	beq.n	8008852 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e03b      	b.n	80088ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008862:	88fb      	ldrh	r3, [r7, #6]
 8008864:	461a      	mov	r2, r3
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f7ff fd7b 	bl	8008364 <UART_Start_Receive_DMA>
 800886e:	4603      	mov	r3, r0
 8008870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008878:	2b00      	cmp	r3, #0
 800887a:	d124      	bne.n	80088c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008880:	2b01      	cmp	r3, #1
 8008882:	d11d      	bne.n	80088c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2210      	movs	r2, #16
 800888a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	617b      	str	r3, [r7, #20]
   return(result);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f043 0310 	orr.w	r3, r3, #16
 80088a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	627b      	str	r3, [r7, #36]	; 0x24
 80088ac:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6a39      	ldr	r1, [r7, #32]
 80088b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80088be:	e002      	b.n	80088c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80088c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088ca:	e000      	b.n	80088ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80088cc:	2302      	movs	r3, #2
  }
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3730      	adds	r7, #48	; 0x30
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <atoi>:
 80088d6:	220a      	movs	r2, #10
 80088d8:	2100      	movs	r1, #0
 80088da:	f000 b883 	b.w	80089e4 <strtol>
	...

080088e0 <_strtol_l.constprop.0>:
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e6:	d001      	beq.n	80088ec <_strtol_l.constprop.0+0xc>
 80088e8:	2b24      	cmp	r3, #36	; 0x24
 80088ea:	d906      	bls.n	80088fa <_strtol_l.constprop.0+0x1a>
 80088ec:	f000 f8ac 	bl	8008a48 <__errno>
 80088f0:	2316      	movs	r3, #22
 80088f2:	6003      	str	r3, [r0, #0]
 80088f4:	2000      	movs	r0, #0
 80088f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80089e0 <_strtol_l.constprop.0+0x100>
 80088fe:	460d      	mov	r5, r1
 8008900:	462e      	mov	r6, r5
 8008902:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008906:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800890a:	f017 0708 	ands.w	r7, r7, #8
 800890e:	d1f7      	bne.n	8008900 <_strtol_l.constprop.0+0x20>
 8008910:	2c2d      	cmp	r4, #45	; 0x2d
 8008912:	d132      	bne.n	800897a <_strtol_l.constprop.0+0x9a>
 8008914:	782c      	ldrb	r4, [r5, #0]
 8008916:	2701      	movs	r7, #1
 8008918:	1cb5      	adds	r5, r6, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d05b      	beq.n	80089d6 <_strtol_l.constprop.0+0xf6>
 800891e:	2b10      	cmp	r3, #16
 8008920:	d109      	bne.n	8008936 <_strtol_l.constprop.0+0x56>
 8008922:	2c30      	cmp	r4, #48	; 0x30
 8008924:	d107      	bne.n	8008936 <_strtol_l.constprop.0+0x56>
 8008926:	782c      	ldrb	r4, [r5, #0]
 8008928:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800892c:	2c58      	cmp	r4, #88	; 0x58
 800892e:	d14d      	bne.n	80089cc <_strtol_l.constprop.0+0xec>
 8008930:	786c      	ldrb	r4, [r5, #1]
 8008932:	2310      	movs	r3, #16
 8008934:	3502      	adds	r5, #2
 8008936:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800893a:	f108 38ff 	add.w	r8, r8, #4294967295
 800893e:	f04f 0e00 	mov.w	lr, #0
 8008942:	fbb8 f9f3 	udiv	r9, r8, r3
 8008946:	4676      	mov	r6, lr
 8008948:	fb03 8a19 	mls	sl, r3, r9, r8
 800894c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008950:	f1bc 0f09 	cmp.w	ip, #9
 8008954:	d816      	bhi.n	8008984 <_strtol_l.constprop.0+0xa4>
 8008956:	4664      	mov	r4, ip
 8008958:	42a3      	cmp	r3, r4
 800895a:	dd24      	ble.n	80089a6 <_strtol_l.constprop.0+0xc6>
 800895c:	f1be 3fff 	cmp.w	lr, #4294967295
 8008960:	d008      	beq.n	8008974 <_strtol_l.constprop.0+0x94>
 8008962:	45b1      	cmp	r9, r6
 8008964:	d31c      	bcc.n	80089a0 <_strtol_l.constprop.0+0xc0>
 8008966:	d101      	bne.n	800896c <_strtol_l.constprop.0+0x8c>
 8008968:	45a2      	cmp	sl, r4
 800896a:	db19      	blt.n	80089a0 <_strtol_l.constprop.0+0xc0>
 800896c:	fb06 4603 	mla	r6, r6, r3, r4
 8008970:	f04f 0e01 	mov.w	lr, #1
 8008974:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008978:	e7e8      	b.n	800894c <_strtol_l.constprop.0+0x6c>
 800897a:	2c2b      	cmp	r4, #43	; 0x2b
 800897c:	bf04      	itt	eq
 800897e:	782c      	ldrbeq	r4, [r5, #0]
 8008980:	1cb5      	addeq	r5, r6, #2
 8008982:	e7ca      	b.n	800891a <_strtol_l.constprop.0+0x3a>
 8008984:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008988:	f1bc 0f19 	cmp.w	ip, #25
 800898c:	d801      	bhi.n	8008992 <_strtol_l.constprop.0+0xb2>
 800898e:	3c37      	subs	r4, #55	; 0x37
 8008990:	e7e2      	b.n	8008958 <_strtol_l.constprop.0+0x78>
 8008992:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008996:	f1bc 0f19 	cmp.w	ip, #25
 800899a:	d804      	bhi.n	80089a6 <_strtol_l.constprop.0+0xc6>
 800899c:	3c57      	subs	r4, #87	; 0x57
 800899e:	e7db      	b.n	8008958 <_strtol_l.constprop.0+0x78>
 80089a0:	f04f 3eff 	mov.w	lr, #4294967295
 80089a4:	e7e6      	b.n	8008974 <_strtol_l.constprop.0+0x94>
 80089a6:	f1be 3fff 	cmp.w	lr, #4294967295
 80089aa:	d105      	bne.n	80089b8 <_strtol_l.constprop.0+0xd8>
 80089ac:	2322      	movs	r3, #34	; 0x22
 80089ae:	6003      	str	r3, [r0, #0]
 80089b0:	4646      	mov	r6, r8
 80089b2:	b942      	cbnz	r2, 80089c6 <_strtol_l.constprop.0+0xe6>
 80089b4:	4630      	mov	r0, r6
 80089b6:	e79e      	b.n	80088f6 <_strtol_l.constprop.0+0x16>
 80089b8:	b107      	cbz	r7, 80089bc <_strtol_l.constprop.0+0xdc>
 80089ba:	4276      	negs	r6, r6
 80089bc:	2a00      	cmp	r2, #0
 80089be:	d0f9      	beq.n	80089b4 <_strtol_l.constprop.0+0xd4>
 80089c0:	f1be 0f00 	cmp.w	lr, #0
 80089c4:	d000      	beq.n	80089c8 <_strtol_l.constprop.0+0xe8>
 80089c6:	1e69      	subs	r1, r5, #1
 80089c8:	6011      	str	r1, [r2, #0]
 80089ca:	e7f3      	b.n	80089b4 <_strtol_l.constprop.0+0xd4>
 80089cc:	2430      	movs	r4, #48	; 0x30
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1b1      	bne.n	8008936 <_strtol_l.constprop.0+0x56>
 80089d2:	2308      	movs	r3, #8
 80089d4:	e7af      	b.n	8008936 <_strtol_l.constprop.0+0x56>
 80089d6:	2c30      	cmp	r4, #48	; 0x30
 80089d8:	d0a5      	beq.n	8008926 <_strtol_l.constprop.0+0x46>
 80089da:	230a      	movs	r3, #10
 80089dc:	e7ab      	b.n	8008936 <_strtol_l.constprop.0+0x56>
 80089de:	bf00      	nop
 80089e0:	08009435 	.word	0x08009435

080089e4 <strtol>:
 80089e4:	4613      	mov	r3, r2
 80089e6:	460a      	mov	r2, r1
 80089e8:	4601      	mov	r1, r0
 80089ea:	4802      	ldr	r0, [pc, #8]	; (80089f4 <strtol+0x10>)
 80089ec:	6800      	ldr	r0, [r0, #0]
 80089ee:	f7ff bf77 	b.w	80088e0 <_strtol_l.constprop.0>
 80089f2:	bf00      	nop
 80089f4:	20000058 	.word	0x20000058

080089f8 <siprintf>:
 80089f8:	b40e      	push	{r1, r2, r3}
 80089fa:	b500      	push	{lr}
 80089fc:	b09c      	sub	sp, #112	; 0x70
 80089fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008a00:	9002      	str	r0, [sp, #8]
 8008a02:	9006      	str	r0, [sp, #24]
 8008a04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a08:	4809      	ldr	r0, [pc, #36]	; (8008a30 <siprintf+0x38>)
 8008a0a:	9107      	str	r1, [sp, #28]
 8008a0c:	9104      	str	r1, [sp, #16]
 8008a0e:	4909      	ldr	r1, [pc, #36]	; (8008a34 <siprintf+0x3c>)
 8008a10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a14:	9105      	str	r1, [sp, #20]
 8008a16:	6800      	ldr	r0, [r0, #0]
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	a902      	add	r1, sp, #8
 8008a1c:	f000 f992 	bl	8008d44 <_svfiprintf_r>
 8008a20:	9b02      	ldr	r3, [sp, #8]
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	b01c      	add	sp, #112	; 0x70
 8008a28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a2c:	b003      	add	sp, #12
 8008a2e:	4770      	bx	lr
 8008a30:	20000058 	.word	0x20000058
 8008a34:	ffff0208 	.word	0xffff0208

08008a38 <memset>:
 8008a38:	4402      	add	r2, r0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d100      	bne.n	8008a42 <memset+0xa>
 8008a40:	4770      	bx	lr
 8008a42:	f803 1b01 	strb.w	r1, [r3], #1
 8008a46:	e7f9      	b.n	8008a3c <memset+0x4>

08008a48 <__errno>:
 8008a48:	4b01      	ldr	r3, [pc, #4]	; (8008a50 <__errno+0x8>)
 8008a4a:	6818      	ldr	r0, [r3, #0]
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	20000058 	.word	0x20000058

08008a54 <__libc_init_array>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4d0d      	ldr	r5, [pc, #52]	; (8008a8c <__libc_init_array+0x38>)
 8008a58:	4c0d      	ldr	r4, [pc, #52]	; (8008a90 <__libc_init_array+0x3c>)
 8008a5a:	1b64      	subs	r4, r4, r5
 8008a5c:	10a4      	asrs	r4, r4, #2
 8008a5e:	2600      	movs	r6, #0
 8008a60:	42a6      	cmp	r6, r4
 8008a62:	d109      	bne.n	8008a78 <__libc_init_array+0x24>
 8008a64:	4d0b      	ldr	r5, [pc, #44]	; (8008a94 <__libc_init_array+0x40>)
 8008a66:	4c0c      	ldr	r4, [pc, #48]	; (8008a98 <__libc_init_array+0x44>)
 8008a68:	f000 fc6a 	bl	8009340 <_init>
 8008a6c:	1b64      	subs	r4, r4, r5
 8008a6e:	10a4      	asrs	r4, r4, #2
 8008a70:	2600      	movs	r6, #0
 8008a72:	42a6      	cmp	r6, r4
 8008a74:	d105      	bne.n	8008a82 <__libc_init_array+0x2e>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7c:	4798      	blx	r3
 8008a7e:	3601      	adds	r6, #1
 8008a80:	e7ee      	b.n	8008a60 <__libc_init_array+0xc>
 8008a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a86:	4798      	blx	r3
 8008a88:	3601      	adds	r6, #1
 8008a8a:	e7f2      	b.n	8008a72 <__libc_init_array+0x1e>
 8008a8c:	08009568 	.word	0x08009568
 8008a90:	08009568 	.word	0x08009568
 8008a94:	08009568 	.word	0x08009568
 8008a98:	0800956c 	.word	0x0800956c

08008a9c <__retarget_lock_acquire_recursive>:
 8008a9c:	4770      	bx	lr

08008a9e <__retarget_lock_release_recursive>:
 8008a9e:	4770      	bx	lr

08008aa0 <_free_r>:
 8008aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aa2:	2900      	cmp	r1, #0
 8008aa4:	d044      	beq.n	8008b30 <_free_r+0x90>
 8008aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aaa:	9001      	str	r0, [sp, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f1a1 0404 	sub.w	r4, r1, #4
 8008ab2:	bfb8      	it	lt
 8008ab4:	18e4      	addlt	r4, r4, r3
 8008ab6:	f000 f8df 	bl	8008c78 <__malloc_lock>
 8008aba:	4a1e      	ldr	r2, [pc, #120]	; (8008b34 <_free_r+0x94>)
 8008abc:	9801      	ldr	r0, [sp, #4]
 8008abe:	6813      	ldr	r3, [r2, #0]
 8008ac0:	b933      	cbnz	r3, 8008ad0 <_free_r+0x30>
 8008ac2:	6063      	str	r3, [r4, #4]
 8008ac4:	6014      	str	r4, [r2, #0]
 8008ac6:	b003      	add	sp, #12
 8008ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008acc:	f000 b8da 	b.w	8008c84 <__malloc_unlock>
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	d908      	bls.n	8008ae6 <_free_r+0x46>
 8008ad4:	6825      	ldr	r5, [r4, #0]
 8008ad6:	1961      	adds	r1, r4, r5
 8008ad8:	428b      	cmp	r3, r1
 8008ada:	bf01      	itttt	eq
 8008adc:	6819      	ldreq	r1, [r3, #0]
 8008ade:	685b      	ldreq	r3, [r3, #4]
 8008ae0:	1949      	addeq	r1, r1, r5
 8008ae2:	6021      	streq	r1, [r4, #0]
 8008ae4:	e7ed      	b.n	8008ac2 <_free_r+0x22>
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	b10b      	cbz	r3, 8008af0 <_free_r+0x50>
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	d9fa      	bls.n	8008ae6 <_free_r+0x46>
 8008af0:	6811      	ldr	r1, [r2, #0]
 8008af2:	1855      	adds	r5, r2, r1
 8008af4:	42a5      	cmp	r5, r4
 8008af6:	d10b      	bne.n	8008b10 <_free_r+0x70>
 8008af8:	6824      	ldr	r4, [r4, #0]
 8008afa:	4421      	add	r1, r4
 8008afc:	1854      	adds	r4, r2, r1
 8008afe:	42a3      	cmp	r3, r4
 8008b00:	6011      	str	r1, [r2, #0]
 8008b02:	d1e0      	bne.n	8008ac6 <_free_r+0x26>
 8008b04:	681c      	ldr	r4, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	6053      	str	r3, [r2, #4]
 8008b0a:	440c      	add	r4, r1
 8008b0c:	6014      	str	r4, [r2, #0]
 8008b0e:	e7da      	b.n	8008ac6 <_free_r+0x26>
 8008b10:	d902      	bls.n	8008b18 <_free_r+0x78>
 8008b12:	230c      	movs	r3, #12
 8008b14:	6003      	str	r3, [r0, #0]
 8008b16:	e7d6      	b.n	8008ac6 <_free_r+0x26>
 8008b18:	6825      	ldr	r5, [r4, #0]
 8008b1a:	1961      	adds	r1, r4, r5
 8008b1c:	428b      	cmp	r3, r1
 8008b1e:	bf04      	itt	eq
 8008b20:	6819      	ldreq	r1, [r3, #0]
 8008b22:	685b      	ldreq	r3, [r3, #4]
 8008b24:	6063      	str	r3, [r4, #4]
 8008b26:	bf04      	itt	eq
 8008b28:	1949      	addeq	r1, r1, r5
 8008b2a:	6021      	streq	r1, [r4, #0]
 8008b2c:	6054      	str	r4, [r2, #4]
 8008b2e:	e7ca      	b.n	8008ac6 <_free_r+0x26>
 8008b30:	b003      	add	sp, #12
 8008b32:	bd30      	pop	{r4, r5, pc}
 8008b34:	20000508 	.word	0x20000508

08008b38 <sbrk_aligned>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	4e0e      	ldr	r6, [pc, #56]	; (8008b74 <sbrk_aligned+0x3c>)
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	6831      	ldr	r1, [r6, #0]
 8008b40:	4605      	mov	r5, r0
 8008b42:	b911      	cbnz	r1, 8008b4a <sbrk_aligned+0x12>
 8008b44:	f000 fba6 	bl	8009294 <_sbrk_r>
 8008b48:	6030      	str	r0, [r6, #0]
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f000 fba1 	bl	8009294 <_sbrk_r>
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	d00a      	beq.n	8008b6c <sbrk_aligned+0x34>
 8008b56:	1cc4      	adds	r4, r0, #3
 8008b58:	f024 0403 	bic.w	r4, r4, #3
 8008b5c:	42a0      	cmp	r0, r4
 8008b5e:	d007      	beq.n	8008b70 <sbrk_aligned+0x38>
 8008b60:	1a21      	subs	r1, r4, r0
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 fb96 	bl	8009294 <_sbrk_r>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d101      	bne.n	8008b70 <sbrk_aligned+0x38>
 8008b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b70:	4620      	mov	r0, r4
 8008b72:	bd70      	pop	{r4, r5, r6, pc}
 8008b74:	2000050c 	.word	0x2000050c

08008b78 <_malloc_r>:
 8008b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	1ccd      	adds	r5, r1, #3
 8008b7e:	f025 0503 	bic.w	r5, r5, #3
 8008b82:	3508      	adds	r5, #8
 8008b84:	2d0c      	cmp	r5, #12
 8008b86:	bf38      	it	cc
 8008b88:	250c      	movcc	r5, #12
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	db01      	blt.n	8008b94 <_malloc_r+0x1c>
 8008b90:	42a9      	cmp	r1, r5
 8008b92:	d905      	bls.n	8008ba0 <_malloc_r+0x28>
 8008b94:	230c      	movs	r3, #12
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	2600      	movs	r6, #0
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c74 <_malloc_r+0xfc>
 8008ba4:	f000 f868 	bl	8008c78 <__malloc_lock>
 8008ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bac:	461c      	mov	r4, r3
 8008bae:	bb5c      	cbnz	r4, 8008c08 <_malloc_r+0x90>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	f7ff ffc0 	bl	8008b38 <sbrk_aligned>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	4604      	mov	r4, r0
 8008bbc:	d155      	bne.n	8008c6a <_malloc_r+0xf2>
 8008bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8008bc2:	4626      	mov	r6, r4
 8008bc4:	2e00      	cmp	r6, #0
 8008bc6:	d145      	bne.n	8008c54 <_malloc_r+0xdc>
 8008bc8:	2c00      	cmp	r4, #0
 8008bca:	d048      	beq.n	8008c5e <_malloc_r+0xe6>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	4631      	mov	r1, r6
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	eb04 0903 	add.w	r9, r4, r3
 8008bd6:	f000 fb5d 	bl	8009294 <_sbrk_r>
 8008bda:	4581      	cmp	r9, r0
 8008bdc:	d13f      	bne.n	8008c5e <_malloc_r+0xe6>
 8008bde:	6821      	ldr	r1, [r4, #0]
 8008be0:	1a6d      	subs	r5, r5, r1
 8008be2:	4629      	mov	r1, r5
 8008be4:	4638      	mov	r0, r7
 8008be6:	f7ff ffa7 	bl	8008b38 <sbrk_aligned>
 8008bea:	3001      	adds	r0, #1
 8008bec:	d037      	beq.n	8008c5e <_malloc_r+0xe6>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	442b      	add	r3, r5
 8008bf2:	6023      	str	r3, [r4, #0]
 8008bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d038      	beq.n	8008c6e <_malloc_r+0xf6>
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	42a2      	cmp	r2, r4
 8008c00:	d12b      	bne.n	8008c5a <_malloc_r+0xe2>
 8008c02:	2200      	movs	r2, #0
 8008c04:	605a      	str	r2, [r3, #4]
 8008c06:	e00f      	b.n	8008c28 <_malloc_r+0xb0>
 8008c08:	6822      	ldr	r2, [r4, #0]
 8008c0a:	1b52      	subs	r2, r2, r5
 8008c0c:	d41f      	bmi.n	8008c4e <_malloc_r+0xd6>
 8008c0e:	2a0b      	cmp	r2, #11
 8008c10:	d917      	bls.n	8008c42 <_malloc_r+0xca>
 8008c12:	1961      	adds	r1, r4, r5
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	6025      	str	r5, [r4, #0]
 8008c18:	bf18      	it	ne
 8008c1a:	6059      	strne	r1, [r3, #4]
 8008c1c:	6863      	ldr	r3, [r4, #4]
 8008c1e:	bf08      	it	eq
 8008c20:	f8c8 1000 	streq.w	r1, [r8]
 8008c24:	5162      	str	r2, [r4, r5]
 8008c26:	604b      	str	r3, [r1, #4]
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f104 060b 	add.w	r6, r4, #11
 8008c2e:	f000 f829 	bl	8008c84 <__malloc_unlock>
 8008c32:	f026 0607 	bic.w	r6, r6, #7
 8008c36:	1d23      	adds	r3, r4, #4
 8008c38:	1af2      	subs	r2, r6, r3
 8008c3a:	d0ae      	beq.n	8008b9a <_malloc_r+0x22>
 8008c3c:	1b9b      	subs	r3, r3, r6
 8008c3e:	50a3      	str	r3, [r4, r2]
 8008c40:	e7ab      	b.n	8008b9a <_malloc_r+0x22>
 8008c42:	42a3      	cmp	r3, r4
 8008c44:	6862      	ldr	r2, [r4, #4]
 8008c46:	d1dd      	bne.n	8008c04 <_malloc_r+0x8c>
 8008c48:	f8c8 2000 	str.w	r2, [r8]
 8008c4c:	e7ec      	b.n	8008c28 <_malloc_r+0xb0>
 8008c4e:	4623      	mov	r3, r4
 8008c50:	6864      	ldr	r4, [r4, #4]
 8008c52:	e7ac      	b.n	8008bae <_malloc_r+0x36>
 8008c54:	4634      	mov	r4, r6
 8008c56:	6876      	ldr	r6, [r6, #4]
 8008c58:	e7b4      	b.n	8008bc4 <_malloc_r+0x4c>
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	e7cc      	b.n	8008bf8 <_malloc_r+0x80>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	603b      	str	r3, [r7, #0]
 8008c62:	4638      	mov	r0, r7
 8008c64:	f000 f80e 	bl	8008c84 <__malloc_unlock>
 8008c68:	e797      	b.n	8008b9a <_malloc_r+0x22>
 8008c6a:	6025      	str	r5, [r4, #0]
 8008c6c:	e7dc      	b.n	8008c28 <_malloc_r+0xb0>
 8008c6e:	605b      	str	r3, [r3, #4]
 8008c70:	deff      	udf	#255	; 0xff
 8008c72:	bf00      	nop
 8008c74:	20000508 	.word	0x20000508

08008c78 <__malloc_lock>:
 8008c78:	4801      	ldr	r0, [pc, #4]	; (8008c80 <__malloc_lock+0x8>)
 8008c7a:	f7ff bf0f 	b.w	8008a9c <__retarget_lock_acquire_recursive>
 8008c7e:	bf00      	nop
 8008c80:	20000504 	.word	0x20000504

08008c84 <__malloc_unlock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__malloc_unlock+0x8>)
 8008c86:	f7ff bf0a 	b.w	8008a9e <__retarget_lock_release_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20000504 	.word	0x20000504

08008c90 <__ssputs_r>:
 8008c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c94:	688e      	ldr	r6, [r1, #8]
 8008c96:	461f      	mov	r7, r3
 8008c98:	42be      	cmp	r6, r7
 8008c9a:	680b      	ldr	r3, [r1, #0]
 8008c9c:	4682      	mov	sl, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	4690      	mov	r8, r2
 8008ca2:	d82c      	bhi.n	8008cfe <__ssputs_r+0x6e>
 8008ca4:	898a      	ldrh	r2, [r1, #12]
 8008ca6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008caa:	d026      	beq.n	8008cfa <__ssputs_r+0x6a>
 8008cac:	6965      	ldr	r5, [r4, #20]
 8008cae:	6909      	ldr	r1, [r1, #16]
 8008cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cb4:	eba3 0901 	sub.w	r9, r3, r1
 8008cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cbc:	1c7b      	adds	r3, r7, #1
 8008cbe:	444b      	add	r3, r9
 8008cc0:	106d      	asrs	r5, r5, #1
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	bf38      	it	cc
 8008cc6:	461d      	movcc	r5, r3
 8008cc8:	0553      	lsls	r3, r2, #21
 8008cca:	d527      	bpl.n	8008d1c <__ssputs_r+0x8c>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7ff ff53 	bl	8008b78 <_malloc_r>
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	b360      	cbz	r0, 8008d30 <__ssputs_r+0xa0>
 8008cd6:	6921      	ldr	r1, [r4, #16]
 8008cd8:	464a      	mov	r2, r9
 8008cda:	f000 faeb 	bl	80092b4 <memcpy>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	6126      	str	r6, [r4, #16]
 8008cec:	6165      	str	r5, [r4, #20]
 8008cee:	444e      	add	r6, r9
 8008cf0:	eba5 0509 	sub.w	r5, r5, r9
 8008cf4:	6026      	str	r6, [r4, #0]
 8008cf6:	60a5      	str	r5, [r4, #8]
 8008cf8:	463e      	mov	r6, r7
 8008cfa:	42be      	cmp	r6, r7
 8008cfc:	d900      	bls.n	8008d00 <__ssputs_r+0x70>
 8008cfe:	463e      	mov	r6, r7
 8008d00:	6820      	ldr	r0, [r4, #0]
 8008d02:	4632      	mov	r2, r6
 8008d04:	4641      	mov	r1, r8
 8008d06:	f000 faab 	bl	8009260 <memmove>
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	1b9b      	subs	r3, r3, r6
 8008d0e:	60a3      	str	r3, [r4, #8]
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	4433      	add	r3, r6
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	2000      	movs	r0, #0
 8008d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	f000 fad7 	bl	80092d0 <_realloc_r>
 8008d22:	4606      	mov	r6, r0
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d1e0      	bne.n	8008cea <__ssputs_r+0x5a>
 8008d28:	6921      	ldr	r1, [r4, #16]
 8008d2a:	4650      	mov	r0, sl
 8008d2c:	f7ff feb8 	bl	8008aa0 <_free_r>
 8008d30:	230c      	movs	r3, #12
 8008d32:	f8ca 3000 	str.w	r3, [sl]
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d42:	e7e9      	b.n	8008d18 <__ssputs_r+0x88>

08008d44 <_svfiprintf_r>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	4698      	mov	r8, r3
 8008d4a:	898b      	ldrh	r3, [r1, #12]
 8008d4c:	061b      	lsls	r3, r3, #24
 8008d4e:	b09d      	sub	sp, #116	; 0x74
 8008d50:	4607      	mov	r7, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	4614      	mov	r4, r2
 8008d56:	d50e      	bpl.n	8008d76 <_svfiprintf_r+0x32>
 8008d58:	690b      	ldr	r3, [r1, #16]
 8008d5a:	b963      	cbnz	r3, 8008d76 <_svfiprintf_r+0x32>
 8008d5c:	2140      	movs	r1, #64	; 0x40
 8008d5e:	f7ff ff0b 	bl	8008b78 <_malloc_r>
 8008d62:	6028      	str	r0, [r5, #0]
 8008d64:	6128      	str	r0, [r5, #16]
 8008d66:	b920      	cbnz	r0, 8008d72 <_svfiprintf_r+0x2e>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	e0d0      	b.n	8008f14 <_svfiprintf_r+0x1d0>
 8008d72:	2340      	movs	r3, #64	; 0x40
 8008d74:	616b      	str	r3, [r5, #20]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7a:	2320      	movs	r3, #32
 8008d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d84:	2330      	movs	r3, #48	; 0x30
 8008d86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008f2c <_svfiprintf_r+0x1e8>
 8008d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d8e:	f04f 0901 	mov.w	r9, #1
 8008d92:	4623      	mov	r3, r4
 8008d94:	469a      	mov	sl, r3
 8008d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9a:	b10a      	cbz	r2, 8008da0 <_svfiprintf_r+0x5c>
 8008d9c:	2a25      	cmp	r2, #37	; 0x25
 8008d9e:	d1f9      	bne.n	8008d94 <_svfiprintf_r+0x50>
 8008da0:	ebba 0b04 	subs.w	fp, sl, r4
 8008da4:	d00b      	beq.n	8008dbe <_svfiprintf_r+0x7a>
 8008da6:	465b      	mov	r3, fp
 8008da8:	4622      	mov	r2, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff ff6f 	bl	8008c90 <__ssputs_r>
 8008db2:	3001      	adds	r0, #1
 8008db4:	f000 80a9 	beq.w	8008f0a <_svfiprintf_r+0x1c6>
 8008db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dba:	445a      	add	r2, fp
 8008dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 80a1 	beq.w	8008f0a <_svfiprintf_r+0x1c6>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd2:	f10a 0a01 	add.w	sl, sl, #1
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dde:	931a      	str	r3, [sp, #104]	; 0x68
 8008de0:	4654      	mov	r4, sl
 8008de2:	2205      	movs	r2, #5
 8008de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de8:	4850      	ldr	r0, [pc, #320]	; (8008f2c <_svfiprintf_r+0x1e8>)
 8008dea:	f7f7 fa01 	bl	80001f0 <memchr>
 8008dee:	9a04      	ldr	r2, [sp, #16]
 8008df0:	b9d8      	cbnz	r0, 8008e2a <_svfiprintf_r+0xe6>
 8008df2:	06d0      	lsls	r0, r2, #27
 8008df4:	bf44      	itt	mi
 8008df6:	2320      	movmi	r3, #32
 8008df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfc:	0711      	lsls	r1, r2, #28
 8008dfe:	bf44      	itt	mi
 8008e00:	232b      	movmi	r3, #43	; 0x2b
 8008e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e06:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0c:	d015      	beq.n	8008e3a <_svfiprintf_r+0xf6>
 8008e0e:	9a07      	ldr	r2, [sp, #28]
 8008e10:	4654      	mov	r4, sl
 8008e12:	2000      	movs	r0, #0
 8008e14:	f04f 0c0a 	mov.w	ip, #10
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e1e:	3b30      	subs	r3, #48	; 0x30
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	d94d      	bls.n	8008ec0 <_svfiprintf_r+0x17c>
 8008e24:	b1b0      	cbz	r0, 8008e54 <_svfiprintf_r+0x110>
 8008e26:	9207      	str	r2, [sp, #28]
 8008e28:	e014      	b.n	8008e54 <_svfiprintf_r+0x110>
 8008e2a:	eba0 0308 	sub.w	r3, r0, r8
 8008e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e32:	4313      	orrs	r3, r2
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	46a2      	mov	sl, r4
 8008e38:	e7d2      	b.n	8008de0 <_svfiprintf_r+0x9c>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	1d19      	adds	r1, r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	9103      	str	r1, [sp, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfbb      	ittet	lt
 8008e46:	425b      	neglt	r3, r3
 8008e48:	f042 0202 	orrlt.w	r2, r2, #2
 8008e4c:	9307      	strge	r3, [sp, #28]
 8008e4e:	9307      	strlt	r3, [sp, #28]
 8008e50:	bfb8      	it	lt
 8008e52:	9204      	strlt	r2, [sp, #16]
 8008e54:	7823      	ldrb	r3, [r4, #0]
 8008e56:	2b2e      	cmp	r3, #46	; 0x2e
 8008e58:	d10c      	bne.n	8008e74 <_svfiprintf_r+0x130>
 8008e5a:	7863      	ldrb	r3, [r4, #1]
 8008e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e5e:	d134      	bne.n	8008eca <_svfiprintf_r+0x186>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	1d1a      	adds	r2, r3, #4
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	9203      	str	r2, [sp, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bfb8      	it	lt
 8008e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e70:	3402      	adds	r4, #2
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008f3c <_svfiprintf_r+0x1f8>
 8008e78:	7821      	ldrb	r1, [r4, #0]
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	f7f7 f9b7 	bl	80001f0 <memchr>
 8008e82:	b138      	cbz	r0, 8008e94 <_svfiprintf_r+0x150>
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	eba0 000a 	sub.w	r0, r0, sl
 8008e8a:	2240      	movs	r2, #64	; 0x40
 8008e8c:	4082      	lsls	r2, r0
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	3401      	adds	r4, #1
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e98:	4825      	ldr	r0, [pc, #148]	; (8008f30 <_svfiprintf_r+0x1ec>)
 8008e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e9e:	2206      	movs	r2, #6
 8008ea0:	f7f7 f9a6 	bl	80001f0 <memchr>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	d038      	beq.n	8008f1a <_svfiprintf_r+0x1d6>
 8008ea8:	4b22      	ldr	r3, [pc, #136]	; (8008f34 <_svfiprintf_r+0x1f0>)
 8008eaa:	bb1b      	cbnz	r3, 8008ef4 <_svfiprintf_r+0x1b0>
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	3307      	adds	r3, #7
 8008eb0:	f023 0307 	bic.w	r3, r3, #7
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	9303      	str	r3, [sp, #12]
 8008eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eba:	4433      	add	r3, r6
 8008ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebe:	e768      	b.n	8008d92 <_svfiprintf_r+0x4e>
 8008ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	2001      	movs	r0, #1
 8008ec8:	e7a6      	b.n	8008e18 <_svfiprintf_r+0xd4>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	3401      	adds	r4, #1
 8008ece:	9305      	str	r3, [sp, #20]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f04f 0c0a 	mov.w	ip, #10
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008edc:	3a30      	subs	r2, #48	; 0x30
 8008ede:	2a09      	cmp	r2, #9
 8008ee0:	d903      	bls.n	8008eea <_svfiprintf_r+0x1a6>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0c6      	beq.n	8008e74 <_svfiprintf_r+0x130>
 8008ee6:	9105      	str	r1, [sp, #20]
 8008ee8:	e7c4      	b.n	8008e74 <_svfiprintf_r+0x130>
 8008eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eee:	4604      	mov	r4, r0
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e7f0      	b.n	8008ed6 <_svfiprintf_r+0x192>
 8008ef4:	ab03      	add	r3, sp, #12
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	462a      	mov	r2, r5
 8008efa:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <_svfiprintf_r+0x1f4>)
 8008efc:	a904      	add	r1, sp, #16
 8008efe:	4638      	mov	r0, r7
 8008f00:	f3af 8000 	nop.w
 8008f04:	1c42      	adds	r2, r0, #1
 8008f06:	4606      	mov	r6, r0
 8008f08:	d1d6      	bne.n	8008eb8 <_svfiprintf_r+0x174>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	065b      	lsls	r3, r3, #25
 8008f0e:	f53f af2d 	bmi.w	8008d6c <_svfiprintf_r+0x28>
 8008f12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f14:	b01d      	add	sp, #116	; 0x74
 8008f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	ab03      	add	r3, sp, #12
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	462a      	mov	r2, r5
 8008f20:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <_svfiprintf_r+0x1f4>)
 8008f22:	a904      	add	r1, sp, #16
 8008f24:	4638      	mov	r0, r7
 8008f26:	f000 f879 	bl	800901c <_printf_i>
 8008f2a:	e7eb      	b.n	8008f04 <_svfiprintf_r+0x1c0>
 8008f2c:	08009535 	.word	0x08009535
 8008f30:	0800953f 	.word	0x0800953f
 8008f34:	00000000 	.word	0x00000000
 8008f38:	08008c91 	.word	0x08008c91
 8008f3c:	0800953b 	.word	0x0800953b

08008f40 <_printf_common>:
 8008f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f44:	4616      	mov	r6, r2
 8008f46:	4699      	mov	r9, r3
 8008f48:	688a      	ldr	r2, [r1, #8]
 8008f4a:	690b      	ldr	r3, [r1, #16]
 8008f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f50:	4293      	cmp	r3, r2
 8008f52:	bfb8      	it	lt
 8008f54:	4613      	movlt	r3, r2
 8008f56:	6033      	str	r3, [r6, #0]
 8008f58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f5c:	4607      	mov	r7, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	b10a      	cbz	r2, 8008f66 <_printf_common+0x26>
 8008f62:	3301      	adds	r3, #1
 8008f64:	6033      	str	r3, [r6, #0]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	0699      	lsls	r1, r3, #26
 8008f6a:	bf42      	ittt	mi
 8008f6c:	6833      	ldrmi	r3, [r6, #0]
 8008f6e:	3302      	addmi	r3, #2
 8008f70:	6033      	strmi	r3, [r6, #0]
 8008f72:	6825      	ldr	r5, [r4, #0]
 8008f74:	f015 0506 	ands.w	r5, r5, #6
 8008f78:	d106      	bne.n	8008f88 <_printf_common+0x48>
 8008f7a:	f104 0a19 	add.w	sl, r4, #25
 8008f7e:	68e3      	ldr	r3, [r4, #12]
 8008f80:	6832      	ldr	r2, [r6, #0]
 8008f82:	1a9b      	subs	r3, r3, r2
 8008f84:	42ab      	cmp	r3, r5
 8008f86:	dc26      	bgt.n	8008fd6 <_printf_common+0x96>
 8008f88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f8c:	1e13      	subs	r3, r2, #0
 8008f8e:	6822      	ldr	r2, [r4, #0]
 8008f90:	bf18      	it	ne
 8008f92:	2301      	movne	r3, #1
 8008f94:	0692      	lsls	r2, r2, #26
 8008f96:	d42b      	bmi.n	8008ff0 <_printf_common+0xb0>
 8008f98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	47c0      	blx	r8
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	d01e      	beq.n	8008fe4 <_printf_common+0xa4>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	6922      	ldr	r2, [r4, #16]
 8008faa:	f003 0306 	and.w	r3, r3, #6
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	bf02      	ittt	eq
 8008fb2:	68e5      	ldreq	r5, [r4, #12]
 8008fb4:	6833      	ldreq	r3, [r6, #0]
 8008fb6:	1aed      	subeq	r5, r5, r3
 8008fb8:	68a3      	ldr	r3, [r4, #8]
 8008fba:	bf0c      	ite	eq
 8008fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fc0:	2500      	movne	r5, #0
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	bfc4      	itt	gt
 8008fc6:	1a9b      	subgt	r3, r3, r2
 8008fc8:	18ed      	addgt	r5, r5, r3
 8008fca:	2600      	movs	r6, #0
 8008fcc:	341a      	adds	r4, #26
 8008fce:	42b5      	cmp	r5, r6
 8008fd0:	d11a      	bne.n	8009008 <_printf_common+0xc8>
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	e008      	b.n	8008fe8 <_printf_common+0xa8>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4652      	mov	r2, sl
 8008fda:	4649      	mov	r1, r9
 8008fdc:	4638      	mov	r0, r7
 8008fde:	47c0      	blx	r8
 8008fe0:	3001      	adds	r0, #1
 8008fe2:	d103      	bne.n	8008fec <_printf_common+0xac>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fec:	3501      	adds	r5, #1
 8008fee:	e7c6      	b.n	8008f7e <_printf_common+0x3e>
 8008ff0:	18e1      	adds	r1, r4, r3
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	2030      	movs	r0, #48	; 0x30
 8008ff6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ffa:	4422      	add	r2, r4
 8008ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009000:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009004:	3302      	adds	r3, #2
 8009006:	e7c7      	b.n	8008f98 <_printf_common+0x58>
 8009008:	2301      	movs	r3, #1
 800900a:	4622      	mov	r2, r4
 800900c:	4649      	mov	r1, r9
 800900e:	4638      	mov	r0, r7
 8009010:	47c0      	blx	r8
 8009012:	3001      	adds	r0, #1
 8009014:	d0e6      	beq.n	8008fe4 <_printf_common+0xa4>
 8009016:	3601      	adds	r6, #1
 8009018:	e7d9      	b.n	8008fce <_printf_common+0x8e>
	...

0800901c <_printf_i>:
 800901c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	7e0f      	ldrb	r7, [r1, #24]
 8009022:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009024:	2f78      	cmp	r7, #120	; 0x78
 8009026:	4691      	mov	r9, r2
 8009028:	4680      	mov	r8, r0
 800902a:	460c      	mov	r4, r1
 800902c:	469a      	mov	sl, r3
 800902e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009032:	d807      	bhi.n	8009044 <_printf_i+0x28>
 8009034:	2f62      	cmp	r7, #98	; 0x62
 8009036:	d80a      	bhi.n	800904e <_printf_i+0x32>
 8009038:	2f00      	cmp	r7, #0
 800903a:	f000 80d4 	beq.w	80091e6 <_printf_i+0x1ca>
 800903e:	2f58      	cmp	r7, #88	; 0x58
 8009040:	f000 80c0 	beq.w	80091c4 <_printf_i+0x1a8>
 8009044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009048:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800904c:	e03a      	b.n	80090c4 <_printf_i+0xa8>
 800904e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009052:	2b15      	cmp	r3, #21
 8009054:	d8f6      	bhi.n	8009044 <_printf_i+0x28>
 8009056:	a101      	add	r1, pc, #4	; (adr r1, 800905c <_printf_i+0x40>)
 8009058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800905c:	080090b5 	.word	0x080090b5
 8009060:	080090c9 	.word	0x080090c9
 8009064:	08009045 	.word	0x08009045
 8009068:	08009045 	.word	0x08009045
 800906c:	08009045 	.word	0x08009045
 8009070:	08009045 	.word	0x08009045
 8009074:	080090c9 	.word	0x080090c9
 8009078:	08009045 	.word	0x08009045
 800907c:	08009045 	.word	0x08009045
 8009080:	08009045 	.word	0x08009045
 8009084:	08009045 	.word	0x08009045
 8009088:	080091cd 	.word	0x080091cd
 800908c:	080090f5 	.word	0x080090f5
 8009090:	08009187 	.word	0x08009187
 8009094:	08009045 	.word	0x08009045
 8009098:	08009045 	.word	0x08009045
 800909c:	080091ef 	.word	0x080091ef
 80090a0:	08009045 	.word	0x08009045
 80090a4:	080090f5 	.word	0x080090f5
 80090a8:	08009045 	.word	0x08009045
 80090ac:	08009045 	.word	0x08009045
 80090b0:	0800918f 	.word	0x0800918f
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	1d1a      	adds	r2, r3, #4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	602a      	str	r2, [r5, #0]
 80090bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090c4:	2301      	movs	r3, #1
 80090c6:	e09f      	b.n	8009208 <_printf_i+0x1ec>
 80090c8:	6820      	ldr	r0, [r4, #0]
 80090ca:	682b      	ldr	r3, [r5, #0]
 80090cc:	0607      	lsls	r7, r0, #24
 80090ce:	f103 0104 	add.w	r1, r3, #4
 80090d2:	6029      	str	r1, [r5, #0]
 80090d4:	d501      	bpl.n	80090da <_printf_i+0xbe>
 80090d6:	681e      	ldr	r6, [r3, #0]
 80090d8:	e003      	b.n	80090e2 <_printf_i+0xc6>
 80090da:	0646      	lsls	r6, r0, #25
 80090dc:	d5fb      	bpl.n	80090d6 <_printf_i+0xba>
 80090de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80090e2:	2e00      	cmp	r6, #0
 80090e4:	da03      	bge.n	80090ee <_printf_i+0xd2>
 80090e6:	232d      	movs	r3, #45	; 0x2d
 80090e8:	4276      	negs	r6, r6
 80090ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090ee:	485a      	ldr	r0, [pc, #360]	; (8009258 <_printf_i+0x23c>)
 80090f0:	230a      	movs	r3, #10
 80090f2:	e012      	b.n	800911a <_printf_i+0xfe>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	6820      	ldr	r0, [r4, #0]
 80090f8:	1d19      	adds	r1, r3, #4
 80090fa:	6029      	str	r1, [r5, #0]
 80090fc:	0605      	lsls	r5, r0, #24
 80090fe:	d501      	bpl.n	8009104 <_printf_i+0xe8>
 8009100:	681e      	ldr	r6, [r3, #0]
 8009102:	e002      	b.n	800910a <_printf_i+0xee>
 8009104:	0641      	lsls	r1, r0, #25
 8009106:	d5fb      	bpl.n	8009100 <_printf_i+0xe4>
 8009108:	881e      	ldrh	r6, [r3, #0]
 800910a:	4853      	ldr	r0, [pc, #332]	; (8009258 <_printf_i+0x23c>)
 800910c:	2f6f      	cmp	r7, #111	; 0x6f
 800910e:	bf0c      	ite	eq
 8009110:	2308      	moveq	r3, #8
 8009112:	230a      	movne	r3, #10
 8009114:	2100      	movs	r1, #0
 8009116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800911a:	6865      	ldr	r5, [r4, #4]
 800911c:	60a5      	str	r5, [r4, #8]
 800911e:	2d00      	cmp	r5, #0
 8009120:	bfa2      	ittt	ge
 8009122:	6821      	ldrge	r1, [r4, #0]
 8009124:	f021 0104 	bicge.w	r1, r1, #4
 8009128:	6021      	strge	r1, [r4, #0]
 800912a:	b90e      	cbnz	r6, 8009130 <_printf_i+0x114>
 800912c:	2d00      	cmp	r5, #0
 800912e:	d04b      	beq.n	80091c8 <_printf_i+0x1ac>
 8009130:	4615      	mov	r5, r2
 8009132:	fbb6 f1f3 	udiv	r1, r6, r3
 8009136:	fb03 6711 	mls	r7, r3, r1, r6
 800913a:	5dc7      	ldrb	r7, [r0, r7]
 800913c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009140:	4637      	mov	r7, r6
 8009142:	42bb      	cmp	r3, r7
 8009144:	460e      	mov	r6, r1
 8009146:	d9f4      	bls.n	8009132 <_printf_i+0x116>
 8009148:	2b08      	cmp	r3, #8
 800914a:	d10b      	bne.n	8009164 <_printf_i+0x148>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	07de      	lsls	r6, r3, #31
 8009150:	d508      	bpl.n	8009164 <_printf_i+0x148>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	6861      	ldr	r1, [r4, #4]
 8009156:	4299      	cmp	r1, r3
 8009158:	bfde      	ittt	le
 800915a:	2330      	movle	r3, #48	; 0x30
 800915c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009160:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009164:	1b52      	subs	r2, r2, r5
 8009166:	6122      	str	r2, [r4, #16]
 8009168:	f8cd a000 	str.w	sl, [sp]
 800916c:	464b      	mov	r3, r9
 800916e:	aa03      	add	r2, sp, #12
 8009170:	4621      	mov	r1, r4
 8009172:	4640      	mov	r0, r8
 8009174:	f7ff fee4 	bl	8008f40 <_printf_common>
 8009178:	3001      	adds	r0, #1
 800917a:	d14a      	bne.n	8009212 <_printf_i+0x1f6>
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	b004      	add	sp, #16
 8009182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	f043 0320 	orr.w	r3, r3, #32
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	4833      	ldr	r0, [pc, #204]	; (800925c <_printf_i+0x240>)
 8009190:	2778      	movs	r7, #120	; 0x78
 8009192:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	6829      	ldr	r1, [r5, #0]
 800919a:	061f      	lsls	r7, r3, #24
 800919c:	f851 6b04 	ldr.w	r6, [r1], #4
 80091a0:	d402      	bmi.n	80091a8 <_printf_i+0x18c>
 80091a2:	065f      	lsls	r7, r3, #25
 80091a4:	bf48      	it	mi
 80091a6:	b2b6      	uxthmi	r6, r6
 80091a8:	07df      	lsls	r7, r3, #31
 80091aa:	bf48      	it	mi
 80091ac:	f043 0320 	orrmi.w	r3, r3, #32
 80091b0:	6029      	str	r1, [r5, #0]
 80091b2:	bf48      	it	mi
 80091b4:	6023      	strmi	r3, [r4, #0]
 80091b6:	b91e      	cbnz	r6, 80091c0 <_printf_i+0x1a4>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	f023 0320 	bic.w	r3, r3, #32
 80091be:	6023      	str	r3, [r4, #0]
 80091c0:	2310      	movs	r3, #16
 80091c2:	e7a7      	b.n	8009114 <_printf_i+0xf8>
 80091c4:	4824      	ldr	r0, [pc, #144]	; (8009258 <_printf_i+0x23c>)
 80091c6:	e7e4      	b.n	8009192 <_printf_i+0x176>
 80091c8:	4615      	mov	r5, r2
 80091ca:	e7bd      	b.n	8009148 <_printf_i+0x12c>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	6826      	ldr	r6, [r4, #0]
 80091d0:	6961      	ldr	r1, [r4, #20]
 80091d2:	1d18      	adds	r0, r3, #4
 80091d4:	6028      	str	r0, [r5, #0]
 80091d6:	0635      	lsls	r5, r6, #24
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	d501      	bpl.n	80091e0 <_printf_i+0x1c4>
 80091dc:	6019      	str	r1, [r3, #0]
 80091de:	e002      	b.n	80091e6 <_printf_i+0x1ca>
 80091e0:	0670      	lsls	r0, r6, #25
 80091e2:	d5fb      	bpl.n	80091dc <_printf_i+0x1c0>
 80091e4:	8019      	strh	r1, [r3, #0]
 80091e6:	2300      	movs	r3, #0
 80091e8:	6123      	str	r3, [r4, #16]
 80091ea:	4615      	mov	r5, r2
 80091ec:	e7bc      	b.n	8009168 <_printf_i+0x14c>
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	1d1a      	adds	r2, r3, #4
 80091f2:	602a      	str	r2, [r5, #0]
 80091f4:	681d      	ldr	r5, [r3, #0]
 80091f6:	6862      	ldr	r2, [r4, #4]
 80091f8:	2100      	movs	r1, #0
 80091fa:	4628      	mov	r0, r5
 80091fc:	f7f6 fff8 	bl	80001f0 <memchr>
 8009200:	b108      	cbz	r0, 8009206 <_printf_i+0x1ea>
 8009202:	1b40      	subs	r0, r0, r5
 8009204:	6060      	str	r0, [r4, #4]
 8009206:	6863      	ldr	r3, [r4, #4]
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	2300      	movs	r3, #0
 800920c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009210:	e7aa      	b.n	8009168 <_printf_i+0x14c>
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	462a      	mov	r2, r5
 8009216:	4649      	mov	r1, r9
 8009218:	4640      	mov	r0, r8
 800921a:	47d0      	blx	sl
 800921c:	3001      	adds	r0, #1
 800921e:	d0ad      	beq.n	800917c <_printf_i+0x160>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	079b      	lsls	r3, r3, #30
 8009224:	d413      	bmi.n	800924e <_printf_i+0x232>
 8009226:	68e0      	ldr	r0, [r4, #12]
 8009228:	9b03      	ldr	r3, [sp, #12]
 800922a:	4298      	cmp	r0, r3
 800922c:	bfb8      	it	lt
 800922e:	4618      	movlt	r0, r3
 8009230:	e7a6      	b.n	8009180 <_printf_i+0x164>
 8009232:	2301      	movs	r3, #1
 8009234:	4632      	mov	r2, r6
 8009236:	4649      	mov	r1, r9
 8009238:	4640      	mov	r0, r8
 800923a:	47d0      	blx	sl
 800923c:	3001      	adds	r0, #1
 800923e:	d09d      	beq.n	800917c <_printf_i+0x160>
 8009240:	3501      	adds	r5, #1
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	9903      	ldr	r1, [sp, #12]
 8009246:	1a5b      	subs	r3, r3, r1
 8009248:	42ab      	cmp	r3, r5
 800924a:	dcf2      	bgt.n	8009232 <_printf_i+0x216>
 800924c:	e7eb      	b.n	8009226 <_printf_i+0x20a>
 800924e:	2500      	movs	r5, #0
 8009250:	f104 0619 	add.w	r6, r4, #25
 8009254:	e7f5      	b.n	8009242 <_printf_i+0x226>
 8009256:	bf00      	nop
 8009258:	08009546 	.word	0x08009546
 800925c:	08009557 	.word	0x08009557

08009260 <memmove>:
 8009260:	4288      	cmp	r0, r1
 8009262:	b510      	push	{r4, lr}
 8009264:	eb01 0402 	add.w	r4, r1, r2
 8009268:	d902      	bls.n	8009270 <memmove+0x10>
 800926a:	4284      	cmp	r4, r0
 800926c:	4623      	mov	r3, r4
 800926e:	d807      	bhi.n	8009280 <memmove+0x20>
 8009270:	1e43      	subs	r3, r0, #1
 8009272:	42a1      	cmp	r1, r4
 8009274:	d008      	beq.n	8009288 <memmove+0x28>
 8009276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800927a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800927e:	e7f8      	b.n	8009272 <memmove+0x12>
 8009280:	4402      	add	r2, r0
 8009282:	4601      	mov	r1, r0
 8009284:	428a      	cmp	r2, r1
 8009286:	d100      	bne.n	800928a <memmove+0x2a>
 8009288:	bd10      	pop	{r4, pc}
 800928a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800928e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009292:	e7f7      	b.n	8009284 <memmove+0x24>

08009294 <_sbrk_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4d06      	ldr	r5, [pc, #24]	; (80092b0 <_sbrk_r+0x1c>)
 8009298:	2300      	movs	r3, #0
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	f7f8 fb9a 	bl	80019d8 <_sbrk>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_sbrk_r+0x1a>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_sbrk_r+0x1a>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	20000500 	.word	0x20000500

080092b4 <memcpy>:
 80092b4:	440a      	add	r2, r1
 80092b6:	4291      	cmp	r1, r2
 80092b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80092bc:	d100      	bne.n	80092c0 <memcpy+0xc>
 80092be:	4770      	bx	lr
 80092c0:	b510      	push	{r4, lr}
 80092c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092ca:	4291      	cmp	r1, r2
 80092cc:	d1f9      	bne.n	80092c2 <memcpy+0xe>
 80092ce:	bd10      	pop	{r4, pc}

080092d0 <_realloc_r>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	4680      	mov	r8, r0
 80092d6:	4614      	mov	r4, r2
 80092d8:	460e      	mov	r6, r1
 80092da:	b921      	cbnz	r1, 80092e6 <_realloc_r+0x16>
 80092dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	4611      	mov	r1, r2
 80092e2:	f7ff bc49 	b.w	8008b78 <_malloc_r>
 80092e6:	b92a      	cbnz	r2, 80092f4 <_realloc_r+0x24>
 80092e8:	f7ff fbda 	bl	8008aa0 <_free_r>
 80092ec:	4625      	mov	r5, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f4:	f000 f81b 	bl	800932e <_malloc_usable_size_r>
 80092f8:	4284      	cmp	r4, r0
 80092fa:	4607      	mov	r7, r0
 80092fc:	d802      	bhi.n	8009304 <_realloc_r+0x34>
 80092fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009302:	d812      	bhi.n	800932a <_realloc_r+0x5a>
 8009304:	4621      	mov	r1, r4
 8009306:	4640      	mov	r0, r8
 8009308:	f7ff fc36 	bl	8008b78 <_malloc_r>
 800930c:	4605      	mov	r5, r0
 800930e:	2800      	cmp	r0, #0
 8009310:	d0ed      	beq.n	80092ee <_realloc_r+0x1e>
 8009312:	42bc      	cmp	r4, r7
 8009314:	4622      	mov	r2, r4
 8009316:	4631      	mov	r1, r6
 8009318:	bf28      	it	cs
 800931a:	463a      	movcs	r2, r7
 800931c:	f7ff ffca 	bl	80092b4 <memcpy>
 8009320:	4631      	mov	r1, r6
 8009322:	4640      	mov	r0, r8
 8009324:	f7ff fbbc 	bl	8008aa0 <_free_r>
 8009328:	e7e1      	b.n	80092ee <_realloc_r+0x1e>
 800932a:	4635      	mov	r5, r6
 800932c:	e7df      	b.n	80092ee <_realloc_r+0x1e>

0800932e <_malloc_usable_size_r>:
 800932e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009332:	1f18      	subs	r0, r3, #4
 8009334:	2b00      	cmp	r3, #0
 8009336:	bfbc      	itt	lt
 8009338:	580b      	ldrlt	r3, [r1, r0]
 800933a:	18c0      	addlt	r0, r0, r3
 800933c:	4770      	bx	lr
	...

08009340 <_init>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr

0800934c <_fini>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr
