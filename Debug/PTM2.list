
PTM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800829c  0800829c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800829c  0800829c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800829c  0800829c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800829c  0800829c  0001829c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082a0  080082a0  000182a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080082a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000460  20000060  20000060  00020060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014db3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002dfa  00000000  00000000  00034e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001198  00000000  00000000  00037c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dd7  00000000  00000000  00038e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022ad3  00000000  00000000  00039bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019b4f  00000000  00000000  0005c6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d47ad  00000000  00000000  00076211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f88  00000000  00000000  0014a9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0014f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008174 	.word	0x08008174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08008174 	.word	0x08008174

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000a94:	4a27      	ldr	r2, [pc, #156]	; (8000b34 <MX_ADC2_Init+0xb8>)
 8000a96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000aec:	f001 fa62 	bl	8001fb4 <HAL_ADC_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000af6:	f000 fe77 	bl	80017e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000afa:	2303      	movs	r3, #3
 8000afc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000b06:	2306      	movs	r3, #6
 8000b08:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b12:	463b      	mov	r3, r7
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_ADC2_Init+0xb4>)
 8000b18:	f001 fe6c 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b22:	f000 fe61 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000007c 	.word	0x2000007c
 8000b34:	50000100 	.word	0x50000100

08000b38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a15      	ldr	r2, [pc, #84]	; (8000bac <HAL_ADC_MspInit+0x74>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d124      	bne.n	8000ba4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6153      	str	r3, [r2, #20]
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <HAL_ADC_MspInit+0x78>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f002 faee 	bl	8003180 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	50000100 	.word	0x50000100
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b3b      	ldr	r3, [pc, #236]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a3a      	ldr	r2, [pc, #232]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	4a34      	ldr	r2, [pc, #208]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bec:	6153      	str	r3, [r2, #20]
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c32:	f002 fc47 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RIGHT_Pin|LEFT_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c3c:	481f      	ldr	r0, [pc, #124]	; (8000cbc <MX_GPIO_Init+0x108>)
 8000c3e:	f002 fc41 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RPM_UP_Pin|START_Pin;
 8000c42:	2303      	movs	r3, #3
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4819      	ldr	r0, [pc, #100]	; (8000cbc <MX_GPIO_Init+0x108>)
 8000c56:	f002 fa93 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c5a:	2320      	movs	r3, #32
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f002 fa84 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_DOWN_Pin;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RPM_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_GPIO_Init+0x10c>)
 8000c8c:	f002 fa78 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RIGHT_Pin|LEFT_Pin;
 8000c90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_GPIO_Init+0x108>)
 8000caa:	f002 fa69 	bl	8003180 <HAL_GPIO_Init>

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MX_I2C1_Init+0x78>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <MX_I2C1_Init+0x7c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cfe:	480e      	ldr	r0, [pc, #56]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d00:	f002 fbf8 	bl	80034f4 <HAL_I2C_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d0a:	f000 fd6d 	bl	80017e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d12:	f002 ff83 	bl	8003c1c <HAL_I2CEx_ConfigAnalogFilter>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d1c:	f000 fd64 	bl	80017e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_I2C1_Init+0x74>)
 8000d24:	f002 ffc5 	bl	8003cb2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f000 fd5b 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000cc 	.word	0x200000cc
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	2000090e 	.word	0x2000090e

08000d44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_I2C_MspInit+0x7c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d128      	bne.n	8000db8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_I2C_MspInit+0x80>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <HAL_I2C_MspInit+0x80>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_I2C_MspInit+0x80>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d84:	2312      	movs	r3, #18
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d90:	2304      	movs	r3, #4
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <HAL_I2C_MspInit+0x84>)
 8000d9c:	f002 f9f0 	bl	8003180 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_I2C_MspInit+0x80>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_I2C_MspInit+0x80>)
 8000da6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000daa:	61d3      	str	r3, [r2, #28]
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_I2C_MspInit+0x80>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000400 	.word	0x48000400

08000dcc <delay_us>:
#include "stm32f3xx_hal.h"
#include "i2c.h"
#include "tim.h"

void delay_us (uint16_t us)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <delay_us+0x30>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000dde:	bf00      	nop
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <delay_us+0x30>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d3f9      	bcc.n	8000de0 <delay_us+0x14>
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200001bc 	.word	0x200001bc

08000e00 <lcd_init>:

void lcd_init(struct lcd_disp * lcd)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000e16:	2308      	movs	r3, #8
 8000e18:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000e1a:	2028      	movs	r0, #40	; 0x28
 8000e1c:	f001 f8a6 	bl	8001f6c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	7bfa      	ldrb	r2, [r7, #15]
 8000e26:	2130      	movs	r1, #48	; 0x30
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f829 	bl	8000e80 <lcd_write>
	HAL_Delay(5);
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f001 f89c 	bl	8001f6c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	2130      	movs	r1, #48	; 0x30
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 f81f 	bl	8000e80 <lcd_write>
	HAL_Delay(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f001 f892 	bl	8001f6c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	2130      	movs	r1, #48	; 0x30
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f815 	bl	8000e80 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f80e 	bl	8000e80 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	7bfa      	ldrb	r2, [r7, #15]
 8000e6a:	210c      	movs	r1, #12
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f807 	bl	8000e80 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f8e0 	bl	8001038 <lcd_clear>

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	71bb      	strb	r3, [r7, #6]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	f023 030f 	bic.w	r3, r3, #15
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	797b      	ldrb	r3, [r7, #5]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000ea8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eac:	f023 030f 	bic.w	r3, r3, #15
 8000eb0:	b25a      	sxtb	r2, r3
 8000eb2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000ebe:	79bb      	ldrb	r3, [r7, #6]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	797b      	ldrb	r3, [r7, #5]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	b299      	uxth	r1, r3
 8000ee8:	f107 020c 	add.w	r2, r7, #12
 8000eec:	2364      	movs	r3, #100	; 0x64
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <lcd_write+0x88>)
 8000ef4:	f002 fb8e 	bl	8003614 <HAL_I2C_Master_Transmit>
	delay_us(100);
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f7ff ff67 	bl	8000dcc <delay_us>
	//HAL_Delay(1);
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000cc 	.word	0x200000cc

08000f0c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8000f26:	2308      	movs	r3, #8
 8000f28:	73fb      	strb	r3, [r7, #15]
	}

	//lcd_clear(lcd);

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffa4 	bl	8000e80 <lcd_write>
	while(lcd->first_line[i])
 8000f38:	e00f      	b.n	8000f5a <lcd_display+0x4e>
	{
		lcd_write(lcd->addr, lcd->first_line[i], (xpin | RS_PIN));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7818      	ldrb	r0, [r3, #0]
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	7859      	ldrb	r1, [r3, #1]
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f7ff ff96 	bl	8000e80 <lcd_write>
		i++;
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	3301      	adds	r3, #1
 8000f58:	73bb      	strb	r3, [r7, #14]
	while(lcd->first_line[i])
 8000f5a:	7bbb      	ldrb	r3, [r7, #14]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	785b      	ldrb	r3, [r3, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1e9      	bne.n	8000f3a <lcd_display+0x2e>
	}

	/* send second line data */
	i = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	21c0      	movs	r1, #192	; 0xc0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff84 	bl	8000e80 <lcd_write>
	while(lcd->second_line[i])
 8000f78:	e00f      	b.n	8000f9a <lcd_display+0x8e>
	{
		lcd_write(lcd->addr, lcd->second_line[i], (xpin | RS_PIN));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7818      	ldrb	r0, [r3, #0]
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	7d99      	ldrb	r1, [r3, #22]
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f7ff ff76 	bl	8000e80 <lcd_write>
		i++;
 8000f94:	7bbb      	ldrb	r3, [r7, #14]
 8000f96:	3301      	adds	r3, #1
 8000f98:	73bb      	strb	r3, [r7, #14]
	while(lcd->second_line[i])
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	7d9b      	ldrb	r3, [r3, #22]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1e9      	bne.n	8000f7a <lcd_display+0x6e>
	}

	i = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_3, xpin);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	2194      	movs	r1, #148	; 0x94
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff64 	bl	8000e80 <lcd_write>
	while(lcd->third_line[i])
 8000fb8:	e010      	b.n	8000fdc <lcd_display+0xd0>
	{
		lcd_write(lcd->addr, lcd->third_line[i], (xpin | RS_PIN));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7818      	ldrb	r0, [r3, #0]
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	f7ff ff55 	bl	8000e80 <lcd_write>
		i++;
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	73bb      	strb	r3, [r7, #14]
	while(lcd->third_line[i])
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1e7      	bne.n	8000fba <lcd_display+0xae>
	}

	i = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_4, xpin);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	21d4      	movs	r1, #212	; 0xd4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff42 	bl	8000e80 <lcd_write>
	while(lcd->fourth_line[i])
 8000ffc:	e010      	b.n	8001020 <lcd_display+0x114>
	{
		lcd_write(lcd->addr, lcd->fourth_line[i], (xpin | RS_PIN));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7818      	ldrb	r0, [r3, #0]
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4413      	add	r3, r2
 8001008:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	f7ff ff33 	bl	8000e80 <lcd_write>
		i++;
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	3301      	adds	r3, #1
 800101e:	73bb      	strb	r3, [r7, #14]
	while(lcd->fourth_line[i])
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1e7      	bne.n	8000ffe <lcd_display+0xf2>
	}
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 800104e:	2308      	movs	r3, #8
 8001050:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	2101      	movs	r1, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff10 	bl	8000e80 <lcd_write>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	bool startReading, upReading, downReading;
	bool lastUpReading = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
	bool lastDownReading = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	71bb      	strb	r3, [r7, #6]
	bool lastStartReading = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f000 ff11 	bl	8001ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f907 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001082:	f7ff fd97 	bl	8000bb4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001086:	f000 fe6f 	bl	8001d68 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800108a:	f000 fcab 	bl	80019e4 <MX_TIM2_Init>
  MX_TIM16_Init();
 800108e:	f000 fd75 	bl	8001b7c <MX_TIM16_Init>
  MX_TIM3_Init();
 8001092:	f000 fcfb 	bl	8001a8c <MX_TIM3_Init>
  MX_ADC2_Init();
 8001096:	f7ff fcf1 	bl	8000a7c <MX_ADC2_Init>
  MX_I2C1_Init();
 800109a:	f7ff fe13 	bl	8000cc4 <MX_I2C1_Init>
  MX_TIM1_Init();
 800109e:	f000 fc4d 	bl	800193c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010a2:	213c      	movs	r1, #60	; 0x3c
 80010a4:	4871      	ldr	r0, [pc, #452]	; (800126c <main+0x204>)
 80010a6:	f004 fe3d 	bl	8005d24 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim1);
 80010aa:	4871      	ldr	r0, [pc, #452]	; (8001270 <main+0x208>)
 80010ac:	f004 fb4e 	bl	800574c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim16);
 80010b0:	4870      	ldr	r0, [pc, #448]	; (8001274 <main+0x20c>)
 80010b2:	f004 fbb3 	bl	800581c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	486f      	ldr	r0, [pc, #444]	; (8001278 <main+0x210>)
 80010ba:	f004 fc81 	bl	80059c0 <HAL_TIM_PWM_Start>
	HAL_ADC_Start(&hadc2);
 80010be:	486f      	ldr	r0, [pc, #444]	; (800127c <main+0x214>)
 80010c0:	f001 f972 	bl	80023a8 <HAL_ADC_Start>

	disp.addr = (0x3f << 1);
 80010c4:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <main+0x218>)
 80010c6:	227e      	movs	r2, #126	; 0x7e
 80010c8:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 80010ca:	4b6d      	ldr	r3, [pc, #436]	; (8001280 <main+0x218>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	lcd_init(&disp);
 80010d2:	486b      	ldr	r0, [pc, #428]	; (8001280 <main+0x218>)
 80010d4:	f7ff fe94 	bl	8000e00 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	motor.state = 0;
 80010d8:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <main+0x21c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor.dir = 1;
 80010e0:	4b68      	ldr	r3, [pc, #416]	; (8001284 <main+0x21c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
	motor.setRpm = 0;
 80010e6:	4b67      	ldr	r3, [pc, #412]	; (8001284 <main+0x21c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
	motor.overheat = 0;
 80010ec:	4b65      	ldr	r3, [pc, #404]	; (8001284 <main+0x21c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	while (1) {


		sendData();
 80010f4:	f000 f9a6 	bl	8001444 <sendData>
		temp();
 80010f8:	f000 f9f6 	bl	80014e8 <temp>

		if(motor.temp > TEMP_MAX){
 80010fc:	4b61      	ldr	r3, [pc, #388]	; (8001284 <main+0x21c>)
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	2b32      	cmp	r3, #50	; 0x32
 8001102:	dd0a      	ble.n	800111a <main+0xb2>
			motor.overheat = 1;
 8001104:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <main+0x21c>)
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			motor.state = 0;
 800110c:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <main+0x21c>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			displayOverheat();
 8001114:	f000 f96e 	bl	80013f4 <displayOverheat>
 8001118:	e009      	b.n	800112e <main+0xc6>
		}
		else if(motor.temp < TEMP_MIN){
 800111a:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <main+0x21c>)
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	2b2c      	cmp	r3, #44	; 0x2c
 8001120:	dc05      	bgt.n	800112e <main+0xc6>
			motor.overheat = 0;
 8001122:	4b58      	ldr	r3, [pc, #352]	; (8001284 <main+0x21c>)
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			displayNormal();
 800112a:	f000 f91f 	bl	800136c <displayNormal>
		}

		lcd_display(&disp);
 800112e:	4854      	ldr	r0, [pc, #336]	; (8001280 <main+0x218>)
 8001130:	f7ff feec 	bl	8000f0c <lcd_display>

		startReading = HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8001134:	2102      	movs	r1, #2
 8001136:	4854      	ldr	r0, [pc, #336]	; (8001288 <main+0x220>)
 8001138:	f002 f9ac 	bl	8003494 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	bf14      	ite	ne
 8001142:	2301      	movne	r3, #1
 8001144:	2300      	moveq	r3, #0
 8001146:	713b      	strb	r3, [r7, #4]
		if (startReading == 1 && lastStartReading == 0) {
 8001148:	793b      	ldrb	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01e      	beq.n	800118c <main+0x124>
 800114e:	797b      	ldrb	r3, [r7, #5]
 8001150:	f083 0301 	eor.w	r3, r3, #1
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d018      	beq.n	800118c <main+0x124>
			if (motor.state == 0 && motor.overheat == 0)
 800115a:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <main+0x21c>)
 800115c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001160:	f083 0301 	eor.w	r3, r3, #1
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00c      	beq.n	8001184 <main+0x11c>
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <main+0x21c>)
 800116c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001170:	f083 0301 	eor.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <main+0x11c>
				motor.state = 1;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <main+0x21c>)
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001182:	e003      	b.n	800118c <main+0x124>
			else
				motor.state = 0;
 8001184:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <main+0x21c>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		lastStartReading = startReading;
 800118c:	793b      	ldrb	r3, [r7, #4]
 800118e:	717b      	strb	r3, [r7, #5]

		downReading = HAL_GPIO_ReadPin(RPM_DOWN_GPIO_Port, RPM_DOWN_Pin);
 8001190:	2101      	movs	r1, #1
 8001192:	483e      	ldr	r0, [pc, #248]	; (800128c <main+0x224>)
 8001194:	f002 f97e 	bl	8003494 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf14      	ite	ne
 800119e:	2301      	movne	r3, #1
 80011a0:	2300      	moveq	r3, #0
 80011a2:	70fb      	strb	r3, [r7, #3]
		if (downReading == 1 && lastDownReading == 0) {
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00a      	beq.n	80011c0 <main+0x158>
 80011aa:	79bb      	ldrb	r3, [r7, #6]
 80011ac:	f083 0301 	eor.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <main+0x158>
			motor.setRpm = motor.setRpm - 20;
 80011b6:	4b33      	ldr	r3, [pc, #204]	; (8001284 <main+0x21c>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	3b14      	subs	r3, #20
 80011bc:	4a31      	ldr	r2, [pc, #196]	; (8001284 <main+0x21c>)
 80011be:	6093      	str	r3, [r2, #8]
		}
		lastDownReading = downReading;
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	71bb      	strb	r3, [r7, #6]

		upReading = HAL_GPIO_ReadPin(RPM_UP_GPIO_Port, RPM_UP_Pin);
 80011c4:	2101      	movs	r1, #1
 80011c6:	4830      	ldr	r0, [pc, #192]	; (8001288 <main+0x220>)
 80011c8:	f002 f964 	bl	8003494 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	70bb      	strb	r3, [r7, #2]
		if (upReading == 1 && lastUpReading == 0) {
 80011d8:	78bb      	ldrb	r3, [r7, #2]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <main+0x18c>
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f083 0301 	eor.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <main+0x18c>
			motor.setRpm = motor.setRpm + 20;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <main+0x21c>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	3314      	adds	r3, #20
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <main+0x21c>)
 80011f2:	6093      	str	r3, [r2, #8]
		}
		lastUpReading = upReading;
 80011f4:	78bb      	ldrb	r3, [r7, #2]
 80011f6:	71fb      	strb	r3, [r7, #7]

		if (motor.state) {
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <main+0x21c>)
 80011fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <main+0x1ac>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2120      	movs	r1, #32
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f002 f95b 	bl	80034c4 <HAL_GPIO_WritePin>
			setDir();
 800120e:	f000 f93f 	bl	8001490 <setDir>
 8001212:	e76f      	b.n	80010f4 <main+0x8c>
		} else {
			HAL_GPIO_WritePin(RIGHT_GPIO_Port, RIGHT_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	481b      	ldr	r0, [pc, #108]	; (8001288 <main+0x220>)
 800121c:	f002 f952 	bl	80034c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEFT_GPIO_Port, LEFT_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001226:	4818      	ldr	r0, [pc, #96]	; (8001288 <main+0x220>)
 8001228:	f002 f94c 	bl	80034c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2120      	movs	r1, #32
 8001230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001234:	f002 f946 	bl	80034c4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <main+0x210>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	635a      	str	r2, [r3, #52]	; 0x34
			motor.err = 0;
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <main+0x21c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
			motor.lastErr = 0;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <main+0x21c>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
			motor.derivative = 0;
 800124c:	490d      	ldr	r1, [pc, #52]	; (8001284 <main+0x21c>)
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			motor.integral = 0;
 800125a:	490a      	ldr	r1, [pc, #40]	; (8001284 <main+0x21c>)
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		sendData();
 8001268:	e744      	b.n	80010f4 <main+0x8c>
 800126a:	bf00      	nop
 800126c:	20000208 	.word	0x20000208
 8001270:	200001bc 	.word	0x200001bc
 8001274:	200002a0 	.word	0x200002a0
 8001278:	20000254 	.word	0x20000254
 800127c:	2000007c 	.word	0x2000007c
 8001280:	20000120 	.word	0x20000120
 8001284:	20000178 	.word	0x20000178
 8001288:	48000800 	.word	0x48000800
 800128c:	48000400 	.word	0x48000400

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0a6      	sub	sp, #152	; 0x98
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800129a:	2228      	movs	r2, #40	; 0x28
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f006 fae4 	bl	800786c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2258      	movs	r2, #88	; 0x58
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f006 fad6 	bl	800786c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c0:	2302      	movs	r3, #2
 80012c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c4:	2301      	movs	r3, #1
 80012c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c8:	2310      	movs	r3, #16
 80012ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 fd2c 	bl	8003d4c <HAL_RCC_OscConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012fa:	f000 fa75 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fe:	230f      	movs	r3, #15
 8001300:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001302:	2302      	movs	r3, #2
 8001304:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800130a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001314:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001318:	2102      	movs	r1, #2
 800131a:	4618      	mov	r0, r3
 800131c:	f003 fd6a 	bl	8004df4 <HAL_RCC_ClockConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001326:	f000 fa5f 	bl	80017e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <SystemClock_Config+0xd8>)
 800132c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800133c:	2300      	movs	r3, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001340:	2300      	movs	r3, #0
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001344:	2300      	movs	r3, #0
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_PLLCLK;
 8001348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800134c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f003 ff85 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800135c:	f000 fa44 	bl	80017e8 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3798      	adds	r7, #152	; 0x98
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	00b010a2 	.word	0x00b010a2

0800136c <displayNormal>:

/* USER CODE BEGIN 4 */
void displayNormal(){
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
	char statusName[2][7] = {{"STOP  "}, {"START "}};
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <displayNormal+0x60>)
 8001374:	463c      	mov	r4, r7
 8001376:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001378:	c407      	stmia	r4!, {r0, r1, r2}
 800137a:	8023      	strh	r3, [r4, #0]
	sprintf((char *)disp.first_line, "Status: %s", statusName[motor.state]);
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <displayNormal+0x64>)
 800137e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001382:	4619      	mov	r1, r3
 8001384:	463a      	mov	r2, r7
 8001386:	460b      	mov	r3, r1
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	1a5b      	subs	r3, r3, r1
 800138c:	4413      	add	r3, r2
 800138e:	461a      	mov	r2, r3
 8001390:	4910      	ldr	r1, [pc, #64]	; (80013d4 <displayNormal+0x68>)
 8001392:	4811      	ldr	r0, [pc, #68]	; (80013d8 <displayNormal+0x6c>)
 8001394:	f006 fa4a 	bl	800782c <siprintf>
	sprintf((char *)disp.second_line, "Set RPM: %d    ", motor.setRpm);
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <displayNormal+0x64>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	461a      	mov	r2, r3
 800139e:	490f      	ldr	r1, [pc, #60]	; (80013dc <displayNormal+0x70>)
 80013a0:	480f      	ldr	r0, [pc, #60]	; (80013e0 <displayNormal+0x74>)
 80013a2:	f006 fa43 	bl	800782c <siprintf>
	sprintf((char *)disp.third_line, "Actual RPM: %d    ", motor.actRpm);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <displayNormal+0x64>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	461a      	mov	r2, r3
 80013ac:	490d      	ldr	r1, [pc, #52]	; (80013e4 <displayNormal+0x78>)
 80013ae:	480e      	ldr	r0, [pc, #56]	; (80013e8 <displayNormal+0x7c>)
 80013b0:	f006 fa3c 	bl	800782c <siprintf>
	sprintf((char *)disp.fourth_line, "Temperature: %d%cC ", motor.temp, 223);
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <displayNormal+0x64>)
 80013b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b8:	23df      	movs	r3, #223	; 0xdf
 80013ba:	490c      	ldr	r1, [pc, #48]	; (80013ec <displayNormal+0x80>)
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <displayNormal+0x84>)
 80013be:	f006 fa35 	bl	800782c <siprintf>
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd90      	pop	{r4, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	080081d0 	.word	0x080081d0
 80013d0:	20000178 	.word	0x20000178
 80013d4:	0800818c 	.word	0x0800818c
 80013d8:	20000121 	.word	0x20000121
 80013dc:	08008198 	.word	0x08008198
 80013e0:	20000136 	.word	0x20000136
 80013e4:	080081a8 	.word	0x080081a8
 80013e8:	2000014b 	.word	0x2000014b
 80013ec:	080081bc 	.word	0x080081bc
 80013f0:	20000160 	.word	0x20000160

080013f4 <displayOverheat>:

void displayOverheat(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	sprintf((char *)disp.first_line, "                    ");
 80013f8:	490a      	ldr	r1, [pc, #40]	; (8001424 <displayOverheat+0x30>)
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <displayOverheat+0x34>)
 80013fc:	f006 fa16 	bl	800782c <siprintf>
	sprintf((char *)disp.second_line, "     !OVERHEAT!   ");
 8001400:	490a      	ldr	r1, [pc, #40]	; (800142c <displayOverheat+0x38>)
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <displayOverheat+0x3c>)
 8001404:	f006 fa12 	bl	800782c <siprintf>
	sprintf((char *)disp.third_line,  "       !%d%cC!   ", motor.temp, 223);
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <displayOverheat+0x40>)
 800140a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140c:	23df      	movs	r3, #223	; 0xdf
 800140e:	490a      	ldr	r1, [pc, #40]	; (8001438 <displayOverheat+0x44>)
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <displayOverheat+0x48>)
 8001412:	f006 fa0b 	bl	800782c <siprintf>
	sprintf((char *)disp.fourth_line, "                    ");
 8001416:	4903      	ldr	r1, [pc, #12]	; (8001424 <displayOverheat+0x30>)
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <displayOverheat+0x4c>)
 800141a:	f006 fa07 	bl	800782c <siprintf>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	080081e0 	.word	0x080081e0
 8001428:	20000121 	.word	0x20000121
 800142c:	080081f8 	.word	0x080081f8
 8001430:	20000136 	.word	0x20000136
 8001434:	20000178 	.word	0x20000178
 8001438:	0800820c 	.word	0x0800820c
 800143c:	2000014b 	.word	0x2000014b
 8001440:	20000160 	.word	0x20000160

08001444 <sendData>:

void sendData(){
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b08b      	sub	sp, #44	; 0x2c
 8001448:	af02      	add	r7, sp, #8
	char msg[32];
	sprintf((char*) msg, "%d, %d, %d, %d\n", motor.actRpm, motor.setRpm, motor.err, 0);
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <sendData+0x40>)
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <sendData+0x40>)
 8001450:	6899      	ldr	r1, [r3, #8]
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <sendData+0x40>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4638      	mov	r0, r7
 8001458:	2400      	movs	r4, #0
 800145a:	9401      	str	r4, [sp, #4]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	460b      	mov	r3, r1
 8001460:	4909      	ldr	r1, [pc, #36]	; (8001488 <sendData+0x44>)
 8001462:	f006 f9e3 	bl	800782c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 100);
 8001466:	463b      	mov	r3, r7
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe feb9 	bl	80001e0 <strlen>
 800146e:	4603      	mov	r3, r0
 8001470:	b29a      	uxth	r2, r3
 8001472:	4639      	mov	r1, r7
 8001474:	2364      	movs	r3, #100	; 0x64
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <sendData+0x48>)
 8001478:	f005 fd64 	bl	8006f44 <HAL_UART_Transmit>
}
 800147c:	bf00      	nop
 800147e:	3724      	adds	r7, #36	; 0x24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	20000178 	.word	0x20000178
 8001488:	08008220 	.word	0x08008220
 800148c:	200002ec 	.word	0x200002ec

08001490 <setDir>:

void setDir(){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	if(motor.setRpm < 0){
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <setDir+0x50>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da10      	bge.n	80014be <setDir+0x2e>
		motor.dir = -1;
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <setDir+0x50>)
 800149e:	f04f 32ff 	mov.w	r2, #4294967295
 80014a2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(RIGHT_GPIO_Port, RIGHT_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <setDir+0x54>)
 80014ac:	f002 f80a 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_GPIO_Port, LEFT_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <setDir+0x54>)
 80014b8:	f002 f804 	bl	80034c4 <HAL_GPIO_WritePin>
	else {
		motor.dir = 1;
		HAL_GPIO_WritePin(LEFT_GPIO_Port, LEFT_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RIGHT_GPIO_Port, RIGHT_Pin, GPIO_PIN_SET);
	}
}
 80014bc:	e00e      	b.n	80014dc <setDir+0x4c>
		motor.dir = 1;
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <setDir+0x50>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LEFT_GPIO_Port, LEFT_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <setDir+0x54>)
 80014cc:	f001 fffa 	bl	80034c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_GPIO_Port, RIGHT_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <setDir+0x54>)
 80014d8:	f001 fff4 	bl	80034c4 <HAL_GPIO_WritePin>
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000178 	.word	0x20000178
 80014e4:	48000800 	.word	0x48000800

080014e8 <temp>:

void temp(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK) {
 80014ec:	210a      	movs	r1, #10
 80014ee:	4838      	ldr	r0, [pc, #224]	; (80015d0 <temp+0xe8>)
 80014f0:	f001 f870 	bl	80025d4 <HAL_ADC_PollForConversion>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <temp+0x26>
		motor.tempRead = HAL_ADC_GetValue(&hadc2);
 80014fa:	4835      	ldr	r0, [pc, #212]	; (80015d0 <temp+0xe8>)
 80014fc:	f001 f96c 	bl	80027d8 <HAL_ADC_GetValue>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <temp+0xec>)
 8001506:	855a      	strh	r2, [r3, #42]	; 0x2a
		HAL_ADC_Start(&hadc2);
 8001508:	4831      	ldr	r0, [pc, #196]	; (80015d0 <temp+0xe8>)
 800150a:	f000 ff4d 	bl	80023a8 <HAL_ADC_Start>
	}

	motor.temp = 33000/(3.3*motor.tempRead/4096)-10000;
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <temp+0xec>)
 8001510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff f80e 	bl	8000534 <__aeabi_i2d>
 8001518:	a323      	add	r3, pc, #140	; (adr r3, 80015a8 <temp+0xc0>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff f873 	bl	8000608 <__aeabi_dmul>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <temp+0xf0>)
 8001530:	f7ff f994 	bl	800085c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	a11d      	add	r1, pc, #116	; (adr r1, 80015b0 <temp+0xc8>)
 800153a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800153e:	f7ff f98d 	bl	800085c <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	a31b      	add	r3, pc, #108	; (adr r3, 80015b8 <temp+0xd0>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7fe fea2 	bl	8000298 <__aeabi_dsub>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fa66 	bl	8000a2c <__aeabi_d2iz>
 8001560:	4603      	mov	r3, r0
 8001562:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <temp+0xec>)
 8001564:	6253      	str	r3, [r2, #36]	; 0x24
	motor.temp = motor.temp*-0.00438+69.5;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <temp+0xec>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ffe2 	bl	8000534 <__aeabi_i2d>
 8001570:	a313      	add	r3, pc, #76	; (adr r3, 80015c0 <temp+0xd8>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7ff f847 	bl	8000608 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	a311      	add	r3, pc, #68	; (adr r3, 80015c8 <temp+0xe0>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7fe fe88 	bl	800029c <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fa4a 	bl	8000a2c <__aeabi_d2iz>
 8001598:	4603      	mov	r3, r0
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <temp+0xec>)
 800159c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	66666666 	.word	0x66666666
 80015ac:	400a6666 	.word	0x400a6666
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40e01d00 	.word	0x40e01d00
 80015b8:	00000000 	.word	0x00000000
 80015bc:	40c38800 	.word	0x40c38800
 80015c0:	4c1a8ac6 	.word	0x4c1a8ac6
 80015c4:	bf71f0c3 	.word	0xbf71f0c3
 80015c8:	00000000 	.word	0x00000000
 80015cc:	40516000 	.word	0x40516000
 80015d0:	2000007c 	.word	0x2000007c
 80015d4:	20000178 	.word	0x20000178
 80015d8:	40b00000 	.word	0x40b00000
 80015dc:	00000000 	.word	0x00000000

080015e0 <pid>:

void pid() {
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	if(motor.state == 1){
 80015e4:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <pid+0x138>)
 80015e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8088 	beq.w	8001700 <pid+0x120>
	motor.err = (motor.setRpm - motor.actRpm)*motor.dir;
 80015f0:	4b49      	ldr	r3, [pc, #292]	; (8001718 <pid+0x138>)
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <pid+0x138>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	4a47      	ldr	r2, [pc, #284]	; (8001718 <pid+0x138>)
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	4a45      	ldr	r2, [pc, #276]	; (8001718 <pid+0x138>)
 8001604:	61d3      	str	r3, [r2, #28]
	motor.integral += (double)(motor.err / ENCODER_FREQ);
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <pid+0x138>)
 8001608:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <pid+0x138>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ff8f 	bl	8000534 <__aeabi_i2d>
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b40      	ldr	r3, [pc, #256]	; (800171c <pid+0x13c>)
 800161c:	f7ff f91e 	bl	800085c <__aeabi_ddiv>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4620      	mov	r0, r4
 8001626:	4629      	mov	r1, r5
 8001628:	f7fe fe38 	bl	800029c <__adddf3>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4939      	ldr	r1, [pc, #228]	; (8001718 <pid+0x138>)
 8001632:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	motor.derivative = (double) (motor.err - motor.lastErr) * ENCODER_FREQ;
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <pid+0x138>)
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <pid+0x138>)
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ff77 	bl	8000534 <__aeabi_i2d>
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <pid+0x13c>)
 800164c:	f7fe ffdc 	bl	8000608 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4930      	ldr	r1, [pc, #192]	; (8001718 <pid+0x138>)
 8001656:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	motor.pwm = (int) KP * (motor.err + KI* motor.integral + KD * motor.derivative);
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <pid+0x138>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff68 	bl	8000534 <__aeabi_i2d>
 8001664:	4604      	mov	r4, r0
 8001666:	460d      	mov	r5, r1
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <pid+0x138>)
 800166a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800166e:	a326      	add	r3, pc, #152	; (adr r3, 8001708 <pid+0x128>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe ffc8 	bl	8000608 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4620      	mov	r0, r4
 800167e:	4629      	mov	r1, r5
 8001680:	f7fe fe0c 	bl	800029c <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	4b22      	ldr	r3, [pc, #136]	; (8001718 <pid+0x138>)
 800168e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001692:	a31f      	add	r3, pc, #124	; (adr r3, 8001710 <pid+0x130>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7fe ffb6 	bl	8000608 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4620      	mov	r0, r4
 80016a2:	4629      	mov	r1, r5
 80016a4:	f7fe fdfa 	bl	800029c <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <pid+0x140>)
 80016b6:	f7fe ffa7 	bl	8000608 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f9b3 	bl	8000a2c <__aeabi_d2iz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <pid+0x138>)
 80016ca:	6193      	str	r3, [r2, #24]
	motor.lastErr = motor.err;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <pid+0x138>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <pid+0x138>)
 80016d2:	6213      	str	r3, [r2, #32]
	if (motor.pwm < 0)
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <pid+0x138>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	da03      	bge.n	80016e4 <pid+0x104>
		motor.pwm = 0;
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <pid+0x138>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
 80016e2:	e008      	b.n	80016f6 <pid+0x116>
	else if (motor.pwm > MAX_PWM)
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <pid+0x138>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ec:	db03      	blt.n	80016f6 <pid+0x116>
		motor.pwm = MAX_PWM;
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <pid+0x138>)
 80016f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f4:	619a      	str	r2, [r3, #24]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, motor.pwm);
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <pid+0x138>)
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <pid+0x144>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001700:	bf00      	nop
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	f3af 8000 	nop.w
 8001708:	cccccccd 	.word	0xcccccccd
 800170c:	4008cccc 	.word	0x4008cccc
 8001710:	47ae147b 	.word	0x47ae147b
 8001714:	3fb47ae1 	.word	0x3fb47ae1
 8001718:	20000178 	.word	0x20000178
 800171c:	40340000 	.word	0x40340000
 8001720:	401c0000 	.word	0x401c0000
 8001724:	20000254 	.word	0x20000254

08001728 <countRPM>:

void countRPM(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	if (motor.actCount < motor.lastCount) {
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <countRPM+0x7c>)
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <countRPM+0x7c>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	da09      	bge.n	800174c <countRPM+0x24>
		motor.count = motor.actCount + ENCODER_PULSE - motor.lastCount;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <countRPM+0x7c>)
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <countRPM+0x7c>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <countRPM+0x7c>)
 8001748:	60d3      	str	r3, [r2, #12]
 800174a:	e006      	b.n	800175a <countRPM+0x32>
	} else {
		motor.count = motor.actCount - motor.lastCount;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <countRPM+0x7c>)
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <countRPM+0x7c>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4a13      	ldr	r2, [pc, #76]	; (80017a4 <countRPM+0x7c>)
 8001758:	60d3      	str	r3, [r2, #12]
	}
	motor.lastCount = motor.actCount;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <countRPM+0x7c>)
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <countRPM+0x7c>)
 8001760:	6153      	str	r3, [r2, #20]
	motor.actRpm = (int) motor.count * (60 * ENCODER_FREQ / ENCODER_PULSE);
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <countRPM+0x7c>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fee4 	bl	8000534 <__aeabi_i2d>
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <countRPM+0x80>)
 8001772:	f7fe ff49 	bl	8000608 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff f955 	bl	8000a2c <__aeabi_d2iz>
 8001782:	4603      	mov	r3, r0
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <countRPM+0x7c>)
 8001786:	6053      	str	r3, [r2, #4]
	if(motor.actRpm>500)
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <countRPM+0x7c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001790:	dd05      	ble.n	800179e <countRPM+0x76>
		motor.actRpm =  motor.actRpm-1200;
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <countRPM+0x7c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800179a:	4a02      	ldr	r2, [pc, #8]	; (80017a4 <countRPM+0x7c>)
 800179c:	6053      	str	r3, [r2, #4]
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000178 	.word	0x20000178
 80017a8:	3ff40000 	.word	0x3ff40000

080017ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM16) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d109      	bne.n	80017d2 <HAL_TIM_PeriodElapsedCallback+0x26>
		motor.actCount = __HAL_TIM_GET_COUNTER(&htim2);
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80017c8:	611a      	str	r2, [r3, #16]
		countRPM();
 80017ca:	f7ff ffad 	bl	8001728 <countRPM>
		pid();
 80017ce:	f7ff ff07 	bl	80015e0 <pid>
	}
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40014400 	.word	0x40014400
 80017e0:	20000208 	.word	0x20000208
 80017e4:	20000178 	.word	0x20000178

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>
	...

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x44>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x44>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6193      	str	r3, [r2, #24]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x44>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x44>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x44>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x44>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182a:	2007      	movs	r0, #7
 800182c:	f001 fc66 	bl	80030fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <NMI_Handler+0x4>

08001842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler+0x4>

0800184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <UsageFault_Handler+0x4>

0800185a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001888:	f000 fb50 	bl	8001f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001896:	f004 fad3 	bl	8005e40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800189c:	f004 fad0 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200001bc 	.word	0x200001bc
 80018a8:	200002a0 	.word	0x200002a0

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f005 ffce 	bl	800787c <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20010000 	.word	0x20010000
 800190c:	00000400 	.word	0x00000400
 8001910:	200001b8 	.word	0x200001b8
 8001914:	200004c0 	.word	0x200004c0

08001918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <MX_TIM1_Init+0xa0>)
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <MX_TIM1_Init+0xa4>)
 800195e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <MX_TIM1_Init+0xa0>)
 8001962:	2247      	movs	r2, #71	; 0x47
 8001964:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_TIM1_Init+0xa0>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_TIM1_Init+0xa0>)
 800196e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001972:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MX_TIM1_Init+0xa0>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_TIM1_Init+0xa0>)
 800197c:	2200      	movs	r2, #0
 800197e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_TIM1_Init+0xa0>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001986:	4815      	ldr	r0, [pc, #84]	; (80019dc <MX_TIM1_Init+0xa0>)
 8001988:	f003 fe88 	bl	800569c <HAL_TIM_Base_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001992:	f7ff ff29 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4619      	mov	r1, r3
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <MX_TIM1_Init+0xa0>)
 80019a4:	f004 fc80 	bl	80062a8 <HAL_TIM_ConfigClockSource>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80019ae:	f7ff ff1b 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <MX_TIM1_Init+0xa0>)
 80019c4:	f005 f9c6 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019ce:	f7ff ff0b 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200001bc 	.word	0x200001bc
 80019e0:	40012c00 	.word	0x40012c00

080019e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2224      	movs	r2, #36	; 0x24
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f005 ff3a 	bl	800786c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a02:	4b21      	ldr	r3, [pc, #132]	; (8001a88 <MX_TIM2_Init+0xa4>)
 8001a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <MX_TIM2_Init+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM2_Init+0xa4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 959;
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <MX_TIM2_Init+0xa4>)
 8001a18:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001a1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_TIM2_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_TIM2_Init+0xa4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a42:	2301      	movs	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_TIM2_Init+0xa4>)
 8001a56:	f004 f8bf 	bl	8005bd8 <HAL_TIM_Encoder_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001a60:	f7ff fec2 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_TIM2_Init+0xa4>)
 8001a72:	f005 f96f 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001a7c:	f7ff feb4 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3730      	adds	r7, #48	; 0x30
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000208 	.word	0x20000208

08001a8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08e      	sub	sp, #56	; 0x38
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001abe:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001ac0:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <MX_TIM3_Init+0xec>)
 8001ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001ad2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ad6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ae4:	4823      	ldr	r0, [pc, #140]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001ae6:	f003 fdd9 	bl	800569c <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001af0:	f7ff fe7a 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afe:	4619      	mov	r1, r3
 8001b00:	481c      	ldr	r0, [pc, #112]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001b02:	f004 fbd1 	bl	80062a8 <HAL_TIM_ConfigClockSource>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b0c:	f7ff fe6c 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b10:	4818      	ldr	r0, [pc, #96]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001b12:	f003 fef3 	bl	80058fc <HAL_TIM_PWM_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b1c:	f7ff fe64 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4811      	ldr	r0, [pc, #68]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001b30:	f005 f910 	bl	8006d54 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b3a:	f7ff fe55 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3e:	2360      	movs	r3, #96	; 0x60
 8001b40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	463b      	mov	r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001b56:	f004 fa93 	bl	8006080 <HAL_TIM_PWM_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b60:	f7ff fe42 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b64:	4803      	ldr	r0, [pc, #12]	; (8001b74 <MX_TIM3_Init+0xe8>)
 8001b66:	f000 f8c7 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001b6a:	bf00      	nop
 8001b6c:	3738      	adds	r7, #56	; 0x38
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000254 	.word	0x20000254
 8001b78:	40000400 	.word	0x40000400

08001b7c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b82:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <MX_TIM16_Init+0x4c>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7199;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b88:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b8c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 499;
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b96:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001b9a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001bb0:	f003 fd74 	bl	800569c <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001bba:	f7ff fe15 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200002a0 	.word	0x200002a0
 8001bc8:	40014400 	.word	0x40014400

08001bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_TIM_Base_MspInit+0x9c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d114      	bne.n	8001c08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bde:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001be8:	6193      	str	r3, [r2, #24]
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2019      	movs	r0, #25
 8001bfc:	f001 fa89 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c00:	2019      	movs	r0, #25
 8001c02:	f001 faa2 	bl	800314a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001c06:	e02a      	b.n	8001c5e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_TIM_Base_MspInit+0xa4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10c      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	61d3      	str	r3, [r2, #28]
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
}
 8001c2a:	e018      	b.n	8001c5e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <HAL_TIM_Base_MspInit+0xa8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d113      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	6193      	str	r3, [r2, #24]
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_TIM_Base_MspInit+0xa0>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2019      	movs	r0, #25
 8001c54:	f001 fa5d 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c58:	2019      	movs	r0, #25
 8001c5a:	f001 fa76 	bl	800314a <HAL_NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40012c00 	.word	0x40012c00
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40014400 	.word	0x40014400

08001c78 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d128      	bne.n	8001cec <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	61d3      	str	r3, [r2, #28]
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6153      	str	r3, [r2, #20]
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce8:	f001 fa4a 	bl	8003180 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a11      	ldr	r2, [pc, #68]	; (8001d5c <HAL_TIM_MspPostInit+0x64>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d11b      	bne.n	8001d52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d24:	6153      	str	r3, [r2, #20]
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_TIM_MspPostInit+0x68>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ENABLE_PWM_Pin;
 8001d32:	2340      	movs	r3, #64	; 0x40
 8001d34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ENABLE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <HAL_TIM_MspPostInit+0x6c>)
 8001d4e:	f001 fa17 	bl	8003180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d52:	bf00      	nop
 8001d54:	3720      	adds	r7, #32
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000800 	.word	0x48000800

08001d68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001d6e:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <MX_USART2_UART_Init+0x5c>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_USART2_UART_Init+0x58>)
 8001dac:	f005 f87c 	bl	8006ea8 <HAL_UART_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001db6:	f7ff fd17 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200002ec 	.word	0x200002ec
 8001dc4:	40004400 	.word	0x40004400

08001dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_UART_MspInit+0x7c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d128      	bne.n	8001e3c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_UART_MspInit+0x80>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <HAL_UART_MspInit+0x80>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	61d3      	str	r3, [r2, #28]
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_UART_MspInit+0x80>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_UART_MspInit+0x80>)
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <HAL_UART_MspInit+0x80>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	6153      	str	r3, [r2, #20]
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_UART_MspInit+0x80>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e38:	f001 f9a2 	bl	8003180 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40004400 	.word	0x40004400
 8001e48:	40021000 	.word	0x40021000

08001e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e84 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e50:	f7ff fd62 	bl	8001918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e56:	490d      	ldr	r1, [pc, #52]	; (8001e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <LoopForever+0xe>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e5c:	e002      	b.n	8001e64 <LoopCopyDataInit>

08001e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e62:	3304      	adds	r3, #4

08001e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e68:	d3f9      	bcc.n	8001e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	; (8001e98 <LoopForever+0x16>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e70:	e001      	b.n	8001e76 <LoopFillZerobss>

08001e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e74:	3204      	adds	r2, #4

08001e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e78:	d3fb      	bcc.n	8001e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7a:	f005 fd05 	bl	8007888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e7e:	f7ff f8f3 	bl	8001068 <main>

08001e82 <LoopForever>:

LoopForever:
    b LoopForever
 8001e82:	e7fe      	b.n	8001e82 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e90:	080082a4 	.word	0x080082a4
  ldr r2, =_sbss
 8001e94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e98:	200004c0 	.word	0x200004c0

08001e9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e9c:	e7fe      	b.n	8001e9c <ADC1_2_IRQHandler>
	...

08001ea0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_Init+0x28>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <HAL_Init+0x28>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f001 f923 	bl	80030fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 f808 	bl	8001ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ebc:	f7ff fc9a 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_InitTick+0x54>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_InitTick+0x58>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f001 f93b 	bl	8003166 <HAL_SYSTICK_Config>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00e      	b.n	8001f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d80a      	bhi.n	8001f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f001 f903 	bl	8003112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f0c:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <HAL_InitTick+0x5c>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_IncTick+0x20>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x24>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_IncTick+0x24>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	20000374 	.word	0x20000374

08001f54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f58:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <HAL_GetTick+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000374 	.word	0x20000374

08001f6c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff ffee 	bl	8001f54 <HAL_GetTick>
 8001f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d005      	beq.n	8001f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_Delay+0x44>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f92:	bf00      	nop
 8001f94:	f7ff ffde 	bl	8001f54 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d8f7      	bhi.n	8001f94 <HAL_Delay+0x28>
  {
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b09a      	sub	sp, #104	; 0x68
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e1e3      	b.n	800239c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d176      	bne.n	80020d4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d152      	bne.n	8002094 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe fd95 	bl	8000b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d13b      	bne.n	8002094 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 ff37 	bl	8002e90 <ADC_Disable>
 8002022:	4603      	mov	r3, r0
 8002024:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d12f      	bne.n	8002094 <HAL_ADC_Init+0xe0>
 8002034:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002038:	2b00      	cmp	r3, #0
 800203a:	d12b      	bne.n	8002094 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002044:	f023 0302 	bic.w	r3, r3, #2
 8002048:	f043 0202 	orr.w	r2, r3, #2
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800205e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800206e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_ADC_Init+0x308>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a92      	ldr	r2, [pc, #584]	; (80022c0 <HAL_ADC_Init+0x30c>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9a      	lsrs	r2, r3, #18
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002086:	e002      	b.n	800208e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	3b01      	subs	r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f9      	bne.n	8002088 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80020ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020b0:	d110      	bne.n	80020d4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f023 0312 	bic.w	r3, r3, #18
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f043 0201 	orr.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 8150 	bne.w	8002382 <HAL_ADC_Init+0x3ce>
 80020e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 814b 	bne.w	8002382 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8143 	bne.w	8002382 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002104:	f043 0202 	orr.w	r2, r3, #2
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002114:	d004      	beq.n	8002120 <HAL_ADC_Init+0x16c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6a      	ldr	r2, [pc, #424]	; (80022c4 <HAL_ADC_Init+0x310>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_ADC_Init+0x170>
 8002120:	4b69      	ldr	r3, [pc, #420]	; (80022c8 <HAL_ADC_Init+0x314>)
 8002122:	e000      	b.n	8002126 <HAL_ADC_Init+0x172>
 8002124:	4b69      	ldr	r3, [pc, #420]	; (80022cc <HAL_ADC_Init+0x318>)
 8002126:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002130:	d102      	bne.n	8002138 <HAL_ADC_Init+0x184>
 8002132:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <HAL_ADC_Init+0x310>)
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e01a      	b.n	800216e <HAL_ADC_Init+0x1ba>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a61      	ldr	r2, [pc, #388]	; (80022c4 <HAL_ADC_Init+0x310>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d103      	bne.n	800214a <HAL_ADC_Init+0x196>
 8002142:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	e011      	b.n	800216e <HAL_ADC_Init+0x1ba>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a60      	ldr	r2, [pc, #384]	; (80022d0 <HAL_ADC_Init+0x31c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d102      	bne.n	800215a <HAL_ADC_Init+0x1a6>
 8002154:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_ADC_Init+0x320>)
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e009      	b.n	800216e <HAL_ADC_Init+0x1ba>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5d      	ldr	r2, [pc, #372]	; (80022d4 <HAL_ADC_Init+0x320>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d102      	bne.n	800216a <HAL_ADC_Init+0x1b6>
 8002164:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <HAL_ADC_Init+0x31c>)
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e001      	b.n	800216e <HAL_ADC_Init+0x1ba>
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d108      	bne.n	800218e <HAL_ADC_Init+0x1da>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_ADC_Init+0x1da>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_ADC_Init+0x1dc>
 800218e:	2300      	movs	r3, #0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11c      	bne.n	80021ce <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002194:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_ADC_Init+0x202>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_Init+0x202>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_ADC_Init+0x204>
 80021b6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d108      	bne.n	80021ce <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021cc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7e5b      	ldrb	r3, [r3, #25]
 80021d2:	035b      	lsls	r3, r3, #13
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021d8:	2a01      	cmp	r2, #1
 80021da:	d002      	beq.n	80021e2 <HAL_ADC_Init+0x22e>
 80021dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_Init+0x230>
 80021e2:	2200      	movs	r2, #0
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80021f4:	4313      	orrs	r3, r2
 80021f6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d11b      	bne.n	800223a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7e5b      	ldrb	r3, [r3, #25]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	3b01      	subs	r3, #1
 8002210:	045a      	lsls	r2, r3, #17
 8002212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002214:	4313      	orrs	r3, r2
 8002216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221a:	663b      	str	r3, [r7, #96]	; 0x60
 800221c:	e00d      	b.n	800223a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002226:	f043 0220 	orr.w	r2, r3, #32
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	2b01      	cmp	r3, #1
 8002240:	d054      	beq.n	80022ec <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <HAL_ADC_Init+0x31c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_ADC_Init+0x2a2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a20      	ldr	r2, [pc, #128]	; (80022d4 <HAL_ADC_Init+0x320>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d140      	bne.n	80022d8 <HAL_ADC_Init+0x324>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800225e:	d02a      	beq.n	80022b6 <HAL_ADC_Init+0x302>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002268:	d022      	beq.n	80022b0 <HAL_ADC_Init+0x2fc>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002272:	d01a      	beq.n	80022aa <HAL_ADC_Init+0x2f6>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800227c:	d012      	beq.n	80022a4 <HAL_ADC_Init+0x2f0>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002286:	d00a      	beq.n	800229e <HAL_ADC_Init+0x2ea>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002290:	d002      	beq.n	8002298 <HAL_ADC_Init+0x2e4>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	e023      	b.n	80022e0 <HAL_ADC_Init+0x32c>
 8002298:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800229c:	e020      	b.n	80022e0 <HAL_ADC_Init+0x32c>
 800229e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022a2:	e01d      	b.n	80022e0 <HAL_ADC_Init+0x32c>
 80022a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80022a8:	e01a      	b.n	80022e0 <HAL_ADC_Init+0x32c>
 80022aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ae:	e017      	b.n	80022e0 <HAL_ADC_Init+0x32c>
 80022b0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80022b4:	e014      	b.n	80022e0 <HAL_ADC_Init+0x32c>
 80022b6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80022ba:	e011      	b.n	80022e0 <HAL_ADC_Init+0x32c>
 80022bc:	20000000 	.word	0x20000000
 80022c0:	431bde83 	.word	0x431bde83
 80022c4:	50000100 	.word	0x50000100
 80022c8:	50000300 	.word	0x50000300
 80022cc:	50000700 	.word	0x50000700
 80022d0:	50000400 	.word	0x50000400
 80022d4:	50000500 	.word	0x50000500
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022e4:	4313      	orrs	r3, r2
 80022e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022e8:	4313      	orrs	r3, r2
 80022ea:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d114      	bne.n	8002324 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002308:	f023 0302 	bic.w	r3, r3, #2
 800230c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7e1b      	ldrb	r3, [r3, #24]
 8002312:	039a      	lsls	r2, r3, #14
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4313      	orrs	r3, r2
 800231e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002320:	4313      	orrs	r3, r2
 8002322:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_ADC_Init+0x3f0>)
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002334:	430b      	orrs	r3, r1
 8002336:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10c      	bne.n	800235a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f023 010f 	bic.w	r1, r3, #15
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	1e5a      	subs	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
 8002358:	e007      	b.n	800236a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 020f 	bic.w	r2, r2, #15
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f023 0303 	bic.w	r3, r3, #3
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
 8002380:	e00a      	b.n	8002398 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f023 0312 	bic.w	r3, r3, #18
 800238a:	f043 0210 	orr.w	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002392:	2301      	movs	r3, #1
 8002394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002398:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800239c:	4618      	mov	r0, r3
 800239e:	3768      	adds	r7, #104	; 0x68
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	fff0c007 	.word	0xfff0c007

080023a8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f040 80f9 	bne.w	80025b6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Start+0x2a>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e0f4      	b.n	80025bc <HAL_ADC_Start+0x214>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 fcf4 	bl	8002dc8 <ADC_Enable>
 80023e0:	4603      	mov	r3, r0
 80023e2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 80e0 	bne.w	80025ac <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002408:	d004      	beq.n	8002414 <HAL_ADC_Start+0x6c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6d      	ldr	r2, [pc, #436]	; (80025c4 <HAL_ADC_Start+0x21c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d106      	bne.n	8002422 <HAL_ADC_Start+0x7a>
 8002414:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <HAL_ADC_Start+0x220>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <HAL_ADC_Start+0x9a>
 8002420:	e005      	b.n	800242e <HAL_ADC_Start+0x86>
 8002422:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_ADC_Start+0x224>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_ADC_Start+0x9a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002436:	d004      	beq.n	8002442 <HAL_ADC_Start+0x9a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a64      	ldr	r2, [pc, #400]	; (80025d0 <HAL_ADC_Start+0x228>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d115      	bne.n	800246e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d036      	beq.n	80024ca <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002464:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800246c:	e02d      	b.n	80024ca <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002482:	d004      	beq.n	800248e <HAL_ADC_Start+0xe6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a4e      	ldr	r2, [pc, #312]	; (80025c4 <HAL_ADC_Start+0x21c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10a      	bne.n	80024a4 <HAL_ADC_Start+0xfc>
 800248e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	e008      	b.n	80024b6 <HAL_ADC_Start+0x10e>
 80024a4:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_ADC_Start+0x228>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d6:	d106      	bne.n	80024e6 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f023 0206 	bic.w	r2, r3, #6
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
 80024e4:	e002      	b.n	80024ec <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	221c      	movs	r2, #28
 80024fa:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002504:	d004      	beq.n	8002510 <HAL_ADC_Start+0x168>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <HAL_ADC_Start+0x21c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d106      	bne.n	800251e <HAL_ADC_Start+0x176>
 8002510:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_ADC_Start+0x220>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03e      	beq.n	800259a <HAL_ADC_Start+0x1f2>
 800251c:	e005      	b.n	800252a <HAL_ADC_Start+0x182>
 800251e:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_ADC_Start+0x224>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2b00      	cmp	r3, #0
 8002528:	d037      	beq.n	800259a <HAL_ADC_Start+0x1f2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002532:	d004      	beq.n	800253e <HAL_ADC_Start+0x196>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_ADC_Start+0x21c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d106      	bne.n	800254c <HAL_ADC_Start+0x1a4>
 800253e:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_ADC_Start+0x220>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b05      	cmp	r3, #5
 8002548:	d027      	beq.n	800259a <HAL_ADC_Start+0x1f2>
 800254a:	e005      	b.n	8002558 <HAL_ADC_Start+0x1b0>
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_ADC_Start+0x224>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2b05      	cmp	r3, #5
 8002556:	d020      	beq.n	800259a <HAL_ADC_Start+0x1f2>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002560:	d004      	beq.n	800256c <HAL_ADC_Start+0x1c4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_ADC_Start+0x21c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d106      	bne.n	800257a <HAL_ADC_Start+0x1d2>
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_ADC_Start+0x220>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b09      	cmp	r3, #9
 8002576:	d010      	beq.n	800259a <HAL_ADC_Start+0x1f2>
 8002578:	e005      	b.n	8002586 <HAL_ADC_Start+0x1de>
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <HAL_ADC_Start+0x224>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	2b09      	cmp	r3, #9
 8002584:	d009      	beq.n	800259a <HAL_ADC_Start+0x1f2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258e:	d004      	beq.n	800259a <HAL_ADC_Start+0x1f2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_ADC_Start+0x228>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10f      	bne.n	80025ba <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0204 	orr.w	r2, r2, #4
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	e006      	b.n	80025ba <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80025b4:	e001      	b.n	80025ba <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	50000100 	.word	0x50000100
 80025c8:	50000300 	.word	0x50000300
 80025cc:	50000700 	.word	0x50000700
 80025d0:	50000400 	.word	0x50000400

080025d4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d102      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80025ea:	2308      	movs	r3, #8
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e03a      	b.n	8002666 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f8:	d004      	beq.n	8002604 <HAL_ADC_PollForConversion+0x30>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a72      	ldr	r2, [pc, #456]	; (80027c8 <HAL_ADC_PollForConversion+0x1f4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d101      	bne.n	8002608 <HAL_ADC_PollForConversion+0x34>
 8002604:	4b71      	ldr	r3, [pc, #452]	; (80027cc <HAL_ADC_PollForConversion+0x1f8>)
 8002606:	e000      	b.n	800260a <HAL_ADC_PollForConversion+0x36>
 8002608:	4b71      	ldr	r3, [pc, #452]	; (80027d0 <HAL_ADC_PollForConversion+0x1fc>)
 800260a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2b00      	cmp	r3, #0
 8002616:	d112      	bne.n	800263e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d11d      	bne.n	8002662 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0bf      	b.n	80027be <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0220 	orr.w	r2, r3, #32
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0ad      	b.n	80027be <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002662:	230c      	movs	r3, #12
 8002664:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266e:	d004      	beq.n	800267a <HAL_ADC_PollForConversion+0xa6>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a54      	ldr	r2, [pc, #336]	; (80027c8 <HAL_ADC_PollForConversion+0x1f4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d106      	bne.n	8002688 <HAL_ADC_PollForConversion+0xb4>
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <HAL_ADC_PollForConversion+0x1f8>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2b00      	cmp	r3, #0
 8002684:	d010      	beq.n	80026a8 <HAL_ADC_PollForConversion+0xd4>
 8002686:	e005      	b.n	8002694 <HAL_ADC_PollForConversion+0xc0>
 8002688:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <HAL_ADC_PollForConversion+0x1fc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <HAL_ADC_PollForConversion+0xd4>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800269c:	d004      	beq.n	80026a8 <HAL_ADC_PollForConversion+0xd4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a4c      	ldr	r2, [pc, #304]	; (80027d4 <HAL_ADC_PollForConversion+0x200>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d104      	bne.n	80026b2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	e00f      	b.n	80026d2 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ba:	d004      	beq.n	80026c6 <HAL_ADC_PollForConversion+0xf2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a41      	ldr	r2, [pc, #260]	; (80027c8 <HAL_ADC_PollForConversion+0x1f4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d102      	bne.n	80026cc <HAL_ADC_PollForConversion+0xf8>
 80026c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026ca:	e000      	b.n	80026ce <HAL_ADC_PollForConversion+0xfa>
 80026cc:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_ADC_PollForConversion+0x200>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80026d2:	f7ff fc3f 	bl	8001f54 <HAL_GetTick>
 80026d6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80026d8:	e021      	b.n	800271e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d01d      	beq.n	800271e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d007      	beq.n	80026f8 <HAL_ADC_PollForConversion+0x124>
 80026e8:	f7ff fc34 	bl	8001f54 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d212      	bcs.n	800271e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10b      	bne.n	800271e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f043 0204 	orr.w	r2, r3, #4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e04f      	b.n	80027be <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0d6      	beq.n	80026da <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002742:	2b00      	cmp	r3, #0
 8002744:	d131      	bne.n	80027aa <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800274c:	2b00      	cmp	r3, #0
 800274e:	d12c      	bne.n	80027aa <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b08      	cmp	r3, #8
 800275c:	d125      	bne.n	80027aa <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d112      	bne.n	8002792 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d112      	bne.n	80027aa <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
 8002790:	e00b      	b.n	80027aa <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f043 0220 	orr.w	r2, r3, #32
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d103      	bne.n	80027bc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	50000100 	.word	0x50000100
 80027cc:	50000300 	.word	0x50000300
 80027d0:	50000700 	.word	0x50000700
 80027d4:	50000400 	.word	0x50000400

080027d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b09b      	sub	sp, #108	; 0x6c
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x22>
 8002812:	2302      	movs	r3, #2
 8002814:	e2c8      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x5b4>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 82ac 	bne.w	8002d86 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d81c      	bhi.n	8002870 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	461a      	mov	r2, r3
 800284a:	231f      	movs	r3, #31
 800284c:	4093      	lsls	r3, r2
 800284e:	43db      	mvns	r3, r3
 8002850:	4019      	ands	r1, r3
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa00 f203 	lsl.w	r2, r0, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
 800286e:	e063      	b.n	8002938 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b09      	cmp	r3, #9
 8002876:	d81e      	bhi.n	80028b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	3b1e      	subs	r3, #30
 800288c:	221f      	movs	r2, #31
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	4019      	ands	r1, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	4413      	add	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	3b1e      	subs	r3, #30
 80028a8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	635a      	str	r2, [r3, #52]	; 0x34
 80028b4:	e040      	b.n	8002938 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b0e      	cmp	r3, #14
 80028bc:	d81e      	bhi.n	80028fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	3b3c      	subs	r3, #60	; 0x3c
 80028d2:	221f      	movs	r2, #31
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	4019      	ands	r1, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	3b3c      	subs	r3, #60	; 0x3c
 80028ee:	fa00 f203 	lsl.w	r2, r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	639a      	str	r2, [r3, #56]	; 0x38
 80028fa:	e01d      	b.n	8002938 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	3b5a      	subs	r3, #90	; 0x5a
 8002910:	221f      	movs	r2, #31
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	4019      	ands	r1, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	3b5a      	subs	r3, #90	; 0x5a
 800292c:	fa00 f203 	lsl.w	r2, r0, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 80e5 	bne.w	8002b12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b09      	cmp	r3, #9
 800294e:	d91c      	bls.n	800298a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6999      	ldr	r1, [r3, #24]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	3b1e      	subs	r3, #30
 8002962:	2207      	movs	r2, #7
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	4019      	ands	r1, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6898      	ldr	r0, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	3b1e      	subs	r3, #30
 800297c:	fa00 f203 	lsl.w	r2, r0, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	619a      	str	r2, [r3, #24]
 8002988:	e019      	b.n	80029be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6959      	ldr	r1, [r3, #20]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	2207      	movs	r2, #7
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	4019      	ands	r1, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6898      	ldr	r0, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	fa00 f203 	lsl.w	r2, r0, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	08db      	lsrs	r3, r3, #3
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	3b01      	subs	r3, #1
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d84f      	bhi.n	8002a80 <HAL_ADC_ConfigChannel+0x28c>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a1b 	.word	0x08002a1b
 80029f0:	08002a3d 	.word	0x08002a3d
 80029f4:	08002a5f 	.word	0x08002a5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fe:	4b99      	ldr	r3, [pc, #612]	; (8002c64 <HAL_ADC_ConfigChannel+0x470>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	0691      	lsls	r1, r2, #26
 8002a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a18:	e07b      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a20:	4b90      	ldr	r3, [pc, #576]	; (8002c64 <HAL_ADC_ConfigChannel+0x470>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	0691      	lsls	r1, r2, #26
 8002a2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a3a:	e06a      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a42:	4b88      	ldr	r3, [pc, #544]	; (8002c64 <HAL_ADC_ConfigChannel+0x470>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6812      	ldr	r2, [r2, #0]
 8002a4a:	0691      	lsls	r1, r2, #26
 8002a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a5c:	e059      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a64:	4b7f      	ldr	r3, [pc, #508]	; (8002c64 <HAL_ADC_ConfigChannel+0x470>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	0691      	lsls	r1, r2, #26
 8002a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a70:	430a      	orrs	r2, r1
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002a7e:	e048      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	069b      	lsls	r3, r3, #26
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aa2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	069b      	lsls	r3, r3, #26
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ac6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d107      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	069b      	lsls	r3, r3, #26
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002b10:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x33e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x33e>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x340>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f040 8131 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d00f      	beq.n	8002b62 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43da      	mvns	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b60:	e049      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	409a      	lsls	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b09      	cmp	r3, #9
 8002b82:	d91c      	bls.n	8002bbe <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6999      	ldr	r1, [r3, #24]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	3b1b      	subs	r3, #27
 8002b96:	2207      	movs	r2, #7
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	4019      	ands	r1, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6898      	ldr	r0, [r3, #8]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	3b1b      	subs	r3, #27
 8002bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	619a      	str	r2, [r3, #24]
 8002bbc:	e01b      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6959      	ldr	r1, [r3, #20]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	4019      	ands	r1, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6898      	ldr	r0, [r3, #8]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfe:	d004      	beq.n	8002c0a <HAL_ADC_ConfigChannel+0x416>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_ADC_ConfigChannel+0x474>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x41a>
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <HAL_ADC_ConfigChannel+0x478>)
 8002c0c:	e000      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x41c>
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_ADC_ConfigChannel+0x47c>)
 8002c10:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002c2a:	2b11      	cmp	r3, #17
 8002c2c:	d105      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c3e:	2b12      	cmp	r3, #18
 8002c40:	f040 80ac 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f040 80a5 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c5a:	d10b      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x480>
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <HAL_ADC_ConfigChannel+0x474>)
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e023      	b.n	8002caa <HAL_ADC_ConfigChannel+0x4b6>
 8002c62:	bf00      	nop
 8002c64:	83fff000 	.word	0x83fff000
 8002c68:	50000100 	.word	0x50000100
 8002c6c:	50000300 	.word	0x50000300
 8002c70:	50000700 	.word	0x50000700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	; (8002db4 <HAL_ADC_ConfigChannel+0x5c0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d103      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x492>
 8002c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e011      	b.n	8002caa <HAL_ADC_ConfigChannel+0x4b6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d102      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x4a2>
 8002c90:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <HAL_ADC_ConfigChannel+0x5c8>)
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e009      	b.n	8002caa <HAL_ADC_ConfigChannel+0x4b6>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a48      	ldr	r2, [pc, #288]	; (8002dbc <HAL_ADC_ConfigChannel+0x5c8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x4b2>
 8002ca0:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <HAL_ADC_ConfigChannel+0x5c4>)
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e001      	b.n	8002caa <HAL_ADC_ConfigChannel+0x4b6>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d108      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x4d6>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x4d6>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x4d8>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d150      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x4fe>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x4fe>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x500>
 8002cf2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d13c      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d11d      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x548>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d08:	d118      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <HAL_ADC_ConfigChannel+0x5d0>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	0c9a      	lsrs	r2, r3, #18
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d2c:	e002      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f9      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d3a:	e02e      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b11      	cmp	r3, #17
 8002d42:	d10b      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x568>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d4c:	d106      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d58:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d5a:	e01e      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b12      	cmp	r3, #18
 8002d62:	d11a      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d70:	e013      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d84:	e00a      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002d98:	e000      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d9a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002da4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	376c      	adds	r7, #108	; 0x6c
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	50000100 	.word	0x50000100
 8002db8:	50000400 	.word	0x50000400
 8002dbc:	50000500 	.word	0x50000500
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	431bde83 	.word	0x431bde83

08002dc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d108      	bne.n	8002df4 <ADC_Enable+0x2c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <ADC_Enable+0x2c>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <ADC_Enable+0x2e>
 8002df4:	2300      	movs	r3, #0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d143      	bne.n	8002e82 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <ADC_Enable+0xc4>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00d      	beq.n	8002e24 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f043 0210 	orr.w	r2, r3, #16
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	f043 0201 	orr.w	r2, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e02f      	b.n	8002e84 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e34:	f7ff f88e 	bl	8001f54 <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e3a:	e01b      	b.n	8002e74 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e3c:	f7ff f88a 	bl	8001f54 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d914      	bls.n	8002e74 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d00d      	beq.n	8002e74 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f043 0210 	orr.w	r2, r3, #16
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d1dc      	bne.n	8002e3c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	8000003f 	.word	0x8000003f

08002e90 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d108      	bne.n	8002ebc <ADC_Disable+0x2c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <ADC_Disable+0x2c>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <ADC_Disable+0x2e>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d047      	beq.n	8002f52 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030d 	and.w	r3, r3, #13
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10f      	bne.n	8002ef0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0202 	orr.w	r2, r2, #2
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002ee8:	f7ff f834 	bl	8001f54 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002eee:	e029      	b.n	8002f44 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	f043 0210 	orr.w	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e023      	b.n	8002f54 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f0c:	f7ff f822 	bl	8001f54 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d914      	bls.n	8002f44 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10d      	bne.n	8002f44 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0210 	orr.w	r2, r3, #16
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	f043 0201 	orr.w	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e007      	b.n	8002f54 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d0dc      	beq.n	8002f0c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8e:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	60d3      	str	r3, [r2, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <__NVIC_GetPriorityGrouping+0x18>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	f003 0307 	and.w	r3, r3, #7
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db0b      	blt.n	8002fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4907      	ldr	r1, [pc, #28]	; (8002ff8 <__NVIC_EnableIRQ+0x38>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000e100 	.word	0xe000e100

08002ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db0a      	blt.n	8003026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	490c      	ldr	r1, [pc, #48]	; (8003048 <__NVIC_SetPriority+0x4c>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	440b      	add	r3, r1
 8003020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003024:	e00a      	b.n	800303c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4908      	ldr	r1, [pc, #32]	; (800304c <__NVIC_SetPriority+0x50>)
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	3b04      	subs	r3, #4
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	440b      	add	r3, r1
 800303a:	761a      	strb	r2, [r3, #24]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000e100 	.word	0xe000e100
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f1c3 0307 	rsb	r3, r3, #7
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf28      	it	cs
 800306e:	2304      	movcs	r3, #4
 8003070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3304      	adds	r3, #4
 8003076:	2b06      	cmp	r3, #6
 8003078:	d902      	bls.n	8003080 <NVIC_EncodePriority+0x30>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3b03      	subs	r3, #3
 800307e:	e000      	b.n	8003082 <NVIC_EncodePriority+0x32>
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	401a      	ands	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003098:	f04f 31ff 	mov.w	r1, #4294967295
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43d9      	mvns	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	4313      	orrs	r3, r2
         );
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c8:	d301      	bcc.n	80030ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00f      	b.n	80030ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <SysTick_Config+0x40>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d6:	210f      	movs	r1, #15
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	f7ff ff8e 	bl	8002ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <SysTick_Config+0x40>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <SysTick_Config+0x40>)
 80030e8:	2207      	movs	r2, #7
 80030ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff29 	bl	8002f5c <__NVIC_SetPriorityGrouping>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003124:	f7ff ff3e 	bl	8002fa4 <__NVIC_GetPriorityGrouping>
 8003128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff8e 	bl	8003050 <NVIC_EncodePriority>
 8003134:	4602      	mov	r2, r0
 8003136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff5d 	bl	8002ffc <__NVIC_SetPriority>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff31 	bl	8002fc0 <__NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffa2 	bl	80030b8 <SysTick_Config>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800318e:	e160      	b.n	8003452 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2101      	movs	r1, #1
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8152 	beq.w	800344c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d005      	beq.n	80031c0 <HAL_GPIO_Init+0x40>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0303 	and.w	r3, r3, #3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d130      	bne.n	8003222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	2203      	movs	r2, #3
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031f6:	2201      	movs	r2, #1
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4013      	ands	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f003 0201 	and.w	r2, r3, #1
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b03      	cmp	r3, #3
 800322c:	d017      	beq.n	800325e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	2203      	movs	r2, #3
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d123      	bne.n	80032b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3208      	adds	r2, #8
 8003272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	220f      	movs	r2, #15
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	6939      	ldr	r1, [r7, #16]
 80032ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0203 	and.w	r2, r3, #3
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80ac 	beq.w	800344c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f4:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_GPIO_Init+0x2f0>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <HAL_GPIO_Init+0x2f0>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6193      	str	r3, [r2, #24]
 8003300:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <HAL_GPIO_Init+0x2f0>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800330c:	4a59      	ldr	r2, [pc, #356]	; (8003474 <HAL_GPIO_Init+0x2f4>)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	220f      	movs	r2, #15
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003336:	d025      	beq.n	8003384 <HAL_GPIO_Init+0x204>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a4f      	ldr	r2, [pc, #316]	; (8003478 <HAL_GPIO_Init+0x2f8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01f      	beq.n	8003380 <HAL_GPIO_Init+0x200>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a4e      	ldr	r2, [pc, #312]	; (800347c <HAL_GPIO_Init+0x2fc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d019      	beq.n	800337c <HAL_GPIO_Init+0x1fc>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a4d      	ldr	r2, [pc, #308]	; (8003480 <HAL_GPIO_Init+0x300>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_GPIO_Init+0x1f8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a4c      	ldr	r2, [pc, #304]	; (8003484 <HAL_GPIO_Init+0x304>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00d      	beq.n	8003374 <HAL_GPIO_Init+0x1f4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a4b      	ldr	r2, [pc, #300]	; (8003488 <HAL_GPIO_Init+0x308>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <HAL_GPIO_Init+0x1f0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a4a      	ldr	r2, [pc, #296]	; (800348c <HAL_GPIO_Init+0x30c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_GPIO_Init+0x1ec>
 8003368:	2306      	movs	r3, #6
 800336a:	e00c      	b.n	8003386 <HAL_GPIO_Init+0x206>
 800336c:	2307      	movs	r3, #7
 800336e:	e00a      	b.n	8003386 <HAL_GPIO_Init+0x206>
 8003370:	2305      	movs	r3, #5
 8003372:	e008      	b.n	8003386 <HAL_GPIO_Init+0x206>
 8003374:	2304      	movs	r3, #4
 8003376:	e006      	b.n	8003386 <HAL_GPIO_Init+0x206>
 8003378:	2303      	movs	r3, #3
 800337a:	e004      	b.n	8003386 <HAL_GPIO_Init+0x206>
 800337c:	2302      	movs	r3, #2
 800337e:	e002      	b.n	8003386 <HAL_GPIO_Init+0x206>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_GPIO_Init+0x206>
 8003384:	2300      	movs	r3, #0
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	f002 0203 	and.w	r2, r2, #3
 800338c:	0092      	lsls	r2, r2, #2
 800338e:	4093      	lsls	r3, r2
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003396:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_GPIO_Init+0x2f4>)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	3302      	adds	r3, #2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a4:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_GPIO_Init+0x310>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033c8:	4a31      	ldr	r2, [pc, #196]	; (8003490 <HAL_GPIO_Init+0x310>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ce:	4b30      	ldr	r3, [pc, #192]	; (8003490 <HAL_GPIO_Init+0x310>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033f2:	4a27      	ldr	r2, [pc, #156]	; (8003490 <HAL_GPIO_Init+0x310>)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_GPIO_Init+0x310>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800341c:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <HAL_GPIO_Init+0x310>)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_GPIO_Init+0x310>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_GPIO_Init+0x310>)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3301      	adds	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	f47f ae97 	bne.w	8003190 <HAL_GPIO_Init+0x10>
  }
}
 8003462:	bf00      	nop
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40021000 	.word	0x40021000
 8003474:	40010000 	.word	0x40010000
 8003478:	48000400 	.word	0x48000400
 800347c:	48000800 	.word	0x48000800
 8003480:	48000c00 	.word	0x48000c00
 8003484:	48001000 	.word	0x48001000
 8003488:	48001400 	.word	0x48001400
 800348c:	48001800 	.word	0x48001800
 8003490:	40010400 	.word	0x40010400

08003494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	e001      	b.n	80034b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
 80034d0:	4613      	mov	r3, r2
 80034d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d4:	787b      	ldrb	r3, [r7, #1]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034e0:	e002      	b.n	80034e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e081      	b.n	800360a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fc12 	bl	8000d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003544:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003554:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	e006      	b.n	800357c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800357a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d104      	bne.n	800358e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800358c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800359c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69d9      	ldr	r1, [r3, #28]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	817b      	strh	r3, [r7, #10]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b20      	cmp	r3, #32
 8003632:	f040 80da 	bne.w	80037ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_I2C_Master_Transmit+0x30>
 8003640:	2302      	movs	r3, #2
 8003642:	e0d3      	b.n	80037ec <HAL_I2C_Master_Transmit+0x1d8>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800364c:	f7fe fc82 	bl	8001f54 <HAL_GetTick>
 8003650:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2319      	movs	r3, #25
 8003658:	2201      	movs	r2, #1
 800365a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8f0 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0be      	b.n	80037ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2221      	movs	r2, #33	; 0x21
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2210      	movs	r2, #16
 800367a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	893a      	ldrh	r2, [r7, #8]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29b      	uxth	r3, r3
 800369c:	2bff      	cmp	r3, #255	; 0xff
 800369e:	d90e      	bls.n	80036be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	8979      	ldrh	r1, [r7, #10]
 80036ae:	4b51      	ldr	r3, [pc, #324]	; (80037f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fa7e 	bl	8003bb8 <I2C_TransferConfig>
 80036bc:	e06c      	b.n	8003798 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	8979      	ldrh	r1, [r7, #10]
 80036d0:	4b48      	ldr	r3, [pc, #288]	; (80037f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fa6d 	bl	8003bb8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036de:	e05b      	b.n	8003798 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	6a39      	ldr	r1, [r7, #32]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f8fc 	bl	80038e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e07b      	b.n	80037ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d034      	beq.n	8003798 <HAL_I2C_Master_Transmit+0x184>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	d130      	bne.n	8003798 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f87f 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e04d      	b.n	80037ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	2bff      	cmp	r3, #255	; 0xff
 8003758:	d90e      	bls.n	8003778 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	b2da      	uxtb	r2, r3
 8003766:	8979      	ldrh	r1, [r7, #10]
 8003768:	2300      	movs	r3, #0
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fa21 	bl	8003bb8 <I2C_TransferConfig>
 8003776:	e00f      	b.n	8003798 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	b2da      	uxtb	r2, r3
 8003788:	8979      	ldrh	r1, [r7, #10]
 800378a:	2300      	movs	r3, #0
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fa10 	bl	8003bb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d19e      	bne.n	80036e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	6a39      	ldr	r1, [r7, #32]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f8e2 	bl	8003970 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e01a      	b.n	80037ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2220      	movs	r2, #32
 80037bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
  }
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	80002000 	.word	0x80002000
 80037f8:	fe00e800 	.word	0xfe00e800

080037fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d103      	bne.n	800381a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d007      	beq.n	8003838 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	619a      	str	r2, [r3, #24]
  }
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003854:	e031      	b.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d02d      	beq.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fe fb79 	bl	8001f54 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d122      	bne.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4013      	ands	r3, r2
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	429a      	cmp	r2, r3
 8003890:	d113      	bne.n	80038ba <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d0be      	beq.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ee:	e033      	b.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f87f 	bl	80039f8 <I2C_IsErrorOccurred>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e031      	b.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d025      	beq.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390c:	f7fe fb22 	bl	8001f54 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d11a      	bne.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d013      	beq.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003934:	f043 0220 	orr.w	r2, r3, #32
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e007      	b.n	8003968 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d1c4      	bne.n	80038f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800397c:	e02f      	b.n	80039de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f838 	bl	80039f8 <I2C_IsErrorOccurred>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e02d      	b.n	80039ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fe fadf 	bl	8001f54 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11a      	bne.n	80039de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d013      	beq.n	80039de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f043 0220 	orr.w	r2, r3, #32
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e007      	b.n	80039ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d1c8      	bne.n	800397e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d068      	beq.n	8003af6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a2c:	e049      	b.n	8003ac2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d045      	beq.n	8003ac2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a36:	f7fe fa8d 	bl	8001f54 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d302      	bcc.n	8003a4c <I2C_IsErrorOccurred+0x54>
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d13a      	bne.n	8003ac2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a6e:	d121      	bne.n	8003ab4 <I2C_IsErrorOccurred+0xbc>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a76:	d01d      	beq.n	8003ab4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d01a      	beq.n	8003ab4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a8e:	f7fe fa61 	bl	8001f54 <HAL_GetTick>
 8003a92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a94:	e00e      	b.n	8003ab4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a96:	f7fe fa5d 	bl	8001f54 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b19      	cmp	r3, #25
 8003aa2:	d907      	bls.n	8003ab4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	f043 0320 	orr.w	r3, r3, #32
 8003aaa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003ab2:	e006      	b.n	8003ac2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d1e9      	bne.n	8003a96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d003      	beq.n	8003ad8 <I2C_IsErrorOccurred+0xe0>
 8003ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0aa      	beq.n	8003a2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f043 0308 	orr.w	r3, r3, #8
 8003b30:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	f043 0302 	orr.w	r3, r3, #2
 8003b52:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01c      	beq.n	8003ba6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f7ff fe45 	bl	80037fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b0d      	ldr	r3, [pc, #52]	; (8003bb4 <I2C_IsErrorOccurred+0x1bc>)
 8003b7e:	400b      	ands	r3, r1
 8003b80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3728      	adds	r7, #40	; 0x28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	fe00e800 	.word	0xfe00e800

08003bb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	817b      	strh	r3, [r7, #10]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bd0:	7a7b      	ldrb	r3, [r7, #9]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bd8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003be6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	0d5b      	lsrs	r3, r3, #21
 8003bf2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <I2C_TransferConfig+0x60>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	ea02 0103 	and.w	r1, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	03ff63ff 	.word	0x03ff63ff

08003c1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d138      	bne.n	8003ca4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e032      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6819      	ldr	r1, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	e000      	b.n	8003ca6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
  }
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d139      	bne.n	8003d3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e033      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2224      	movs	r2, #36	; 0x24
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d5c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f001 b83a 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 816f 	beq.w	8004066 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d88:	4bb5      	ldr	r3, [pc, #724]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d00c      	beq.n	8003dae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d94:	4bb2      	ldr	r3, [pc, #712]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d15c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x10e>
 8003da0:	4baf      	ldr	r3, [pc, #700]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d155      	bne.n	8003e5a <HAL_RCC_OscConfig+0x10e>
 8003dae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003db2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003dc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f043 0301 	orr.w	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d102      	bne.n	8003de0 <HAL_RCC_OscConfig+0x94>
 8003dda:	4ba1      	ldr	r3, [pc, #644]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	e015      	b.n	8003e0c <HAL_RCC_OscConfig+0xc0>
 8003de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003de4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003dec:	fa93 f3a3 	rbit	r3, r3
 8003df0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003df4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003df8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003dfc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003e08:	4b95      	ldr	r3, [pc, #596]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e10:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003e14:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003e18:	fa92 f2a2 	rbit	r2, r2
 8003e1c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8003e20:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003e24:	fab2 f282 	clz	r2, r2
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	f042 0220 	orr.w	r2, r2, #32
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	f002 021f 	and.w	r2, r2, #31
 8003e34:	2101      	movs	r1, #1
 8003e36:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8111 	beq.w	8004064 <HAL_RCC_OscConfig+0x318>
 8003e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 8108 	bne.w	8004064 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f000 bfc6 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x12e>
 8003e6c:	4b7c      	ldr	r3, [pc, #496]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a7b      	ldr	r2, [pc, #492]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e036      	b.n	8003ee8 <HAL_RCC_OscConfig+0x19c>
 8003e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x158>
 8003e8a:	4b75      	ldr	r3, [pc, #468]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a74      	ldr	r2, [pc, #464]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b72      	ldr	r3, [pc, #456]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a71      	ldr	r2, [pc, #452]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e021      	b.n	8003ee8 <HAL_RCC_OscConfig+0x19c>
 8003ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x184>
 8003eb6:	4b6a      	ldr	r3, [pc, #424]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a69      	ldr	r2, [pc, #420]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b67      	ldr	r3, [pc, #412]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a66      	ldr	r2, [pc, #408]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0x19c>
 8003ed0:	4b63      	ldr	r3, [pc, #396]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a62      	ldr	r2, [pc, #392]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b60      	ldr	r3, [pc, #384]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a5f      	ldr	r2, [pc, #380]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d059      	beq.n	8003fac <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f82c 	bl	8001f54 <HAL_GetTick>
 8003efc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f02:	f7fe f827 	bl	8001f54 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b64      	cmp	r3, #100	; 0x64
 8003f10:	d902      	bls.n	8003f18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	f000 bf67 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>
 8003f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f1c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003f24:	fa93 f3a3 	rbit	r3, r3
 8003f28:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003f2c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	095b      	lsrs	r3, r3, #5
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d102      	bne.n	8003f4a <HAL_RCC_OscConfig+0x1fe>
 8003f44:	4b46      	ldr	r3, [pc, #280]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x22a>
 8003f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f4e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003f66:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f7a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003f7e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003f82:	fa92 f2a2 	rbit	r2, r2
 8003f86:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003f8a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003f8e:	fab2 f282 	clz	r2, r2
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	f042 0220 	orr.w	r2, r2, #32
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	f002 021f 	and.w	r2, r2, #31
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ab      	beq.n	8003f02 <HAL_RCC_OscConfig+0x1b6>
 8003faa:	e05c      	b.n	8004066 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd ffd2 	bl	8001f54 <HAL_GetTick>
 8003fb0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fb6:	f7fd ffcd 	bl	8001f54 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d902      	bls.n	8003fcc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	f000 bf0d 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>
 8003fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fd0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003fe0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe4:	fab3 f383 	clz	r3, r3
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <HAL_RCC_OscConfig+0x2b2>
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	e015      	b.n	800402a <HAL_RCC_OscConfig+0x2de>
 8003ffe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004002:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004016:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800401a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <HAL_RCC_OscConfig+0x314>)
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800402e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004032:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004036:	fa92 f2a2 	rbit	r2, r2
 800403a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800403e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004042:	fab2 f282 	clz	r2, r2
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	f042 0220 	orr.w	r2, r2, #32
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	f002 021f 	and.w	r2, r2, #31
 8004052:	2101      	movs	r1, #1
 8004054:	fa01 f202 	lsl.w	r2, r1, r2
 8004058:	4013      	ands	r3, r2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ab      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x26a>
 800405e:	e002      	b.n	8004066 <HAL_RCC_OscConfig+0x31a>
 8004060:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 817f 	beq.w	800437a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800407c:	4ba7      	ldr	r3, [pc, #668]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004088:	4ba4      	ldr	r3, [pc, #656]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d173      	bne.n	800417c <HAL_RCC_OscConfig+0x430>
 8004094:	4ba1      	ldr	r3, [pc, #644]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a0:	d16c      	bne.n	800417c <HAL_RCC_OscConfig+0x430>
 80040a2:	2302      	movs	r3, #2
 80040a4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80040b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b8:	fab3 f383 	clz	r3, r3
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d102      	bne.n	80040d2 <HAL_RCC_OscConfig+0x386>
 80040cc:	4b93      	ldr	r3, [pc, #588]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	e013      	b.n	80040fa <HAL_RCC_OscConfig+0x3ae>
 80040d2:	2302      	movs	r3, #2
 80040d4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80040e4:	2302      	movs	r3, #2
 80040e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80040ea:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80040ee:	fa93 f3a3 	rbit	r3, r3
 80040f2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80040f6:	4b89      	ldr	r3, [pc, #548]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2202      	movs	r2, #2
 80040fc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004100:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004104:	fa92 f2a2 	rbit	r2, r2
 8004108:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800410c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004110:	fab2 f282 	clz	r2, r2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	f042 0220 	orr.w	r2, r2, #32
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f002 021f 	and.w	r2, r2, #31
 8004120:	2101      	movs	r1, #1
 8004122:	fa01 f202 	lsl.w	r2, r1, r2
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCC_OscConfig+0x3f6>
 800412c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004130:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d002      	beq.n	8004142 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f000 be52 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800414e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	21f8      	movs	r1, #248	; 0xf8
 8004158:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004160:	fa91 f1a1 	rbit	r1, r1
 8004164:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004168:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800416c:	fab1 f181 	clz	r1, r1
 8004170:	b2c9      	uxtb	r1, r1
 8004172:	408b      	lsls	r3, r1
 8004174:	4969      	ldr	r1, [pc, #420]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e0fe      	b.n	800437a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800417c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004180:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 8088 	beq.w	800429e <HAL_RCC_OscConfig+0x552>
 800418e:	2301      	movs	r3, #1
 8004190:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004198:	fa93 f3a3 	rbit	r3, r3
 800419c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80041a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041ae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	461a      	mov	r2, r3
 80041b6:	2301      	movs	r3, #1
 80041b8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fd fecb 	bl	8001f54 <HAL_GetTick>
 80041be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c2:	e00a      	b.n	80041da <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fd fec6 	bl	8001f54 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d902      	bls.n	80041da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	f000 be06 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>
 80041da:	2302      	movs	r3, #2
 80041dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80041e4:	fa93 f3a3 	rbit	r3, r3
 80041e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80041ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d102      	bne.n	800420a <HAL_RCC_OscConfig+0x4be>
 8004204:	4b45      	ldr	r3, [pc, #276]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	e013      	b.n	8004232 <HAL_RCC_OscConfig+0x4e6>
 800420a:	2302      	movs	r3, #2
 800420c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004210:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800421c:	2302      	movs	r3, #2
 800421e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004222:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800422e:	4b3b      	ldr	r3, [pc, #236]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2202      	movs	r2, #2
 8004234:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004238:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800423c:	fa92 f2a2 	rbit	r2, r2
 8004240:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004244:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004248:	fab2 f282 	clz	r2, r2
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	f042 0220 	orr.w	r2, r2, #32
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	f002 021f 	and.w	r2, r2, #31
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f202 	lsl.w	r2, r1, r2
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0af      	beq.n	80041c4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004270:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	21f8      	movs	r1, #248	; 0xf8
 800427a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004282:	fa91 f1a1 	rbit	r1, r1
 8004286:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800428a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800428e:	fab1 f181 	clz	r1, r1
 8004292:	b2c9      	uxtb	r1, r1
 8004294:	408b      	lsls	r3, r1
 8004296:	4921      	ldr	r1, [pc, #132]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 8004298:	4313      	orrs	r3, r2
 800429a:	600b      	str	r3, [r1, #0]
 800429c:	e06d      	b.n	800437a <HAL_RCC_OscConfig+0x62e>
 800429e:	2301      	movs	r3, #1
 80042a0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80042b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b4:	fab3 f383 	clz	r3, r3
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	461a      	mov	r2, r3
 80042c6:	2300      	movs	r3, #0
 80042c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fd fe43 	bl	8001f54 <HAL_GetTick>
 80042ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d4:	f7fd fe3e 	bl	8001f54 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d902      	bls.n	80042ea <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	f000 bd7e 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>
 80042ea:	2302      	movs	r3, #2
 80042ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80042fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004300:	fab3 f383 	clz	r3, r3
 8004304:	b2db      	uxtb	r3, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d105      	bne.n	8004320 <HAL_RCC_OscConfig+0x5d4>
 8004314:	4b01      	ldr	r3, [pc, #4]	; (800431c <HAL_RCC_OscConfig+0x5d0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	e016      	b.n	8004348 <HAL_RCC_OscConfig+0x5fc>
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000
 8004320:	2302      	movs	r3, #2
 8004322:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004332:	2302      	movs	r3, #2
 8004334:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004338:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800433c:	fa93 f3a3 	rbit	r3, r3
 8004340:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004344:	4bbf      	ldr	r3, [pc, #764]	; (8004644 <HAL_RCC_OscConfig+0x8f8>)
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	2202      	movs	r2, #2
 800434a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800434e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004352:	fa92 f2a2 	rbit	r2, r2
 8004356:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800435a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800435e:	fab2 f282 	clz	r2, r2
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	f042 0220 	orr.w	r2, r2, #32
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	f002 021f 	and.w	r2, r2, #31
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f202 	lsl.w	r2, r1, r2
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ac      	bne.n	80042d4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800437e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8113 	beq.w	80045b6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004394:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d07c      	beq.n	800449a <HAL_RCC_OscConfig+0x74e>
 80043a0:	2301      	movs	r3, #1
 80043a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80043b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	4ba2      	ldr	r3, [pc, #648]	; (8004648 <HAL_RCC_OscConfig+0x8fc>)
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	461a      	mov	r2, r3
 80043c6:	2301      	movs	r3, #1
 80043c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ca:	f7fd fdc3 	bl	8001f54 <HAL_GetTick>
 80043ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d4:	f7fd fdbe 	bl	8001f54 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d902      	bls.n	80043ea <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	f000 bcfe 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>
 80043ea:	2302      	movs	r3, #2
 80043ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f4:	fa93 f2a3 	rbit	r2, r3
 80043f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80043fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800440a:	2202      	movs	r2, #2
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	fa93 f2a3 	rbit	r2, r3
 800441c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800442a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800442e:	2202      	movs	r2, #2
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004436:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	fa93 f2a3 	rbit	r2, r3
 8004440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004444:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004448:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b7e      	ldr	r3, [pc, #504]	; (8004644 <HAL_RCC_OscConfig+0x8f8>)
 800444c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004456:	2102      	movs	r1, #2
 8004458:	6019      	str	r1, [r3, #0]
 800445a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800445e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	fa93 f1a3 	rbit	r1, r3
 8004468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800446c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004470:	6019      	str	r1, [r3, #0]
  return result;
 8004472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004476:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 031f 	and.w	r3, r3, #31
 800448c:	2101      	movs	r1, #1
 800448e:	fa01 f303 	lsl.w	r3, r1, r3
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d09d      	beq.n	80043d4 <HAL_RCC_OscConfig+0x688>
 8004498:	e08d      	b.n	80045b6 <HAL_RCC_OscConfig+0x86a>
 800449a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800449e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	fa93 f2a3 	rbit	r2, r3
 80044b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80044bc:	601a      	str	r2, [r3, #0]
  return result;
 80044be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80044c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80044c6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	4b5d      	ldr	r3, [pc, #372]	; (8004648 <HAL_RCC_OscConfig+0x8fc>)
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	461a      	mov	r2, r3
 80044d8:	2300      	movs	r3, #0
 80044da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fd fd3a 	bl	8001f54 <HAL_GetTick>
 80044e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e4:	e00a      	b.n	80044fc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e6:	f7fd fd35 	bl	8001f54 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d902      	bls.n	80044fc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	f000 bc75 	b.w	8004de6 <HAL_RCC_OscConfig+0x109a>
 80044fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004500:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004504:	2202      	movs	r2, #2
 8004506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004508:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800450c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	fa93 f2a3 	rbit	r2, r3
 8004516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800451a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004528:	2202      	movs	r2, #2
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	fa93 f2a3 	rbit	r2, r3
 800453a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800453e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004548:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800454c:	2202      	movs	r2, #2
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004554:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004562:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004566:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004568:	4b36      	ldr	r3, [pc, #216]	; (8004644 <HAL_RCC_OscConfig+0x8f8>)
 800456a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800456c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004570:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004574:	2102      	movs	r1, #2
 8004576:	6019      	str	r1, [r3, #0]
 8004578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800457c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	fa93 f1a3 	rbit	r1, r3
 8004586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800458a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800458e:	6019      	str	r1, [r3, #0]
  return result;
 8004590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004594:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2101      	movs	r1, #1
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d197      	bne.n	80044e6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 81a5 	beq.w	8004916 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <HAL_RCC_OscConfig+0x8f8>)
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045de:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCC_OscConfig+0x8f8>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_RCC_OscConfig+0x8f8>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e8:	61d3      	str	r3, [r2, #28]
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <HAL_RCC_OscConfig+0x8f8>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80045f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004600:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004604:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004606:	2301      	movs	r3, #1
 8004608:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <HAL_RCC_OscConfig+0x900>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d121      	bne.n	800465c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <HAL_RCC_OscConfig+0x900>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0b      	ldr	r2, [pc, #44]	; (800464c <HAL_RCC_OscConfig+0x900>)
 800461e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004622:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004624:	f7fd fc96 	bl	8001f54 <HAL_GetTick>
 8004628:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	e010      	b.n	8004650 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fd fc91 	bl	8001f54 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d908      	bls.n	8004650 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e3d1      	b.n	8004de6 <HAL_RCC_OscConfig+0x109a>
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
 8004648:	10908120 	.word	0x10908120
 800464c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004650:	4b8d      	ldr	r3, [pc, #564]	; (8004888 <HAL_RCC_OscConfig+0xb3c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0e8      	beq.n	800462e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004660:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x92e>
 800466c:	4b87      	ldr	r3, [pc, #540]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	4a86      	ldr	r2, [pc, #536]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6213      	str	r3, [r2, #32]
 8004678:	e035      	b.n	80046e6 <HAL_RCC_OscConfig+0x99a>
 800467a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800467e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10c      	bne.n	80046a4 <HAL_RCC_OscConfig+0x958>
 800468a:	4b80      	ldr	r3, [pc, #512]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	4a7f      	ldr	r2, [pc, #508]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	6213      	str	r3, [r2, #32]
 8004696:	4b7d      	ldr	r3, [pc, #500]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4a7c      	ldr	r2, [pc, #496]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 800469c:	f023 0304 	bic.w	r3, r3, #4
 80046a0:	6213      	str	r3, [r2, #32]
 80046a2:	e020      	b.n	80046e6 <HAL_RCC_OscConfig+0x99a>
 80046a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d10c      	bne.n	80046ce <HAL_RCC_OscConfig+0x982>
 80046b4:	4b75      	ldr	r3, [pc, #468]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4a74      	ldr	r2, [pc, #464]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80046ba:	f043 0304 	orr.w	r3, r3, #4
 80046be:	6213      	str	r3, [r2, #32]
 80046c0:	4b72      	ldr	r3, [pc, #456]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4a71      	ldr	r2, [pc, #452]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6213      	str	r3, [r2, #32]
 80046cc:	e00b      	b.n	80046e6 <HAL_RCC_OscConfig+0x99a>
 80046ce:	4b6f      	ldr	r3, [pc, #444]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	4a6e      	ldr	r2, [pc, #440]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	6213      	str	r3, [r2, #32]
 80046da:	4b6c      	ldr	r3, [pc, #432]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	4a6b      	ldr	r2, [pc, #428]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8081 	beq.w	80047fa <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f8:	f7fd fc2c 	bl	8001f54 <HAL_GetTick>
 80046fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	e00b      	b.n	800471a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fd fc27 	bl	8001f54 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e365      	b.n	8004de6 <HAL_RCC_OscConfig+0x109a>
 800471a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800471e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004722:	2202      	movs	r2, #2
 8004724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800472a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	fa93 f2a3 	rbit	r2, r3
 8004734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004738:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004742:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004746:	2202      	movs	r2, #2
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800474e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	fa93 f2a3 	rbit	r2, r3
 8004758:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800475c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004760:	601a      	str	r2, [r3, #0]
  return result;
 8004762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004766:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800476a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d102      	bne.n	8004786 <HAL_RCC_OscConfig+0xa3a>
 8004780:	4b42      	ldr	r3, [pc, #264]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	e013      	b.n	80047ae <HAL_RCC_OscConfig+0xa62>
 8004786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800478a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800478e:	2202      	movs	r2, #2
 8004790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004796:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	fa93 f2a3 	rbit	r2, r3
 80047a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047a4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	4b38      	ldr	r3, [pc, #224]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80047b6:	2102      	movs	r1, #2
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	fa92 f1a2 	rbit	r1, r2
 80047c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047cc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80047d0:	6011      	str	r1, [r2, #0]
  return result;
 80047d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80047d6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	fab2 f282 	clz	r2, r2
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	f002 021f 	and.w	r2, r2, #31
 80047ec:	2101      	movs	r1, #1
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d084      	beq.n	8004702 <HAL_RCC_OscConfig+0x9b6>
 80047f8:	e083      	b.n	8004902 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fd fbab 	bl	8001f54 <HAL_GetTick>
 80047fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fd fba6 	bl	8001f54 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e2e4      	b.n	8004de6 <HAL_RCC_OscConfig+0x109a>
 800481c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004820:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004824:	2202      	movs	r2, #2
 8004826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800482c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	fa93 f2a3 	rbit	r2, r3
 8004836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800483a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004844:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004848:	2202      	movs	r2, #2
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004850:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	fa93 f2a3 	rbit	r2, r3
 800485a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800485e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004862:	601a      	str	r2, [r3, #0]
  return result;
 8004864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004868:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800486c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0xb44>
 8004882:	4b02      	ldr	r3, [pc, #8]	; (800488c <HAL_RCC_OscConfig+0xb40>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	e017      	b.n	80048b8 <HAL_RCC_OscConfig+0xb6c>
 8004888:	40007000 	.word	0x40007000
 800488c:	40021000 	.word	0x40021000
 8004890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004894:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004898:	2202      	movs	r2, #2
 800489a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	fa93 f2a3 	rbit	r2, r3
 80048aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	4bb3      	ldr	r3, [pc, #716]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80048c0:	2102      	movs	r1, #2
 80048c2:	6011      	str	r1, [r2, #0]
 80048c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	fa92 f1a2 	rbit	r1, r2
 80048d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048d6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80048da:	6011      	str	r1, [r2, #0]
  return result;
 80048dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80048e0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80048e4:	6812      	ldr	r2, [r2, #0]
 80048e6:	fab2 f282 	clz	r2, r2
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	f002 021f 	and.w	r2, r2, #31
 80048f6:	2101      	movs	r1, #1
 80048f8:	fa01 f202 	lsl.w	r2, r1, r2
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d180      	bne.n	8004804 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004902:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004906:	2b01      	cmp	r3, #1
 8004908:	d105      	bne.n	8004916 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490a:	4b9e      	ldr	r3, [pc, #632]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	4a9d      	ldr	r2, [pc, #628]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 8004910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004914:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800491a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 825e 	beq.w	8004de4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004928:	4b96      	ldr	r3, [pc, #600]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b08      	cmp	r3, #8
 8004932:	f000 821f 	beq.w	8004d74 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004936:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800493a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	2b02      	cmp	r3, #2
 8004944:	f040 8170 	bne.w	8004c28 <HAL_RCC_OscConfig+0xedc>
 8004948:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800495a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	fa93 f2a3 	rbit	r2, r3
 8004964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004968:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800496c:	601a      	str	r2, [r3, #0]
  return result;
 800496e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004972:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004976:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004982:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	461a      	mov	r2, r3
 800498a:	2300      	movs	r3, #0
 800498c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498e:	f7fd fae1 	bl	8001f54 <HAL_GetTick>
 8004992:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004996:	e009      	b.n	80049ac <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004998:	f7fd fadc 	bl	8001f54 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e21c      	b.n	8004de6 <HAL_RCC_OscConfig+0x109a>
 80049ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	fa93 f2a3 	rbit	r2, r3
 80049c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80049d0:	601a      	str	r2, [r3, #0]
  return result;
 80049d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80049da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049dc:	fab3 f383 	clz	r3, r3
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d102      	bne.n	80049f6 <HAL_RCC_OscConfig+0xcaa>
 80049f0:	4b64      	ldr	r3, [pc, #400]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	e027      	b.n	8004a46 <HAL_RCC_OscConfig+0xcfa>
 80049f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80049fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80049fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a08:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	fa93 f2a3 	rbit	r2, r3
 8004a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a16:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a20:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a2e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	fa93 f2a3 	rbit	r2, r3
 8004a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a3c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a4a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004a4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a52:	6011      	str	r1, [r2, #0]
 8004a54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a58:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004a5c:	6812      	ldr	r2, [r2, #0]
 8004a5e:	fa92 f1a2 	rbit	r1, r2
 8004a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a66:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004a6a:	6011      	str	r1, [r2, #0]
  return result;
 8004a6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004a70:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	fab2 f282 	clz	r2, r2
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	f042 0220 	orr.w	r2, r2, #32
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	f002 021f 	and.w	r2, r2, #31
 8004a86:	2101      	movs	r1, #1
 8004a88:	fa01 f202 	lsl.w	r2, r1, r2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d182      	bne.n	8004998 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a92:	4b3c      	ldr	r3, [pc, #240]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	f023 020f 	bic.w	r2, r3, #15
 8004a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	4937      	ldr	r1, [pc, #220]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004aac:	4b35      	ldr	r3, [pc, #212]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ab8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6a19      	ldr	r1, [r3, #32]
 8004ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ac4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	430b      	orrs	r3, r1
 8004ace:	492d      	ldr	r1, [pc, #180]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
 8004ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ad8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ae6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	fa93 f2a3 	rbit	r2, r3
 8004af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004af4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004af8:	601a      	str	r2, [r3, #0]
  return result;
 8004afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004afe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004b02:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b04:	fab3 f383 	clz	r3, r3
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	461a      	mov	r2, r3
 8004b16:	2301      	movs	r3, #1
 8004b18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1a:	f7fd fa1b 	bl	8001f54 <HAL_GetTick>
 8004b1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b22:	e009      	b.n	8004b38 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fd fa16 	bl	8001f54 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e156      	b.n	8004de6 <HAL_RCC_OscConfig+0x109a>
 8004b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b3c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b4a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	fa93 f2a3 	rbit	r2, r3
 8004b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b58:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004b5c:	601a      	str	r2, [r3, #0]
  return result;
 8004b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b62:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004b66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b68:	fab3 f383 	clz	r3, r3
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCC_OscConfig+0xe3c>
 8004b7c:	4b01      	ldr	r3, [pc, #4]	; (8004b84 <HAL_RCC_OscConfig+0xe38>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	e02a      	b.n	8004bd8 <HAL_RCC_OscConfig+0xe8c>
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b9a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	fa93 f2a3 	rbit	r2, r3
 8004ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bc0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	fa93 f2a3 	rbit	r2, r3
 8004bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bce:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	4b86      	ldr	r3, [pc, #536]	; (8004df0 <HAL_RCC_OscConfig+0x10a4>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bdc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004be0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004be4:	6011      	str	r1, [r2, #0]
 8004be6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	fa92 f1a2 	rbit	r1, r2
 8004bf4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004bf8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004bfc:	6011      	str	r1, [r2, #0]
  return result;
 8004bfe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c02:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	fab2 f282 	clz	r2, r2
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	f042 0220 	orr.w	r2, r2, #32
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	f002 021f 	and.w	r2, r2, #31
 8004c18:	2101      	movs	r1, #1
 8004c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f43f af7f 	beq.w	8004b24 <HAL_RCC_OscConfig+0xdd8>
 8004c26:	e0dd      	b.n	8004de4 <HAL_RCC_OscConfig+0x1098>
 8004c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004c30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c3a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	fa93 f2a3 	rbit	r2, r3
 8004c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c48:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004c4c:	601a      	str	r2, [r3, #0]
  return result;
 8004c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c52:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004c56:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c58:	fab3 f383 	clz	r3, r3
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c62:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fd f971 	bl	8001f54 <HAL_GetTick>
 8004c72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c76:	e009      	b.n	8004c8c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c78:	f7fd f96c 	bl	8001f54 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0ac      	b.n	8004de6 <HAL_RCC_OscConfig+0x109a>
 8004c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c9e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	fa93 f2a3 	rbit	r2, r3
 8004ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004cb0:	601a      	str	r2, [r3, #0]
  return result;
 8004cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cb6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004cba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_OscConfig+0xf8a>
 8004cd0:	4b47      	ldr	r3, [pc, #284]	; (8004df0 <HAL_RCC_OscConfig+0x10a4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	e027      	b.n	8004d26 <HAL_RCC_OscConfig+0xfda>
 8004cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cda:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	fa93 f2a3 	rbit	r2, r3
 8004cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d00:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d0e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	fa93 f2a3 	rbit	r2, r3
 8004d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d1c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	4b33      	ldr	r3, [pc, #204]	; (8004df0 <HAL_RCC_OscConfig+0x10a4>)
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d2a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004d2e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d32:	6011      	str	r1, [r2, #0]
 8004d34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d38:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	fa92 f1a2 	rbit	r1, r2
 8004d42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d46:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004d4a:	6011      	str	r1, [r2, #0]
  return result;
 8004d4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004d50:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	fab2 f282 	clz	r2, r2
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	f042 0220 	orr.w	r2, r2, #32
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	f002 021f 	and.w	r2, r2, #31
 8004d66:	2101      	movs	r1, #1
 8004d68:	fa01 f202 	lsl.w	r2, r1, r2
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d182      	bne.n	8004c78 <HAL_RCC_OscConfig+0xf2c>
 8004d72:	e037      	b.n	8004de4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e02e      	b.n	8004de6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d88:	4b19      	ldr	r3, [pc, #100]	; (8004df0 <HAL_RCC_OscConfig+0x10a4>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004d90:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <HAL_RCC_OscConfig+0x10a4>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004d98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004d9c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d117      	bne.n	8004de0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004db0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004db4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dbc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d10b      	bne.n	8004de0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40021000 	.word	0x40021000

08004df4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b09e      	sub	sp, #120	; 0x78
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e162      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b90      	ldr	r3, [pc, #576]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d910      	bls.n	8004e3c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b8d      	ldr	r3, [pc, #564]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 0207 	bic.w	r2, r3, #7
 8004e22:	498b      	ldr	r1, [pc, #556]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b89      	ldr	r3, [pc, #548]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e14a      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e48:	4b82      	ldr	r3, [pc, #520]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	497f      	ldr	r1, [pc, #508]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80dc 	beq.w	8005020 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d13c      	bne.n	8004eea <HAL_RCC_ClockConfig+0xf6>
 8004e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e80:	fab3 f383 	clz	r3, r3
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d102      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xa6>
 8004e94:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	e00f      	b.n	8004eba <HAL_RCC_ClockConfig+0xc6>
 8004e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	667b      	str	r3, [r7, #100]	; 0x64
 8004ea8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eac:	663b      	str	r3, [r7, #96]	; 0x60
 8004eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eb0:	fa93 f3a3 	rbit	r3, r3
 8004eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004eb6:	4b67      	ldr	r3, [pc, #412]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ebe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ec2:	fa92 f2a2 	rbit	r2, r2
 8004ec6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004eca:	fab2 f282 	clz	r2, r2
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	f042 0220 	orr.w	r2, r2, #32
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	f002 021f 	and.w	r2, r2, #31
 8004eda:	2101      	movs	r1, #1
 8004edc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d17b      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0f3      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d13c      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x178>
 8004ef2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f02:	fab3 f383 	clz	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d102      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x128>
 8004f16:	4b4f      	ldr	r3, [pc, #316]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	e00f      	b.n	8004f3c <HAL_RCC_ClockConfig+0x148>
 8004f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f24:	fa93 f3a3 	rbit	r3, r3
 8004f28:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f32:	fa93 f3a3 	rbit	r3, r3
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f38:	4b46      	ldr	r3, [pc, #280]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f40:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f44:	fa92 f2a2 	rbit	r2, r2
 8004f48:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f4c:	fab2 f282 	clz	r2, r2
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	f042 0220 	orr.w	r2, r2, #32
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	f002 021f 	and.w	r2, r2, #31
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d13a      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b2      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	fa93 f3a3 	rbit	r3, r3
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d102      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x1a0>
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	e00d      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x1bc>
 8004f94:	2302      	movs	r3, #2
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	623b      	str	r3, [r7, #32]
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	fa93 f3a3 	rbit	r3, r3
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	4b29      	ldr	r3, [pc, #164]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	61ba      	str	r2, [r7, #24]
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	fa92 f2a2 	rbit	r2, r2
 8004fba:	617a      	str	r2, [r7, #20]
  return result;
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	fab2 f282 	clz	r2, r2
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	f042 0220 	orr.w	r2, r2, #32
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	f002 021f 	and.w	r2, r2, #31
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e079      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b1d      	ldr	r3, [pc, #116]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	491a      	ldr	r1, [pc, #104]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fc ffb0 	bl	8001f54 <HAL_GetTick>
 8004ff4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fc ffac 	bl	8001f54 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e061      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <HAL_RCC_ClockConfig+0x260>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d214      	bcs.n	8005058 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b08      	ldr	r3, [pc, #32]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 0207 	bic.w	r2, r3, #7
 8005036:	4906      	ldr	r1, [pc, #24]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b04      	ldr	r3, [pc, #16]	; (8005050 <HAL_RCC_ClockConfig+0x25c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d005      	beq.n	8005058 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e040      	b.n	80050d2 <HAL_RCC_ClockConfig+0x2de>
 8005050:	40022000 	.word	0x40022000
 8005054:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005064:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	491a      	ldr	r1, [pc, #104]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 8005072:	4313      	orrs	r3, r2
 8005074:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005082:	4b16      	ldr	r3, [pc, #88]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	4912      	ldr	r1, [pc, #72]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005096:	f000 f829 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 800509a:	4601      	mov	r1, r0
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <HAL_RCC_ClockConfig+0x2e8>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a4:	22f0      	movs	r2, #240	; 0xf0
 80050a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	fa92 f2a2 	rbit	r2, r2
 80050ae:	60fa      	str	r2, [r7, #12]
  return result;
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	fab2 f282 	clz	r2, r2
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	40d3      	lsrs	r3, r2
 80050ba:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <HAL_RCC_ClockConfig+0x2ec>)
 80050bc:	5cd3      	ldrb	r3, [r2, r3]
 80050be:	fa21 f303 	lsr.w	r3, r1, r3
 80050c2:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <HAL_RCC_ClockConfig+0x2f0>)
 80050c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <HAL_RCC_ClockConfig+0x2f4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc fefe 	bl	8001ecc <HAL_InitTick>
  
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3778      	adds	r7, #120	; 0x78
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	08008230 	.word	0x08008230
 80050e4:	20000000 	.word	0x20000000
 80050e8:	20000004 	.word	0x20000004

080050ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b08b      	sub	sp, #44	; 0x2c
 80050f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	2300      	movs	r3, #0
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005106:	4b2a      	ldr	r3, [pc, #168]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b04      	cmp	r3, #4
 8005114:	d002      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0x30>
 8005116:	2b08      	cmp	r3, #8
 8005118:	d003      	beq.n	8005122 <HAL_RCC_GetSysClockFreq+0x36>
 800511a:	e03f      	b.n	800519c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800511e:	623b      	str	r3, [r7, #32]
      break;
 8005120:	e03f      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005128:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800512c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	fa92 f2a2 	rbit	r2, r2
 8005134:	607a      	str	r2, [r7, #4]
  return result;
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	fab2 f282 	clz	r2, r2
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	40d3      	lsrs	r3, r2
 8005140:	4a1d      	ldr	r2, [pc, #116]	; (80051b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	220f      	movs	r2, #15
 8005150:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	fa92 f2a2 	rbit	r2, r2
 8005158:	60fa      	str	r2, [r7, #12]
  return result;
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	fab2 f282 	clz	r2, r2
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	40d3      	lsrs	r3, r2
 8005164:	4a15      	ldr	r2, [pc, #84]	; (80051bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005166:	5cd3      	ldrb	r3, [r2, r3]
 8005168:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005174:	4a0f      	ldr	r2, [pc, #60]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	fbb2 f2f3 	udiv	r2, r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	e007      	b.n	8005196 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005186:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	fbb2 f2f3 	udiv	r2, r2, r3
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	fb02 f303 	mul.w	r3, r2, r3
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	623b      	str	r3, [r7, #32]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800519e:	623b      	str	r3, [r7, #32]
      break;
 80051a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a2:	6a3b      	ldr	r3, [r7, #32]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	372c      	adds	r7, #44	; 0x2c
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40021000 	.word	0x40021000
 80051b4:	007a1200 	.word	0x007a1200
 80051b8:	08008248 	.word	0x08008248
 80051bc:	08008258 	.word	0x08008258

080051c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c6:	681b      	ldr	r3, [r3, #0]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000000 	.word	0x20000000

080051d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80051de:	f7ff ffef 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 80051e2:	4601      	mov	r1, r0
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80051f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	fa92 f2a2 	rbit	r2, r2
 80051f8:	603a      	str	r2, [r7, #0]
  return result;
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	fab2 f282 	clz	r2, r2
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	40d3      	lsrs	r3, r2
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	40021000 	.word	0x40021000
 8005218:	08008240 	.word	0x08008240

0800521c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005222:	f7ff ffcd 	bl	80051c0 <HAL_RCC_GetHCLKFreq>
 8005226:	4601      	mov	r1, r0
 8005228:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005230:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005234:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	fa92 f2a2 	rbit	r2, r2
 800523c:	603a      	str	r2, [r7, #0]
  return result;
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	fab2 f282 	clz	r2, r2
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	40d3      	lsrs	r3, r2
 8005248:	4a04      	ldr	r2, [pc, #16]	; (800525c <HAL_RCC_GetPCLK2Freq+0x40>)
 800524a:	5cd3      	ldrb	r3, [r2, r3]
 800524c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40021000 	.word	0x40021000
 800525c:	08008240 	.word	0x08008240

08005260 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b092      	sub	sp, #72	; 0x48
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 80d4 	beq.w	800542c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005284:	4b4e      	ldr	r3, [pc, #312]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10e      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	4a4a      	ldr	r2, [pc, #296]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529a:	61d3      	str	r3, [r2, #28]
 800529c:	4b48      	ldr	r3, [pc, #288]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	4b45      	ldr	r3, [pc, #276]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ba:	4b42      	ldr	r3, [pc, #264]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a41      	ldr	r2, [pc, #260]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052c6:	f7fc fe45 	bl	8001f54 <HAL_GetTick>
 80052ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	e008      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ce:	f7fc fe41 	bl	8001f54 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b64      	cmp	r3, #100	; 0x64
 80052da:	d901      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e1d6      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e0:	4b38      	ldr	r3, [pc, #224]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ec:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8084 	beq.w	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005306:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005308:	429a      	cmp	r2, r3
 800530a:	d07c      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800530c:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	fa93 f3a3 	rbit	r3, r3
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005326:	fab3 f383 	clz	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	461a      	mov	r2, r3
 8005336:	2301      	movs	r3, #1
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	fa93 f3a3 	rbit	r3, r3
 8005346:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	461a      	mov	r2, r3
 800535a:	2300      	movs	r3, #0
 800535c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800535e:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005362:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d04b      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536e:	f7fc fdf1 	bl	8001f54 <HAL_GetTick>
 8005372:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005374:	e00a      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fc fded 	bl	8001f54 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e180      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800538c:	2302      	movs	r3, #2
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	fa93 f3a3 	rbit	r3, r3
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
 8005398:	2302      	movs	r3, #2
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	61fb      	str	r3, [r7, #28]
  return result;
 80053a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a6:	fab3 f383 	clz	r3, r3
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d108      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80053ba:	4b01      	ldr	r3, [pc, #4]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	e00d      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80053c0:	40021000 	.word	0x40021000
 80053c4:	40007000 	.word	0x40007000
 80053c8:	10908100 	.word	0x10908100
 80053cc:	2302      	movs	r3, #2
 80053ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	4b9a      	ldr	r3, [pc, #616]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2202      	movs	r2, #2
 80053de:	613a      	str	r2, [r7, #16]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	fa92 f2a2 	rbit	r2, r2
 80053e6:	60fa      	str	r2, [r7, #12]
  return result;
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	fab2 f282 	clz	r2, r2
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	f002 021f 	and.w	r2, r2, #31
 80053fa:	2101      	movs	r1, #1
 80053fc:	fa01 f202 	lsl.w	r2, r1, r2
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0b7      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005406:	4b8f      	ldr	r3, [pc, #572]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	498c      	ldr	r1, [pc, #560]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005414:	4313      	orrs	r3, r2
 8005416:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005418:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800541c:	2b01      	cmp	r3, #1
 800541e:	d105      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005420:	4b88      	ldr	r3, [pc, #544]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	4a87      	ldr	r2, [pc, #540]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800542a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005438:	4b82      	ldr	r3, [pc, #520]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	f023 0203 	bic.w	r2, r3, #3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	497f      	ldr	r1, [pc, #508]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005446:	4313      	orrs	r3, r2
 8005448:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d008      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005456:	4b7b      	ldr	r3, [pc, #492]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4978      	ldr	r1, [pc, #480]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005464:	4313      	orrs	r3, r2
 8005466:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005474:	4b73      	ldr	r3, [pc, #460]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4970      	ldr	r1, [pc, #448]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d008      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005492:	4b6c      	ldr	r3, [pc, #432]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	f023 0210 	bic.w	r2, r3, #16
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	4969      	ldr	r1, [pc, #420]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80054b0:	4b64      	ldr	r3, [pc, #400]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054bc:	4961      	ldr	r1, [pc, #388]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ce:	4b5d      	ldr	r3, [pc, #372]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	f023 0220 	bic.w	r2, r3, #32
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	495a      	ldr	r1, [pc, #360]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ec:	4b55      	ldr	r3, [pc, #340]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	4952      	ldr	r1, [pc, #328]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800550a:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	494b      	ldr	r1, [pc, #300]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005518:	4313      	orrs	r3, r2
 800551a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	d008      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005528:	4b46      	ldr	r3, [pc, #280]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	4943      	ldr	r1, [pc, #268]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005546:	4b3f      	ldr	r3, [pc, #252]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	493c      	ldr	r1, [pc, #240]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005564:	4b37      	ldr	r3, [pc, #220]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	4934      	ldr	r1, [pc, #208]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005572:	4313      	orrs	r3, r2
 8005574:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005582:	4b30      	ldr	r3, [pc, #192]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	492d      	ldr	r1, [pc, #180]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005590:	4313      	orrs	r3, r2
 8005592:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055a0:	4b28      	ldr	r3, [pc, #160]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ac:	4925      	ldr	r1, [pc, #148]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80055be:	4b21      	ldr	r3, [pc, #132]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	491e      	ldr	r1, [pc, #120]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80055dc:	4b19      	ldr	r3, [pc, #100]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	4916      	ldr	r1, [pc, #88]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80055fa:	4b12      	ldr	r3, [pc, #72]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005606:	490f      	ldr	r1, [pc, #60]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005608:	4313      	orrs	r3, r2
 800560a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d008      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	4907      	ldr	r1, [pc, #28]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005626:	4313      	orrs	r3, r2
 8005628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00c      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005636:	4b03      	ldr	r3, [pc, #12]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	e002      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005642:	bf00      	nop
 8005644:	40021000 	.word	0x40021000
 8005648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564a:	4913      	ldr	r1, [pc, #76]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800564c:	4313      	orrs	r3, r2
 800564e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800565c:	4b0e      	ldr	r3, [pc, #56]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	490b      	ldr	r1, [pc, #44]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800566a:	4313      	orrs	r3, r2
 800566c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005686:	4904      	ldr	r1, [pc, #16]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005688:	4313      	orrs	r3, r2
 800568a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3748      	adds	r7, #72	; 0x48
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000

0800569c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e049      	b.n	8005742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fc fa82 	bl	8001bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3304      	adds	r3, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4610      	mov	r0, r2
 80056dc:	f000 fed6 	bl	800648c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	d001      	beq.n	8005764 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e047      	b.n	80057f4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a23      	ldr	r2, [pc, #140]	; (8005800 <HAL_TIM_Base_Start+0xb4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01d      	beq.n	80057b2 <HAL_TIM_Base_Start+0x66>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577e:	d018      	beq.n	80057b2 <HAL_TIM_Base_Start+0x66>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <HAL_TIM_Base_Start+0xb8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_TIM_Base_Start+0x66>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <HAL_TIM_Base_Start+0xbc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_TIM_Base_Start+0x66>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1c      	ldr	r2, [pc, #112]	; (800580c <HAL_TIM_Base_Start+0xc0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_TIM_Base_Start+0x66>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <HAL_TIM_Base_Start+0xc4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_TIM_Base_Start+0x66>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_TIM_Base_Start+0xc8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d115      	bne.n	80057de <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	4b17      	ldr	r3, [pc, #92]	; (8005818 <HAL_TIM_Base_Start+0xcc>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b06      	cmp	r3, #6
 80057c2:	d015      	beq.n	80057f0 <HAL_TIM_Base_Start+0xa4>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ca:	d011      	beq.n	80057f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057dc:	e008      	b.n	80057f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	e000      	b.n	80057f2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40013400 	.word	0x40013400
 8005810:	40014000 	.word	0x40014000
 8005814:	40015000 	.word	0x40015000
 8005818:	00010007 	.word	0x00010007

0800581c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	d001      	beq.n	8005834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e04f      	b.n	80058d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a23      	ldr	r2, [pc, #140]	; (80058e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01d      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d018      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1f      	ldr	r2, [pc, #124]	; (80058e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d013      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1e      	ldr	r2, [pc, #120]	; (80058e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00e      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <HAL_TIM_Base_Start_IT+0xd0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d009      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d004      	beq.n	8005892 <HAL_TIM_Base_Start_IT+0x76>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d115      	bne.n	80058be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800589a:	4013      	ands	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b06      	cmp	r3, #6
 80058a2:	d015      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0xb4>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058aa:	d011      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	e008      	b.n	80058d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e000      	b.n	80058d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40013400 	.word	0x40013400
 80058f0:	40014000 	.word	0x40014000
 80058f4:	40015000 	.word	0x40015000
 80058f8:	00010007 	.word	0x00010007

080058fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e049      	b.n	80059a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f841 	bl	80059aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3304      	adds	r3, #4
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fda6 	bl	800648c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
	...

080059c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <HAL_TIM_PWM_Start+0x24>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e03c      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d109      	bne.n	80059fe <HAL_TIM_PWM_Start+0x3e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	bf14      	ite	ne
 80059f6:	2301      	movne	r3, #1
 80059f8:	2300      	moveq	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	e02f      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d109      	bne.n	8005a18 <HAL_TIM_PWM_Start+0x58>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	bf14      	ite	ne
 8005a10:	2301      	movne	r3, #1
 8005a12:	2300      	moveq	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e022      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b0c      	cmp	r3, #12
 8005a1c:	d109      	bne.n	8005a32 <HAL_TIM_PWM_Start+0x72>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	bf14      	ite	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	2300      	moveq	r3, #0
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	e015      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d109      	bne.n	8005a4c <HAL_TIM_PWM_Start+0x8c>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e008      	b.n	8005a5e <HAL_TIM_PWM_Start+0x9e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e0a1      	b.n	8005baa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_PWM_Start+0xb6>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a74:	e023      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b04      	cmp	r3, #4
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_PWM_Start+0xc6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a84:	e01b      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_PWM_Start+0xd6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a94:	e013      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0xe6>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa4:	e00b      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0xf6>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab4:	e003      	b.n	8005abe <HAL_TIM_PWM_Start+0xfe>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2202      	movs	r2, #2
 8005aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 f91e 	bl	8006d08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a38      	ldr	r2, [pc, #224]	; (8005bb4 <HAL_TIM_PWM_Start+0x1f4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a37      	ldr	r2, [pc, #220]	; (8005bb8 <HAL_TIM_PWM_Start+0x1f8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a35      	ldr	r2, [pc, #212]	; (8005bbc <HAL_TIM_PWM_Start+0x1fc>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <HAL_TIM_PWM_Start+0x200>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a32      	ldr	r2, [pc, #200]	; (8005bc4 <HAL_TIM_PWM_Start+0x204>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_PWM_Start+0x148>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a31      	ldr	r2, [pc, #196]	; (8005bc8 <HAL_TIM_PWM_Start+0x208>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x14c>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_TIM_PWM_Start+0x14e>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a23      	ldr	r2, [pc, #140]	; (8005bb4 <HAL_TIM_PWM_Start+0x1f4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d01d      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b34:	d018      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a24      	ldr	r2, [pc, #144]	; (8005bcc <HAL_TIM_PWM_Start+0x20c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a22      	ldr	r2, [pc, #136]	; (8005bd0 <HAL_TIM_PWM_Start+0x210>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00e      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1a      	ldr	r2, [pc, #104]	; (8005bb8 <HAL_TIM_PWM_Start+0x1f8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_TIM_PWM_Start+0x1fc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_PWM_Start+0x1a8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a19      	ldr	r2, [pc, #100]	; (8005bc8 <HAL_TIM_PWM_Start+0x208>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d115      	bne.n	8005b94 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <HAL_TIM_PWM_Start+0x214>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b06      	cmp	r3, #6
 8005b78:	d015      	beq.n	8005ba6 <HAL_TIM_PWM_Start+0x1e6>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b80:	d011      	beq.n	8005ba6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b92:	e008      	b.n	8005ba6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e000      	b.n	8005ba8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40013400 	.word	0x40013400
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400
 8005bc4:	40014800 	.word	0x40014800
 8005bc8:	40015000 	.word	0x40015000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	00010007 	.word	0x00010007

08005bd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e097      	b.n	8005d1c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7fc f839 	bl	8001c78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005c1c:	f023 0307 	bic.w	r3, r3, #7
 8005c20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f000 fc2d 	bl	800648c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c78:	f023 030c 	bic.w	r3, r3, #12
 8005c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	4313      	orrs	r3, r2
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	011a      	lsls	r2, r3, #4
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	031b      	lsls	r3, r3, #12
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d110      	bne.n	8005d76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d102      	bne.n	8005d60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d5a:	7b7b      	ldrb	r3, [r7, #13]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d001      	beq.n	8005d64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e069      	b.n	8005e38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d74:	e031      	b.n	8005dda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d110      	bne.n	8005d9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d7c:	7bbb      	ldrb	r3, [r7, #14]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d102      	bne.n	8005d88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d82:	7b3b      	ldrb	r3, [r7, #12]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d001      	beq.n	8005d8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e055      	b.n	8005e38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d9c:	e01d      	b.n	8005dda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d108      	bne.n	8005db6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d105      	bne.n	8005db6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005daa:	7b7b      	ldrb	r3, [r7, #13]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d102      	bne.n	8005db6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005db0:	7b3b      	ldrb	r3, [r7, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d001      	beq.n	8005dba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e03e      	b.n	8005e38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_TIM_Encoder_Start+0xc4>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d008      	beq.n	8005df8 <HAL_TIM_Encoder_Start+0xd4>
 8005de6:	e00f      	b.n	8005e08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2201      	movs	r2, #1
 8005dee:	2100      	movs	r1, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 ff89 	bl	8006d08 <TIM_CCxChannelCmd>
      break;
 8005df6:	e016      	b.n	8005e26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	2104      	movs	r1, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 ff81 	bl	8006d08 <TIM_CCxChannelCmd>
      break;
 8005e06:	e00e      	b.n	8005e26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 ff79 	bl	8006d08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	2104      	movs	r1, #4
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 ff72 	bl	8006d08 <TIM_CCxChannelCmd>
      break;
 8005e24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0202 	mvn.w	r2, #2
 8005e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fae3 	bl	800644e <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fad5 	bl	800643a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fae6 	bl	8006462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0204 	mvn.w	r2, #4
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fab9 	bl	800644e <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 faab 	bl	800643a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fabc 	bl	8006462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d122      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d11b      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0208 	mvn.w	r2, #8
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa8f 	bl	800644e <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa81 	bl	800643a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa92 	bl	8006462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b10      	cmp	r3, #16
 8005f50:	d122      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0210 	mvn.w	r2, #16
 8005f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa65 	bl	800644e <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa57 	bl	800643a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fa68 	bl	8006462 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d10e      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d107      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0201 	mvn.w	r2, #1
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fb fbf4 	bl	80017ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d10e      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d107      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 ff48 	bl	8006e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffe:	d10e      	bne.n	800601e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d107      	bne.n	800601e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 ff3b 	bl	8006e94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d10e      	bne.n	800604a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d107      	bne.n	800604a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fa16 	bl	8006476 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b20      	cmp	r3, #32
 8006056:	d10e      	bne.n	8006076 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0320 	and.w	r3, r3, #32
 8006062:	2b20      	cmp	r3, #32
 8006064:	d107      	bne.n	8006076 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f06f 0220 	mvn.w	r2, #32
 800606e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fefb 	bl	8006e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006096:	2b01      	cmp	r3, #1
 8006098:	d101      	bne.n	800609e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800609a:	2302      	movs	r3, #2
 800609c:	e0ff      	b.n	800629e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b14      	cmp	r3, #20
 80060aa:	f200 80f0 	bhi.w	800628e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	08006109 	.word	0x08006109
 80060b8:	0800628f 	.word	0x0800628f
 80060bc:	0800628f 	.word	0x0800628f
 80060c0:	0800628f 	.word	0x0800628f
 80060c4:	08006149 	.word	0x08006149
 80060c8:	0800628f 	.word	0x0800628f
 80060cc:	0800628f 	.word	0x0800628f
 80060d0:	0800628f 	.word	0x0800628f
 80060d4:	0800618b 	.word	0x0800618b
 80060d8:	0800628f 	.word	0x0800628f
 80060dc:	0800628f 	.word	0x0800628f
 80060e0:	0800628f 	.word	0x0800628f
 80060e4:	080061cb 	.word	0x080061cb
 80060e8:	0800628f 	.word	0x0800628f
 80060ec:	0800628f 	.word	0x0800628f
 80060f0:	0800628f 	.word	0x0800628f
 80060f4:	0800620d 	.word	0x0800620d
 80060f8:	0800628f 	.word	0x0800628f
 80060fc:	0800628f 	.word	0x0800628f
 8006100:	0800628f 	.word	0x0800628f
 8006104:	0800624d 	.word	0x0800624d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fa5a 	bl	80065c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0208 	orr.w	r2, r2, #8
 8006122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0204 	bic.w	r2, r2, #4
 8006132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6999      	ldr	r1, [r3, #24]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	619a      	str	r2, [r3, #24]
      break;
 8006146:	e0a5      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fad4 	bl	80066fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699a      	ldr	r2, [r3, #24]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6999      	ldr	r1, [r3, #24]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	619a      	str	r2, [r3, #24]
      break;
 8006188:	e084      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fb47 	bl	8006824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f042 0208 	orr.w	r2, r2, #8
 80061a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0204 	bic.w	r2, r2, #4
 80061b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69d9      	ldr	r1, [r3, #28]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	61da      	str	r2, [r3, #28]
      break;
 80061c8:	e064      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fbb9 	bl	8006948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	69da      	ldr	r2, [r3, #28]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	69d9      	ldr	r1, [r3, #28]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	021a      	lsls	r2, r3, #8
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	61da      	str	r2, [r3, #28]
      break;
 800620a:	e043      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fc08 	bl	8006a28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0208 	orr.w	r2, r2, #8
 8006226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0204 	bic.w	r2, r2, #4
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800624a:	e023      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fc52 	bl	8006afc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006266:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006276:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	021a      	lsls	r2, r3, #8
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800628c:	e002      	b.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	75fb      	strb	r3, [r7, #23]
      break;
 8006292:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop

080062a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_TIM_ConfigClockSource+0x1c>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e0b6      	b.n	8006432 <HAL_TIM_ConfigClockSource+0x18a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006300:	d03e      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0xd8>
 8006302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006306:	f200 8087 	bhi.w	8006418 <HAL_TIM_ConfigClockSource+0x170>
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630e:	f000 8086 	beq.w	800641e <HAL_TIM_ConfigClockSource+0x176>
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006316:	d87f      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x170>
 8006318:	2b70      	cmp	r3, #112	; 0x70
 800631a:	d01a      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0xaa>
 800631c:	2b70      	cmp	r3, #112	; 0x70
 800631e:	d87b      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x170>
 8006320:	2b60      	cmp	r3, #96	; 0x60
 8006322:	d050      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0x11e>
 8006324:	2b60      	cmp	r3, #96	; 0x60
 8006326:	d877      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x170>
 8006328:	2b50      	cmp	r3, #80	; 0x50
 800632a:	d03c      	beq.n	80063a6 <HAL_TIM_ConfigClockSource+0xfe>
 800632c:	2b50      	cmp	r3, #80	; 0x50
 800632e:	d873      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x170>
 8006330:	2b40      	cmp	r3, #64	; 0x40
 8006332:	d058      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x13e>
 8006334:	2b40      	cmp	r3, #64	; 0x40
 8006336:	d86f      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x170>
 8006338:	2b30      	cmp	r3, #48	; 0x30
 800633a:	d064      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15e>
 800633c:	2b30      	cmp	r3, #48	; 0x30
 800633e:	d86b      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x170>
 8006340:	2b20      	cmp	r3, #32
 8006342:	d060      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15e>
 8006344:	2b20      	cmp	r3, #32
 8006346:	d867      	bhi.n	8006418 <HAL_TIM_ConfigClockSource+0x170>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d05c      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15e>
 800634c:	2b10      	cmp	r3, #16
 800634e:	d05a      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x15e>
 8006350:	e062      	b.n	8006418 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006362:	f000 fcb1 	bl	8006cc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	609a      	str	r2, [r3, #8]
      break;
 800637e:	e04f      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006390:	f000 fc9a 	bl	8006cc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a2:	609a      	str	r2, [r3, #8]
      break;
 80063a4:	e03c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b2:	461a      	mov	r2, r3
 80063b4:	f000 fc0e 	bl	8006bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2150      	movs	r1, #80	; 0x50
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fc67 	bl	8006c92 <TIM_ITRx_SetConfig>
      break;
 80063c4:	e02c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 fc2d 	bl	8006c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2160      	movs	r1, #96	; 0x60
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fc57 	bl	8006c92 <TIM_ITRx_SetConfig>
      break;
 80063e4:	e01c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 fbee 	bl	8006bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2140      	movs	r1, #64	; 0x40
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fc47 	bl	8006c92 <TIM_ITRx_SetConfig>
      break;
 8006404:	e00c      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f000 fc3e 	bl	8006c92 <TIM_ITRx_SetConfig>
      break;
 8006416:	e003      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	73fb      	strb	r3, [r7, #15]
      break;
 800641c:	e000      	b.n	8006420 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800641e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a42      	ldr	r2, [pc, #264]	; (80065a8 <TIM_Base_SetConfig+0x11c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d013      	beq.n	80064cc <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064aa:	d00f      	beq.n	80064cc <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a3f      	ldr	r2, [pc, #252]	; (80065ac <TIM_Base_SetConfig+0x120>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d00b      	beq.n	80064cc <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a3e      	ldr	r2, [pc, #248]	; (80065b0 <TIM_Base_SetConfig+0x124>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d007      	beq.n	80064cc <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a3d      	ldr	r2, [pc, #244]	; (80065b4 <TIM_Base_SetConfig+0x128>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a3c      	ldr	r2, [pc, #240]	; (80065b8 <TIM_Base_SetConfig+0x12c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d108      	bne.n	80064de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a31      	ldr	r2, [pc, #196]	; (80065a8 <TIM_Base_SetConfig+0x11c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01f      	beq.n	8006526 <TIM_Base_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ec:	d01b      	beq.n	8006526 <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <TIM_Base_SetConfig+0x120>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d017      	beq.n	8006526 <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <TIM_Base_SetConfig+0x124>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <TIM_Base_SetConfig+0x9a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <TIM_Base_SetConfig+0x128>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00f      	beq.n	8006526 <TIM_Base_SetConfig+0x9a>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2c      	ldr	r2, [pc, #176]	; (80065bc <TIM_Base_SetConfig+0x130>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00b      	beq.n	8006526 <TIM_Base_SetConfig+0x9a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2b      	ldr	r2, [pc, #172]	; (80065c0 <TIM_Base_SetConfig+0x134>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d007      	beq.n	8006526 <TIM_Base_SetConfig+0x9a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2a      	ldr	r2, [pc, #168]	; (80065c4 <TIM_Base_SetConfig+0x138>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d003      	beq.n	8006526 <TIM_Base_SetConfig+0x9a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <TIM_Base_SetConfig+0x12c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d108      	bne.n	8006538 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	689a      	ldr	r2, [r3, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a12      	ldr	r2, [pc, #72]	; (80065a8 <TIM_Base_SetConfig+0x11c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <TIM_Base_SetConfig+0x100>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <TIM_Base_SetConfig+0x128>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00f      	beq.n	800658c <TIM_Base_SetConfig+0x100>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <TIM_Base_SetConfig+0x130>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_Base_SetConfig+0x100>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <TIM_Base_SetConfig+0x134>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_Base_SetConfig+0x100>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a11      	ldr	r2, [pc, #68]	; (80065c4 <TIM_Base_SetConfig+0x138>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_Base_SetConfig+0x100>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <TIM_Base_SetConfig+0x12c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d103      	bne.n	8006594 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	615a      	str	r2, [r3, #20]
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40013400 	.word	0x40013400
 80065b8:	40015000 	.word	0x40015000
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800

080065c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a30      	ldr	r2, [pc, #192]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d013      	beq.n	8006650 <TIM_OC1_SetConfig+0x88>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a2f      	ldr	r2, [pc, #188]	; (80066e8 <TIM_OC1_SetConfig+0x120>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00f      	beq.n	8006650 <TIM_OC1_SetConfig+0x88>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2e      	ldr	r2, [pc, #184]	; (80066ec <TIM_OC1_SetConfig+0x124>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00b      	beq.n	8006650 <TIM_OC1_SetConfig+0x88>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a2d      	ldr	r2, [pc, #180]	; (80066f0 <TIM_OC1_SetConfig+0x128>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d007      	beq.n	8006650 <TIM_OC1_SetConfig+0x88>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a2c      	ldr	r2, [pc, #176]	; (80066f4 <TIM_OC1_SetConfig+0x12c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC1_SetConfig+0x88>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a2b      	ldr	r2, [pc, #172]	; (80066f8 <TIM_OC1_SetConfig+0x130>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10c      	bne.n	800666a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0308 	bic.w	r3, r3, #8
 8006656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1d      	ldr	r2, [pc, #116]	; (80066e4 <TIM_OC1_SetConfig+0x11c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <TIM_OC1_SetConfig+0xd2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <TIM_OC1_SetConfig+0x120>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00f      	beq.n	800669a <TIM_OC1_SetConfig+0xd2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <TIM_OC1_SetConfig+0x124>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00b      	beq.n	800669a <TIM_OC1_SetConfig+0xd2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1a      	ldr	r2, [pc, #104]	; (80066f0 <TIM_OC1_SetConfig+0x128>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d007      	beq.n	800669a <TIM_OC1_SetConfig+0xd2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a19      	ldr	r2, [pc, #100]	; (80066f4 <TIM_OC1_SetConfig+0x12c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_OC1_SetConfig+0xd2>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <TIM_OC1_SetConfig+0x130>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d111      	bne.n	80066be <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	621a      	str	r2, [r3, #32]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40013400 	.word	0x40013400
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800
 80066f8:	40015000 	.word	0x40015000

080066fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0210 	bic.w	r2, r3, #16
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f023 0320 	bic.w	r3, r3, #32
 800674a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2c      	ldr	r2, [pc, #176]	; (800680c <TIM_OC2_SetConfig+0x110>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_OC2_SetConfig+0x74>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a2b      	ldr	r2, [pc, #172]	; (8006810 <TIM_OC2_SetConfig+0x114>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC2_SetConfig+0x74>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a2a      	ldr	r2, [pc, #168]	; (8006814 <TIM_OC2_SetConfig+0x118>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10d      	bne.n	800678c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	011b      	lsls	r3, r3, #4
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800678a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a1f      	ldr	r2, [pc, #124]	; (800680c <TIM_OC2_SetConfig+0x110>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d013      	beq.n	80067bc <TIM_OC2_SetConfig+0xc0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a1e      	ldr	r2, [pc, #120]	; (8006810 <TIM_OC2_SetConfig+0x114>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00f      	beq.n	80067bc <TIM_OC2_SetConfig+0xc0>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a1e      	ldr	r2, [pc, #120]	; (8006818 <TIM_OC2_SetConfig+0x11c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00b      	beq.n	80067bc <TIM_OC2_SetConfig+0xc0>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a1d      	ldr	r2, [pc, #116]	; (800681c <TIM_OC2_SetConfig+0x120>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d007      	beq.n	80067bc <TIM_OC2_SetConfig+0xc0>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <TIM_OC2_SetConfig+0x124>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_OC2_SetConfig+0xc0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a17      	ldr	r2, [pc, #92]	; (8006814 <TIM_OC2_SetConfig+0x118>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d113      	bne.n	80067e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067c2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067ca:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40013400 	.word	0x40013400
 8006814:	40015000 	.word	0x40015000
 8006818:	40014000 	.word	0x40014000
 800681c:	40014400 	.word	0x40014400
 8006820:	40014800 	.word	0x40014800

08006824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a2b      	ldr	r2, [pc, #172]	; (8006930 <TIM_OC3_SetConfig+0x10c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <TIM_OC3_SetConfig+0x72>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a2a      	ldr	r2, [pc, #168]	; (8006934 <TIM_OC3_SetConfig+0x110>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC3_SetConfig+0x72>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a29      	ldr	r2, [pc, #164]	; (8006938 <TIM_OC3_SetConfig+0x114>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d10d      	bne.n	80068b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800689c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a1e      	ldr	r2, [pc, #120]	; (8006930 <TIM_OC3_SetConfig+0x10c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d013      	beq.n	80068e2 <TIM_OC3_SetConfig+0xbe>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <TIM_OC3_SetConfig+0x110>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00f      	beq.n	80068e2 <TIM_OC3_SetConfig+0xbe>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a1d      	ldr	r2, [pc, #116]	; (800693c <TIM_OC3_SetConfig+0x118>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d00b      	beq.n	80068e2 <TIM_OC3_SetConfig+0xbe>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <TIM_OC3_SetConfig+0x11c>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d007      	beq.n	80068e2 <TIM_OC3_SetConfig+0xbe>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a1b      	ldr	r2, [pc, #108]	; (8006944 <TIM_OC3_SetConfig+0x120>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d003      	beq.n	80068e2 <TIM_OC3_SetConfig+0xbe>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a16      	ldr	r2, [pc, #88]	; (8006938 <TIM_OC3_SetConfig+0x114>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d113      	bne.n	800690a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	621a      	str	r2, [r3, #32]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400
 8006938:	40015000 	.word	0x40015000
 800693c:	40014000 	.word	0x40014000
 8006940:	40014400 	.word	0x40014400
 8006944:	40014800 	.word	0x40014800

08006948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	031b      	lsls	r3, r3, #12
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a1a      	ldr	r2, [pc, #104]	; (8006a10 <TIM_OC4_SetConfig+0xc8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d013      	beq.n	80069d4 <TIM_OC4_SetConfig+0x8c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <TIM_OC4_SetConfig+0xcc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00f      	beq.n	80069d4 <TIM_OC4_SetConfig+0x8c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a18      	ldr	r2, [pc, #96]	; (8006a18 <TIM_OC4_SetConfig+0xd0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00b      	beq.n	80069d4 <TIM_OC4_SetConfig+0x8c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <TIM_OC4_SetConfig+0xd4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_OC4_SetConfig+0x8c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <TIM_OC4_SetConfig+0xd8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_OC4_SetConfig+0x8c>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a15      	ldr	r2, [pc, #84]	; (8006a24 <TIM_OC4_SetConfig+0xdc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d109      	bne.n	80069e8 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	019b      	lsls	r3, r3, #6
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	621a      	str	r2, [r3, #32]
}
 8006a02:	bf00      	nop
 8006a04:	371c      	adds	r7, #28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	40012c00 	.word	0x40012c00
 8006a14:	40013400 	.word	0x40013400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40014400 	.word	0x40014400
 8006a20:	40014800 	.word	0x40014800
 8006a24:	40015000 	.word	0x40015000

08006a28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	041b      	lsls	r3, r3, #16
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <TIM_OC5_SetConfig+0xbc>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <TIM_OC5_SetConfig+0x82>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <TIM_OC5_SetConfig+0xc0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00f      	beq.n	8006aaa <TIM_OC5_SetConfig+0x82>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a17      	ldr	r2, [pc, #92]	; (8006aec <TIM_OC5_SetConfig+0xc4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00b      	beq.n	8006aaa <TIM_OC5_SetConfig+0x82>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <TIM_OC5_SetConfig+0xc8>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <TIM_OC5_SetConfig+0x82>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <TIM_OC5_SetConfig+0xcc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d003      	beq.n	8006aaa <TIM_OC5_SetConfig+0x82>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <TIM_OC5_SetConfig+0xd0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d109      	bne.n	8006abe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	021b      	lsls	r3, r3, #8
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	621a      	str	r2, [r3, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40013400 	.word	0x40013400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800
 8006af8:	40015000 	.word	0x40015000

08006afc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	051b      	lsls	r3, r3, #20
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a1a      	ldr	r2, [pc, #104]	; (8006bbc <TIM_OC6_SetConfig+0xc0>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <TIM_OC6_SetConfig+0x84>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a19      	ldr	r2, [pc, #100]	; (8006bc0 <TIM_OC6_SetConfig+0xc4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00f      	beq.n	8006b80 <TIM_OC6_SetConfig+0x84>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a18      	ldr	r2, [pc, #96]	; (8006bc4 <TIM_OC6_SetConfig+0xc8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00b      	beq.n	8006b80 <TIM_OC6_SetConfig+0x84>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a17      	ldr	r2, [pc, #92]	; (8006bc8 <TIM_OC6_SetConfig+0xcc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d007      	beq.n	8006b80 <TIM_OC6_SetConfig+0x84>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a16      	ldr	r2, [pc, #88]	; (8006bcc <TIM_OC6_SetConfig+0xd0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC6_SetConfig+0x84>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a15      	ldr	r2, [pc, #84]	; (8006bd0 <TIM_OC6_SetConfig+0xd4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d109      	bne.n	8006b94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	029b      	lsls	r3, r3, #10
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40013400 	.word	0x40013400
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800
 8006bd0:	40015000 	.word	0x40015000

08006bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0201 	bic.w	r2, r3, #1
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f023 030a 	bic.w	r3, r3, #10
 8006c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b087      	sub	sp, #28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0210 	bic.w	r2, r3, #16
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	031b      	lsls	r3, r3, #12
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b085      	sub	sp, #20
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f043 0307 	orr.w	r3, r3, #7
 8006cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	609a      	str	r2, [r3, #8]
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	021a      	lsls	r2, r3, #8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	609a      	str	r2, [r3, #8]
}
 8006cfc:	bf00      	nop
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f003 031f 	and.w	r3, r3, #31
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	401a      	ands	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1a      	ldr	r2, [r3, #32]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d40:	431a      	orrs	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]
}
 8006d46:	bf00      	nop
 8006d48:	371c      	adds	r7, #28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e06d      	b.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a30      	ldr	r2, [pc, #192]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d009      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a2f      	ldr	r2, [pc, #188]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d004      	beq.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d108      	bne.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006db0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a1e      	ldr	r2, [pc, #120]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d01d      	beq.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de8:	d018      	beq.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a1c      	ldr	r2, [pc, #112]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00e      	beq.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a16      	ldr	r2, [pc, #88]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a11      	ldr	r2, [pc, #68]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d10c      	bne.n	8006e36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr
 8006e54:	40012c00 	.word	0x40012c00
 8006e58:	40013400 	.word	0x40013400
 8006e5c:	40015000 	.word	0x40015000
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40014000 	.word	0x40014000

08006e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e040      	b.n	8006f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fa ff7c 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2224      	movs	r2, #36	; 0x24
 8006ed4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f8b6 	bl	8007058 <UART_SetConfig>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e022      	b.n	8006f3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa7e 	bl	8007400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fb05 	bl	8007544 <UART_CheckIdleState>
 8006f3a:	4603      	mov	r3, r0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	603b      	str	r3, [r7, #0]
 8006f50:	4613      	mov	r3, r2
 8006f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f58:	2b20      	cmp	r3, #32
 8006f5a:	d178      	bne.n	800704e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <HAL_UART_Transmit+0x24>
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e071      	b.n	8007050 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2221      	movs	r2, #33	; 0x21
 8006f78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f7a:	f7fa ffeb 	bl	8001f54 <HAL_GetTick>
 8006f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	88fa      	ldrh	r2, [r7, #6]
 8006f84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	88fa      	ldrh	r2, [r7, #6]
 8006f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f98:	d108      	bne.n	8006fac <HAL_UART_Transmit+0x68>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e003      	b.n	8006fb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fb4:	e030      	b.n	8007018 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2180      	movs	r1, #128	; 0x80
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 fb67 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e03c      	b.n	8007050 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10b      	bne.n	8006ff4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	881a      	ldrh	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe8:	b292      	uxth	r2, r2
 8006fea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	3302      	adds	r3, #2
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e008      	b.n	8007006 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	781a      	ldrb	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	b292      	uxth	r2, r2
 8006ffe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	3301      	adds	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1c8      	bne.n	8006fb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2200      	movs	r2, #0
 800702c:	2140      	movs	r1, #64	; 0x40
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 fb30 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e005      	b.n	8007050 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2220      	movs	r2, #32
 8007048:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	e000      	b.n	8007050 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800704e:	2302      	movs	r3, #2
  }
}
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4b92      	ldr	r3, [pc, #584]	; (80072cc <UART_SetConfig+0x274>)
 8007084:	4013      	ands	r3, r2
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	6979      	ldr	r1, [r7, #20]
 800708c:	430b      	orrs	r3, r1
 800708e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a80      	ldr	r2, [pc, #512]	; (80072d0 <UART_SetConfig+0x278>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d120      	bne.n	8007116 <UART_SetConfig+0xbe>
 80070d4:	4b7f      	ldr	r3, [pc, #508]	; (80072d4 <UART_SetConfig+0x27c>)
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	f003 0303 	and.w	r3, r3, #3
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d817      	bhi.n	8007110 <UART_SetConfig+0xb8>
 80070e0:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <UART_SetConfig+0x90>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	080070f9 	.word	0x080070f9
 80070ec:	08007105 	.word	0x08007105
 80070f0:	0800710b 	.word	0x0800710b
 80070f4:	080070ff 	.word	0x080070ff
 80070f8:	2301      	movs	r3, #1
 80070fa:	77fb      	strb	r3, [r7, #31]
 80070fc:	e0b5      	b.n	800726a <UART_SetConfig+0x212>
 80070fe:	2302      	movs	r3, #2
 8007100:	77fb      	strb	r3, [r7, #31]
 8007102:	e0b2      	b.n	800726a <UART_SetConfig+0x212>
 8007104:	2304      	movs	r3, #4
 8007106:	77fb      	strb	r3, [r7, #31]
 8007108:	e0af      	b.n	800726a <UART_SetConfig+0x212>
 800710a:	2308      	movs	r3, #8
 800710c:	77fb      	strb	r3, [r7, #31]
 800710e:	e0ac      	b.n	800726a <UART_SetConfig+0x212>
 8007110:	2310      	movs	r3, #16
 8007112:	77fb      	strb	r3, [r7, #31]
 8007114:	e0a9      	b.n	800726a <UART_SetConfig+0x212>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a6f      	ldr	r2, [pc, #444]	; (80072d8 <UART_SetConfig+0x280>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d124      	bne.n	800716a <UART_SetConfig+0x112>
 8007120:	4b6c      	ldr	r3, [pc, #432]	; (80072d4 <UART_SetConfig+0x27c>)
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007128:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800712c:	d011      	beq.n	8007152 <UART_SetConfig+0xfa>
 800712e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007132:	d817      	bhi.n	8007164 <UART_SetConfig+0x10c>
 8007134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007138:	d011      	beq.n	800715e <UART_SetConfig+0x106>
 800713a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800713e:	d811      	bhi.n	8007164 <UART_SetConfig+0x10c>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <UART_SetConfig+0xf4>
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007148:	d006      	beq.n	8007158 <UART_SetConfig+0x100>
 800714a:	e00b      	b.n	8007164 <UART_SetConfig+0x10c>
 800714c:	2300      	movs	r3, #0
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e08b      	b.n	800726a <UART_SetConfig+0x212>
 8007152:	2302      	movs	r3, #2
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	e088      	b.n	800726a <UART_SetConfig+0x212>
 8007158:	2304      	movs	r3, #4
 800715a:	77fb      	strb	r3, [r7, #31]
 800715c:	e085      	b.n	800726a <UART_SetConfig+0x212>
 800715e:	2308      	movs	r3, #8
 8007160:	77fb      	strb	r3, [r7, #31]
 8007162:	e082      	b.n	800726a <UART_SetConfig+0x212>
 8007164:	2310      	movs	r3, #16
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e07f      	b.n	800726a <UART_SetConfig+0x212>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a5b      	ldr	r2, [pc, #364]	; (80072dc <UART_SetConfig+0x284>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d124      	bne.n	80071be <UART_SetConfig+0x166>
 8007174:	4b57      	ldr	r3, [pc, #348]	; (80072d4 <UART_SetConfig+0x27c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800717c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007180:	d011      	beq.n	80071a6 <UART_SetConfig+0x14e>
 8007182:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007186:	d817      	bhi.n	80071b8 <UART_SetConfig+0x160>
 8007188:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800718c:	d011      	beq.n	80071b2 <UART_SetConfig+0x15a>
 800718e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007192:	d811      	bhi.n	80071b8 <UART_SetConfig+0x160>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <UART_SetConfig+0x148>
 8007198:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800719c:	d006      	beq.n	80071ac <UART_SetConfig+0x154>
 800719e:	e00b      	b.n	80071b8 <UART_SetConfig+0x160>
 80071a0:	2300      	movs	r3, #0
 80071a2:	77fb      	strb	r3, [r7, #31]
 80071a4:	e061      	b.n	800726a <UART_SetConfig+0x212>
 80071a6:	2302      	movs	r3, #2
 80071a8:	77fb      	strb	r3, [r7, #31]
 80071aa:	e05e      	b.n	800726a <UART_SetConfig+0x212>
 80071ac:	2304      	movs	r3, #4
 80071ae:	77fb      	strb	r3, [r7, #31]
 80071b0:	e05b      	b.n	800726a <UART_SetConfig+0x212>
 80071b2:	2308      	movs	r3, #8
 80071b4:	77fb      	strb	r3, [r7, #31]
 80071b6:	e058      	b.n	800726a <UART_SetConfig+0x212>
 80071b8:	2310      	movs	r3, #16
 80071ba:	77fb      	strb	r3, [r7, #31]
 80071bc:	e055      	b.n	800726a <UART_SetConfig+0x212>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a47      	ldr	r2, [pc, #284]	; (80072e0 <UART_SetConfig+0x288>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d124      	bne.n	8007212 <UART_SetConfig+0x1ba>
 80071c8:	4b42      	ldr	r3, [pc, #264]	; (80072d4 <UART_SetConfig+0x27c>)
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80071d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071d4:	d011      	beq.n	80071fa <UART_SetConfig+0x1a2>
 80071d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071da:	d817      	bhi.n	800720c <UART_SetConfig+0x1b4>
 80071dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071e0:	d011      	beq.n	8007206 <UART_SetConfig+0x1ae>
 80071e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071e6:	d811      	bhi.n	800720c <UART_SetConfig+0x1b4>
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <UART_SetConfig+0x19c>
 80071ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f0:	d006      	beq.n	8007200 <UART_SetConfig+0x1a8>
 80071f2:	e00b      	b.n	800720c <UART_SetConfig+0x1b4>
 80071f4:	2300      	movs	r3, #0
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e037      	b.n	800726a <UART_SetConfig+0x212>
 80071fa:	2302      	movs	r3, #2
 80071fc:	77fb      	strb	r3, [r7, #31]
 80071fe:	e034      	b.n	800726a <UART_SetConfig+0x212>
 8007200:	2304      	movs	r3, #4
 8007202:	77fb      	strb	r3, [r7, #31]
 8007204:	e031      	b.n	800726a <UART_SetConfig+0x212>
 8007206:	2308      	movs	r3, #8
 8007208:	77fb      	strb	r3, [r7, #31]
 800720a:	e02e      	b.n	800726a <UART_SetConfig+0x212>
 800720c:	2310      	movs	r3, #16
 800720e:	77fb      	strb	r3, [r7, #31]
 8007210:	e02b      	b.n	800726a <UART_SetConfig+0x212>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a33      	ldr	r2, [pc, #204]	; (80072e4 <UART_SetConfig+0x28c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d124      	bne.n	8007266 <UART_SetConfig+0x20e>
 800721c:	4b2d      	ldr	r3, [pc, #180]	; (80072d4 <UART_SetConfig+0x27c>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007224:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007228:	d011      	beq.n	800724e <UART_SetConfig+0x1f6>
 800722a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800722e:	d817      	bhi.n	8007260 <UART_SetConfig+0x208>
 8007230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007234:	d011      	beq.n	800725a <UART_SetConfig+0x202>
 8007236:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800723a:	d811      	bhi.n	8007260 <UART_SetConfig+0x208>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <UART_SetConfig+0x1f0>
 8007240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007244:	d006      	beq.n	8007254 <UART_SetConfig+0x1fc>
 8007246:	e00b      	b.n	8007260 <UART_SetConfig+0x208>
 8007248:	2300      	movs	r3, #0
 800724a:	77fb      	strb	r3, [r7, #31]
 800724c:	e00d      	b.n	800726a <UART_SetConfig+0x212>
 800724e:	2302      	movs	r3, #2
 8007250:	77fb      	strb	r3, [r7, #31]
 8007252:	e00a      	b.n	800726a <UART_SetConfig+0x212>
 8007254:	2304      	movs	r3, #4
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e007      	b.n	800726a <UART_SetConfig+0x212>
 800725a:	2308      	movs	r3, #8
 800725c:	77fb      	strb	r3, [r7, #31]
 800725e:	e004      	b.n	800726a <UART_SetConfig+0x212>
 8007260:	2310      	movs	r3, #16
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e001      	b.n	800726a <UART_SetConfig+0x212>
 8007266:	2310      	movs	r3, #16
 8007268:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007272:	d16b      	bne.n	800734c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8007274:	7ffb      	ldrb	r3, [r7, #31]
 8007276:	2b08      	cmp	r3, #8
 8007278:	d838      	bhi.n	80072ec <UART_SetConfig+0x294>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <UART_SetConfig+0x228>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072a5 	.word	0x080072a5
 8007284:	080072ad 	.word	0x080072ad
 8007288:	080072b5 	.word	0x080072b5
 800728c:	080072ed 	.word	0x080072ed
 8007290:	080072bb 	.word	0x080072bb
 8007294:	080072ed 	.word	0x080072ed
 8007298:	080072ed 	.word	0x080072ed
 800729c:	080072ed 	.word	0x080072ed
 80072a0:	080072c3 	.word	0x080072c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a4:	f7fd ff98 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 80072a8:	61b8      	str	r0, [r7, #24]
        break;
 80072aa:	e024      	b.n	80072f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ac:	f7fd ffb6 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 80072b0:	61b8      	str	r0, [r7, #24]
        break;
 80072b2:	e020      	b.n	80072f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b4:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <UART_SetConfig+0x290>)
 80072b6:	61bb      	str	r3, [r7, #24]
        break;
 80072b8:	e01d      	b.n	80072f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ba:	f7fd ff17 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 80072be:	61b8      	str	r0, [r7, #24]
        break;
 80072c0:	e019      	b.n	80072f6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c6:	61bb      	str	r3, [r7, #24]
        break;
 80072c8:	e015      	b.n	80072f6 <UART_SetConfig+0x29e>
 80072ca:	bf00      	nop
 80072cc:	efff69f3 	.word	0xefff69f3
 80072d0:	40013800 	.word	0x40013800
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40004400 	.word	0x40004400
 80072dc:	40004800 	.word	0x40004800
 80072e0:	40004c00 	.word	0x40004c00
 80072e4:	40005000 	.word	0x40005000
 80072e8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	77bb      	strb	r3, [r7, #30]
        break;
 80072f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d073      	beq.n	80073e4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	005a      	lsls	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	441a      	add	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	2b0f      	cmp	r3, #15
 8007316:	d916      	bls.n	8007346 <UART_SetConfig+0x2ee>
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731e:	d212      	bcs.n	8007346 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	b29b      	uxth	r3, r3
 8007324:	f023 030f 	bic.w	r3, r3, #15
 8007328:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	085b      	lsrs	r3, r3, #1
 800732e:	b29b      	uxth	r3, r3
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	b29a      	uxth	r2, r3
 8007336:	89fb      	ldrh	r3, [r7, #14]
 8007338:	4313      	orrs	r3, r2
 800733a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	89fa      	ldrh	r2, [r7, #14]
 8007342:	60da      	str	r2, [r3, #12]
 8007344:	e04e      	b.n	80073e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	77bb      	strb	r3, [r7, #30]
 800734a:	e04b      	b.n	80073e4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800734c:	7ffb      	ldrb	r3, [r7, #31]
 800734e:	2b08      	cmp	r3, #8
 8007350:	d827      	bhi.n	80073a2 <UART_SetConfig+0x34a>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <UART_SetConfig+0x300>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	0800737d 	.word	0x0800737d
 800735c:	08007385 	.word	0x08007385
 8007360:	0800738d 	.word	0x0800738d
 8007364:	080073a3 	.word	0x080073a3
 8007368:	08007393 	.word	0x08007393
 800736c:	080073a3 	.word	0x080073a3
 8007370:	080073a3 	.word	0x080073a3
 8007374:	080073a3 	.word	0x080073a3
 8007378:	0800739b 	.word	0x0800739b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800737c:	f7fd ff2c 	bl	80051d8 <HAL_RCC_GetPCLK1Freq>
 8007380:	61b8      	str	r0, [r7, #24]
        break;
 8007382:	e013      	b.n	80073ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007384:	f7fd ff4a 	bl	800521c <HAL_RCC_GetPCLK2Freq>
 8007388:	61b8      	str	r0, [r7, #24]
        break;
 800738a:	e00f      	b.n	80073ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800738c:	4b1b      	ldr	r3, [pc, #108]	; (80073fc <UART_SetConfig+0x3a4>)
 800738e:	61bb      	str	r3, [r7, #24]
        break;
 8007390:	e00c      	b.n	80073ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007392:	f7fd feab 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 8007396:	61b8      	str	r0, [r7, #24]
        break;
 8007398:	e008      	b.n	80073ac <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800739a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800739e:	61bb      	str	r3, [r7, #24]
        break;
 80073a0:	e004      	b.n	80073ac <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	77bb      	strb	r3, [r7, #30]
        break;
 80073aa:	bf00      	nop
    }

    if (pclk != 0U)
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d018      	beq.n	80073e4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	085a      	lsrs	r2, r3, #1
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	441a      	add	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b0f      	cmp	r3, #15
 80073ca:	d909      	bls.n	80073e0 <UART_SetConfig+0x388>
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d2:	d205      	bcs.n	80073e0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60da      	str	r2, [r3, #12]
 80073de:	e001      	b.n	80073e4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80073f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3720      	adds	r7, #32
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	007a1200 	.word	0x007a1200

08007400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	f003 0310 	and.w	r3, r3, #16
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01a      	beq.n	8007516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074fe:	d10a      	bne.n	8007516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	605a      	str	r2, [r3, #4]
  }
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b098      	sub	sp, #96	; 0x60
 8007548:	af02      	add	r7, sp, #8
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007554:	f7fa fcfe 	bl	8001f54 <HAL_GetTick>
 8007558:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b08      	cmp	r3, #8
 8007566:	d12e      	bne.n	80075c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007570:	2200      	movs	r2, #0
 8007572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f88c 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d021      	beq.n	80075c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007596:	653b      	str	r3, [r7, #80]	; 0x50
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44
 80075a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e062      	b.n	800768c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d149      	bne.n	8007668 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075dc:	2200      	movs	r2, #0
 80075de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f856 	bl	8007694 <UART_WaitOnFlagUntilTimeout>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d03c      	beq.n	8007668 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	e853 3f00 	ldrex	r3, [r3]
 80075fa:	623b      	str	r3, [r7, #32]
   return(result);
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760c:	633b      	str	r3, [r7, #48]	; 0x30
 800760e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e6      	bne.n	80075ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	3308      	adds	r3, #8
 8007626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0301 	bic.w	r3, r3, #1
 8007636:	64bb      	str	r3, [r7, #72]	; 0x48
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007640:	61fa      	str	r2, [r7, #28]
 8007642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007644:	69b9      	ldr	r1, [r7, #24]
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	e841 2300 	strex	r3, r2, [r1]
 800764c:	617b      	str	r3, [r7, #20]
   return(result);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e5      	bne.n	8007620 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e011      	b.n	800768c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2220      	movs	r2, #32
 800766c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3758      	adds	r7, #88	; 0x58
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	603b      	str	r3, [r7, #0]
 80076a0:	4613      	mov	r3, r2
 80076a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a4:	e049      	b.n	800773a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ac:	d045      	beq.n	800773a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ae:	f7fa fc51 	bl	8001f54 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d302      	bcc.n	80076c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e048      	b.n	800775a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d031      	beq.n	800773a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f003 0308 	and.w	r3, r3, #8
 80076e0:	2b08      	cmp	r3, #8
 80076e2:	d110      	bne.n	8007706 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2208      	movs	r2, #8
 80076ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f838 	bl	8007762 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2208      	movs	r2, #8
 80076f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e029      	b.n	800775a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007714:	d111      	bne.n	800773a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800771e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f81e 	bl	8007762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2220      	movs	r2, #32
 800772a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e00f      	b.n	800775a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4013      	ands	r3, r2
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	429a      	cmp	r2, r3
 8007748:	bf0c      	ite	eq
 800774a:	2301      	moveq	r3, #1
 800774c:	2300      	movne	r3, #0
 800774e:	b2db      	uxtb	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	429a      	cmp	r2, r3
 8007756:	d0a6      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007762:	b480      	push	{r7}
 8007764:	b095      	sub	sp, #84	; 0x54
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800777e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007788:	643b      	str	r3, [r7, #64]	; 0x40
 800778a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800778e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3308      	adds	r3, #8
 80077a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3308      	adds	r3, #8
 80077ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e5      	bne.n	800779c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d118      	bne.n	800780a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f023 0310 	bic.w	r3, r3, #16
 80077ec:	647b      	str	r3, [r7, #68]	; 0x44
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6979      	ldr	r1, [r7, #20]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	613b      	str	r3, [r7, #16]
   return(result);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e6      	bne.n	80077d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800781e:	bf00      	nop
 8007820:	3754      	adds	r7, #84	; 0x54
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
	...

0800782c <siprintf>:
 800782c:	b40e      	push	{r1, r2, r3}
 800782e:	b500      	push	{lr}
 8007830:	b09c      	sub	sp, #112	; 0x70
 8007832:	ab1d      	add	r3, sp, #116	; 0x74
 8007834:	9002      	str	r0, [sp, #8]
 8007836:	9006      	str	r0, [sp, #24]
 8007838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800783c:	4809      	ldr	r0, [pc, #36]	; (8007864 <siprintf+0x38>)
 800783e:	9107      	str	r1, [sp, #28]
 8007840:	9104      	str	r1, [sp, #16]
 8007842:	4909      	ldr	r1, [pc, #36]	; (8007868 <siprintf+0x3c>)
 8007844:	f853 2b04 	ldr.w	r2, [r3], #4
 8007848:	9105      	str	r1, [sp, #20]
 800784a:	6800      	ldr	r0, [r0, #0]
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	a902      	add	r1, sp, #8
 8007850:	f000 f992 	bl	8007b78 <_svfiprintf_r>
 8007854:	9b02      	ldr	r3, [sp, #8]
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	b01c      	add	sp, #112	; 0x70
 800785c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007860:	b003      	add	sp, #12
 8007862:	4770      	bx	lr
 8007864:	20000058 	.word	0x20000058
 8007868:	ffff0208 	.word	0xffff0208

0800786c <memset>:
 800786c:	4402      	add	r2, r0
 800786e:	4603      	mov	r3, r0
 8007870:	4293      	cmp	r3, r2
 8007872:	d100      	bne.n	8007876 <memset+0xa>
 8007874:	4770      	bx	lr
 8007876:	f803 1b01 	strb.w	r1, [r3], #1
 800787a:	e7f9      	b.n	8007870 <memset+0x4>

0800787c <__errno>:
 800787c:	4b01      	ldr	r3, [pc, #4]	; (8007884 <__errno+0x8>)
 800787e:	6818      	ldr	r0, [r3, #0]
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	20000058 	.word	0x20000058

08007888 <__libc_init_array>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	4d0d      	ldr	r5, [pc, #52]	; (80078c0 <__libc_init_array+0x38>)
 800788c:	4c0d      	ldr	r4, [pc, #52]	; (80078c4 <__libc_init_array+0x3c>)
 800788e:	1b64      	subs	r4, r4, r5
 8007890:	10a4      	asrs	r4, r4, #2
 8007892:	2600      	movs	r6, #0
 8007894:	42a6      	cmp	r6, r4
 8007896:	d109      	bne.n	80078ac <__libc_init_array+0x24>
 8007898:	4d0b      	ldr	r5, [pc, #44]	; (80078c8 <__libc_init_array+0x40>)
 800789a:	4c0c      	ldr	r4, [pc, #48]	; (80078cc <__libc_init_array+0x44>)
 800789c:	f000 fc6a 	bl	8008174 <_init>
 80078a0:	1b64      	subs	r4, r4, r5
 80078a2:	10a4      	asrs	r4, r4, #2
 80078a4:	2600      	movs	r6, #0
 80078a6:	42a6      	cmp	r6, r4
 80078a8:	d105      	bne.n	80078b6 <__libc_init_array+0x2e>
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b0:	4798      	blx	r3
 80078b2:	3601      	adds	r6, #1
 80078b4:	e7ee      	b.n	8007894 <__libc_init_array+0xc>
 80078b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ba:	4798      	blx	r3
 80078bc:	3601      	adds	r6, #1
 80078be:	e7f2      	b.n	80078a6 <__libc_init_array+0x1e>
 80078c0:	0800829c 	.word	0x0800829c
 80078c4:	0800829c 	.word	0x0800829c
 80078c8:	0800829c 	.word	0x0800829c
 80078cc:	080082a0 	.word	0x080082a0

080078d0 <__retarget_lock_acquire_recursive>:
 80078d0:	4770      	bx	lr

080078d2 <__retarget_lock_release_recursive>:
 80078d2:	4770      	bx	lr

080078d4 <_free_r>:
 80078d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078d6:	2900      	cmp	r1, #0
 80078d8:	d044      	beq.n	8007964 <_free_r+0x90>
 80078da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078de:	9001      	str	r0, [sp, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f1a1 0404 	sub.w	r4, r1, #4
 80078e6:	bfb8      	it	lt
 80078e8:	18e4      	addlt	r4, r4, r3
 80078ea:	f000 f8df 	bl	8007aac <__malloc_lock>
 80078ee:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <_free_r+0x94>)
 80078f0:	9801      	ldr	r0, [sp, #4]
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	b933      	cbnz	r3, 8007904 <_free_r+0x30>
 80078f6:	6063      	str	r3, [r4, #4]
 80078f8:	6014      	str	r4, [r2, #0]
 80078fa:	b003      	add	sp, #12
 80078fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007900:	f000 b8da 	b.w	8007ab8 <__malloc_unlock>
 8007904:	42a3      	cmp	r3, r4
 8007906:	d908      	bls.n	800791a <_free_r+0x46>
 8007908:	6825      	ldr	r5, [r4, #0]
 800790a:	1961      	adds	r1, r4, r5
 800790c:	428b      	cmp	r3, r1
 800790e:	bf01      	itttt	eq
 8007910:	6819      	ldreq	r1, [r3, #0]
 8007912:	685b      	ldreq	r3, [r3, #4]
 8007914:	1949      	addeq	r1, r1, r5
 8007916:	6021      	streq	r1, [r4, #0]
 8007918:	e7ed      	b.n	80078f6 <_free_r+0x22>
 800791a:	461a      	mov	r2, r3
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	b10b      	cbz	r3, 8007924 <_free_r+0x50>
 8007920:	42a3      	cmp	r3, r4
 8007922:	d9fa      	bls.n	800791a <_free_r+0x46>
 8007924:	6811      	ldr	r1, [r2, #0]
 8007926:	1855      	adds	r5, r2, r1
 8007928:	42a5      	cmp	r5, r4
 800792a:	d10b      	bne.n	8007944 <_free_r+0x70>
 800792c:	6824      	ldr	r4, [r4, #0]
 800792e:	4421      	add	r1, r4
 8007930:	1854      	adds	r4, r2, r1
 8007932:	42a3      	cmp	r3, r4
 8007934:	6011      	str	r1, [r2, #0]
 8007936:	d1e0      	bne.n	80078fa <_free_r+0x26>
 8007938:	681c      	ldr	r4, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	6053      	str	r3, [r2, #4]
 800793e:	440c      	add	r4, r1
 8007940:	6014      	str	r4, [r2, #0]
 8007942:	e7da      	b.n	80078fa <_free_r+0x26>
 8007944:	d902      	bls.n	800794c <_free_r+0x78>
 8007946:	230c      	movs	r3, #12
 8007948:	6003      	str	r3, [r0, #0]
 800794a:	e7d6      	b.n	80078fa <_free_r+0x26>
 800794c:	6825      	ldr	r5, [r4, #0]
 800794e:	1961      	adds	r1, r4, r5
 8007950:	428b      	cmp	r3, r1
 8007952:	bf04      	itt	eq
 8007954:	6819      	ldreq	r1, [r3, #0]
 8007956:	685b      	ldreq	r3, [r3, #4]
 8007958:	6063      	str	r3, [r4, #4]
 800795a:	bf04      	itt	eq
 800795c:	1949      	addeq	r1, r1, r5
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	6054      	str	r4, [r2, #4]
 8007962:	e7ca      	b.n	80078fa <_free_r+0x26>
 8007964:	b003      	add	sp, #12
 8007966:	bd30      	pop	{r4, r5, pc}
 8007968:	200004b8 	.word	0x200004b8

0800796c <sbrk_aligned>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4e0e      	ldr	r6, [pc, #56]	; (80079a8 <sbrk_aligned+0x3c>)
 8007970:	460c      	mov	r4, r1
 8007972:	6831      	ldr	r1, [r6, #0]
 8007974:	4605      	mov	r5, r0
 8007976:	b911      	cbnz	r1, 800797e <sbrk_aligned+0x12>
 8007978:	f000 fba6 	bl	80080c8 <_sbrk_r>
 800797c:	6030      	str	r0, [r6, #0]
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f000 fba1 	bl	80080c8 <_sbrk_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d00a      	beq.n	80079a0 <sbrk_aligned+0x34>
 800798a:	1cc4      	adds	r4, r0, #3
 800798c:	f024 0403 	bic.w	r4, r4, #3
 8007990:	42a0      	cmp	r0, r4
 8007992:	d007      	beq.n	80079a4 <sbrk_aligned+0x38>
 8007994:	1a21      	subs	r1, r4, r0
 8007996:	4628      	mov	r0, r5
 8007998:	f000 fb96 	bl	80080c8 <_sbrk_r>
 800799c:	3001      	adds	r0, #1
 800799e:	d101      	bne.n	80079a4 <sbrk_aligned+0x38>
 80079a0:	f04f 34ff 	mov.w	r4, #4294967295
 80079a4:	4620      	mov	r0, r4
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	200004bc 	.word	0x200004bc

080079ac <_malloc_r>:
 80079ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b0:	1ccd      	adds	r5, r1, #3
 80079b2:	f025 0503 	bic.w	r5, r5, #3
 80079b6:	3508      	adds	r5, #8
 80079b8:	2d0c      	cmp	r5, #12
 80079ba:	bf38      	it	cc
 80079bc:	250c      	movcc	r5, #12
 80079be:	2d00      	cmp	r5, #0
 80079c0:	4607      	mov	r7, r0
 80079c2:	db01      	blt.n	80079c8 <_malloc_r+0x1c>
 80079c4:	42a9      	cmp	r1, r5
 80079c6:	d905      	bls.n	80079d4 <_malloc_r+0x28>
 80079c8:	230c      	movs	r3, #12
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	2600      	movs	r6, #0
 80079ce:	4630      	mov	r0, r6
 80079d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007aa8 <_malloc_r+0xfc>
 80079d8:	f000 f868 	bl	8007aac <__malloc_lock>
 80079dc:	f8d8 3000 	ldr.w	r3, [r8]
 80079e0:	461c      	mov	r4, r3
 80079e2:	bb5c      	cbnz	r4, 8007a3c <_malloc_r+0x90>
 80079e4:	4629      	mov	r1, r5
 80079e6:	4638      	mov	r0, r7
 80079e8:	f7ff ffc0 	bl	800796c <sbrk_aligned>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	4604      	mov	r4, r0
 80079f0:	d155      	bne.n	8007a9e <_malloc_r+0xf2>
 80079f2:	f8d8 4000 	ldr.w	r4, [r8]
 80079f6:	4626      	mov	r6, r4
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	d145      	bne.n	8007a88 <_malloc_r+0xdc>
 80079fc:	2c00      	cmp	r4, #0
 80079fe:	d048      	beq.n	8007a92 <_malloc_r+0xe6>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	4631      	mov	r1, r6
 8007a04:	4638      	mov	r0, r7
 8007a06:	eb04 0903 	add.w	r9, r4, r3
 8007a0a:	f000 fb5d 	bl	80080c8 <_sbrk_r>
 8007a0e:	4581      	cmp	r9, r0
 8007a10:	d13f      	bne.n	8007a92 <_malloc_r+0xe6>
 8007a12:	6821      	ldr	r1, [r4, #0]
 8007a14:	1a6d      	subs	r5, r5, r1
 8007a16:	4629      	mov	r1, r5
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f7ff ffa7 	bl	800796c <sbrk_aligned>
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d037      	beq.n	8007a92 <_malloc_r+0xe6>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	442b      	add	r3, r5
 8007a26:	6023      	str	r3, [r4, #0]
 8007a28:	f8d8 3000 	ldr.w	r3, [r8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d038      	beq.n	8007aa2 <_malloc_r+0xf6>
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	42a2      	cmp	r2, r4
 8007a34:	d12b      	bne.n	8007a8e <_malloc_r+0xe2>
 8007a36:	2200      	movs	r2, #0
 8007a38:	605a      	str	r2, [r3, #4]
 8007a3a:	e00f      	b.n	8007a5c <_malloc_r+0xb0>
 8007a3c:	6822      	ldr	r2, [r4, #0]
 8007a3e:	1b52      	subs	r2, r2, r5
 8007a40:	d41f      	bmi.n	8007a82 <_malloc_r+0xd6>
 8007a42:	2a0b      	cmp	r2, #11
 8007a44:	d917      	bls.n	8007a76 <_malloc_r+0xca>
 8007a46:	1961      	adds	r1, r4, r5
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	6025      	str	r5, [r4, #0]
 8007a4c:	bf18      	it	ne
 8007a4e:	6059      	strne	r1, [r3, #4]
 8007a50:	6863      	ldr	r3, [r4, #4]
 8007a52:	bf08      	it	eq
 8007a54:	f8c8 1000 	streq.w	r1, [r8]
 8007a58:	5162      	str	r2, [r4, r5]
 8007a5a:	604b      	str	r3, [r1, #4]
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f104 060b 	add.w	r6, r4, #11
 8007a62:	f000 f829 	bl	8007ab8 <__malloc_unlock>
 8007a66:	f026 0607 	bic.w	r6, r6, #7
 8007a6a:	1d23      	adds	r3, r4, #4
 8007a6c:	1af2      	subs	r2, r6, r3
 8007a6e:	d0ae      	beq.n	80079ce <_malloc_r+0x22>
 8007a70:	1b9b      	subs	r3, r3, r6
 8007a72:	50a3      	str	r3, [r4, r2]
 8007a74:	e7ab      	b.n	80079ce <_malloc_r+0x22>
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	6862      	ldr	r2, [r4, #4]
 8007a7a:	d1dd      	bne.n	8007a38 <_malloc_r+0x8c>
 8007a7c:	f8c8 2000 	str.w	r2, [r8]
 8007a80:	e7ec      	b.n	8007a5c <_malloc_r+0xb0>
 8007a82:	4623      	mov	r3, r4
 8007a84:	6864      	ldr	r4, [r4, #4]
 8007a86:	e7ac      	b.n	80079e2 <_malloc_r+0x36>
 8007a88:	4634      	mov	r4, r6
 8007a8a:	6876      	ldr	r6, [r6, #4]
 8007a8c:	e7b4      	b.n	80079f8 <_malloc_r+0x4c>
 8007a8e:	4613      	mov	r3, r2
 8007a90:	e7cc      	b.n	8007a2c <_malloc_r+0x80>
 8007a92:	230c      	movs	r3, #12
 8007a94:	603b      	str	r3, [r7, #0]
 8007a96:	4638      	mov	r0, r7
 8007a98:	f000 f80e 	bl	8007ab8 <__malloc_unlock>
 8007a9c:	e797      	b.n	80079ce <_malloc_r+0x22>
 8007a9e:	6025      	str	r5, [r4, #0]
 8007aa0:	e7dc      	b.n	8007a5c <_malloc_r+0xb0>
 8007aa2:	605b      	str	r3, [r3, #4]
 8007aa4:	deff      	udf	#255	; 0xff
 8007aa6:	bf00      	nop
 8007aa8:	200004b8 	.word	0x200004b8

08007aac <__malloc_lock>:
 8007aac:	4801      	ldr	r0, [pc, #4]	; (8007ab4 <__malloc_lock+0x8>)
 8007aae:	f7ff bf0f 	b.w	80078d0 <__retarget_lock_acquire_recursive>
 8007ab2:	bf00      	nop
 8007ab4:	200004b4 	.word	0x200004b4

08007ab8 <__malloc_unlock>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	; (8007ac0 <__malloc_unlock+0x8>)
 8007aba:	f7ff bf0a 	b.w	80078d2 <__retarget_lock_release_recursive>
 8007abe:	bf00      	nop
 8007ac0:	200004b4 	.word	0x200004b4

08007ac4 <__ssputs_r>:
 8007ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	688e      	ldr	r6, [r1, #8]
 8007aca:	461f      	mov	r7, r3
 8007acc:	42be      	cmp	r6, r7
 8007ace:	680b      	ldr	r3, [r1, #0]
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	4690      	mov	r8, r2
 8007ad6:	d82c      	bhi.n	8007b32 <__ssputs_r+0x6e>
 8007ad8:	898a      	ldrh	r2, [r1, #12]
 8007ada:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ade:	d026      	beq.n	8007b2e <__ssputs_r+0x6a>
 8007ae0:	6965      	ldr	r5, [r4, #20]
 8007ae2:	6909      	ldr	r1, [r1, #16]
 8007ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ae8:	eba3 0901 	sub.w	r9, r3, r1
 8007aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007af0:	1c7b      	adds	r3, r7, #1
 8007af2:	444b      	add	r3, r9
 8007af4:	106d      	asrs	r5, r5, #1
 8007af6:	429d      	cmp	r5, r3
 8007af8:	bf38      	it	cc
 8007afa:	461d      	movcc	r5, r3
 8007afc:	0553      	lsls	r3, r2, #21
 8007afe:	d527      	bpl.n	8007b50 <__ssputs_r+0x8c>
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7ff ff53 	bl	80079ac <_malloc_r>
 8007b06:	4606      	mov	r6, r0
 8007b08:	b360      	cbz	r0, 8007b64 <__ssputs_r+0xa0>
 8007b0a:	6921      	ldr	r1, [r4, #16]
 8007b0c:	464a      	mov	r2, r9
 8007b0e:	f000 faeb 	bl	80080e8 <memcpy>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	6126      	str	r6, [r4, #16]
 8007b20:	6165      	str	r5, [r4, #20]
 8007b22:	444e      	add	r6, r9
 8007b24:	eba5 0509 	sub.w	r5, r5, r9
 8007b28:	6026      	str	r6, [r4, #0]
 8007b2a:	60a5      	str	r5, [r4, #8]
 8007b2c:	463e      	mov	r6, r7
 8007b2e:	42be      	cmp	r6, r7
 8007b30:	d900      	bls.n	8007b34 <__ssputs_r+0x70>
 8007b32:	463e      	mov	r6, r7
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	4632      	mov	r2, r6
 8007b38:	4641      	mov	r1, r8
 8007b3a:	f000 faab 	bl	8008094 <memmove>
 8007b3e:	68a3      	ldr	r3, [r4, #8]
 8007b40:	1b9b      	subs	r3, r3, r6
 8007b42:	60a3      	str	r3, [r4, #8]
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	4433      	add	r3, r6
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b50:	462a      	mov	r2, r5
 8007b52:	f000 fad7 	bl	8008104 <_realloc_r>
 8007b56:	4606      	mov	r6, r0
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1e0      	bne.n	8007b1e <__ssputs_r+0x5a>
 8007b5c:	6921      	ldr	r1, [r4, #16]
 8007b5e:	4650      	mov	r0, sl
 8007b60:	f7ff feb8 	bl	80078d4 <_free_r>
 8007b64:	230c      	movs	r3, #12
 8007b66:	f8ca 3000 	str.w	r3, [sl]
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b70:	81a3      	strh	r3, [r4, #12]
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295
 8007b76:	e7e9      	b.n	8007b4c <__ssputs_r+0x88>

08007b78 <_svfiprintf_r>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	4698      	mov	r8, r3
 8007b7e:	898b      	ldrh	r3, [r1, #12]
 8007b80:	061b      	lsls	r3, r3, #24
 8007b82:	b09d      	sub	sp, #116	; 0x74
 8007b84:	4607      	mov	r7, r0
 8007b86:	460d      	mov	r5, r1
 8007b88:	4614      	mov	r4, r2
 8007b8a:	d50e      	bpl.n	8007baa <_svfiprintf_r+0x32>
 8007b8c:	690b      	ldr	r3, [r1, #16]
 8007b8e:	b963      	cbnz	r3, 8007baa <_svfiprintf_r+0x32>
 8007b90:	2140      	movs	r1, #64	; 0x40
 8007b92:	f7ff ff0b 	bl	80079ac <_malloc_r>
 8007b96:	6028      	str	r0, [r5, #0]
 8007b98:	6128      	str	r0, [r5, #16]
 8007b9a:	b920      	cbnz	r0, 8007ba6 <_svfiprintf_r+0x2e>
 8007b9c:	230c      	movs	r3, #12
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e0d0      	b.n	8007d48 <_svfiprintf_r+0x1d0>
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	616b      	str	r3, [r5, #20]
 8007baa:	2300      	movs	r3, #0
 8007bac:	9309      	str	r3, [sp, #36]	; 0x24
 8007bae:	2320      	movs	r3, #32
 8007bb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bb8:	2330      	movs	r3, #48	; 0x30
 8007bba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d60 <_svfiprintf_r+0x1e8>
 8007bbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bc2:	f04f 0901 	mov.w	r9, #1
 8007bc6:	4623      	mov	r3, r4
 8007bc8:	469a      	mov	sl, r3
 8007bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bce:	b10a      	cbz	r2, 8007bd4 <_svfiprintf_r+0x5c>
 8007bd0:	2a25      	cmp	r2, #37	; 0x25
 8007bd2:	d1f9      	bne.n	8007bc8 <_svfiprintf_r+0x50>
 8007bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bd8:	d00b      	beq.n	8007bf2 <_svfiprintf_r+0x7a>
 8007bda:	465b      	mov	r3, fp
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff ff6f 	bl	8007ac4 <__ssputs_r>
 8007be6:	3001      	adds	r0, #1
 8007be8:	f000 80a9 	beq.w	8007d3e <_svfiprintf_r+0x1c6>
 8007bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bee:	445a      	add	r2, fp
 8007bf0:	9209      	str	r2, [sp, #36]	; 0x24
 8007bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80a1 	beq.w	8007d3e <_svfiprintf_r+0x1c6>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c06:	f10a 0a01 	add.w	sl, sl, #1
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	9307      	str	r3, [sp, #28]
 8007c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c12:	931a      	str	r3, [sp, #104]	; 0x68
 8007c14:	4654      	mov	r4, sl
 8007c16:	2205      	movs	r2, #5
 8007c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1c:	4850      	ldr	r0, [pc, #320]	; (8007d60 <_svfiprintf_r+0x1e8>)
 8007c1e:	f7f8 fae7 	bl	80001f0 <memchr>
 8007c22:	9a04      	ldr	r2, [sp, #16]
 8007c24:	b9d8      	cbnz	r0, 8007c5e <_svfiprintf_r+0xe6>
 8007c26:	06d0      	lsls	r0, r2, #27
 8007c28:	bf44      	itt	mi
 8007c2a:	2320      	movmi	r3, #32
 8007c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c30:	0711      	lsls	r1, r2, #28
 8007c32:	bf44      	itt	mi
 8007c34:	232b      	movmi	r3, #43	; 0x2b
 8007c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c40:	d015      	beq.n	8007c6e <_svfiprintf_r+0xf6>
 8007c42:	9a07      	ldr	r2, [sp, #28]
 8007c44:	4654      	mov	r4, sl
 8007c46:	2000      	movs	r0, #0
 8007c48:	f04f 0c0a 	mov.w	ip, #10
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c52:	3b30      	subs	r3, #48	; 0x30
 8007c54:	2b09      	cmp	r3, #9
 8007c56:	d94d      	bls.n	8007cf4 <_svfiprintf_r+0x17c>
 8007c58:	b1b0      	cbz	r0, 8007c88 <_svfiprintf_r+0x110>
 8007c5a:	9207      	str	r2, [sp, #28]
 8007c5c:	e014      	b.n	8007c88 <_svfiprintf_r+0x110>
 8007c5e:	eba0 0308 	sub.w	r3, r0, r8
 8007c62:	fa09 f303 	lsl.w	r3, r9, r3
 8007c66:	4313      	orrs	r3, r2
 8007c68:	9304      	str	r3, [sp, #16]
 8007c6a:	46a2      	mov	sl, r4
 8007c6c:	e7d2      	b.n	8007c14 <_svfiprintf_r+0x9c>
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	1d19      	adds	r1, r3, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	9103      	str	r1, [sp, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfbb      	ittet	lt
 8007c7a:	425b      	neglt	r3, r3
 8007c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c80:	9307      	strge	r3, [sp, #28]
 8007c82:	9307      	strlt	r3, [sp, #28]
 8007c84:	bfb8      	it	lt
 8007c86:	9204      	strlt	r2, [sp, #16]
 8007c88:	7823      	ldrb	r3, [r4, #0]
 8007c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c8c:	d10c      	bne.n	8007ca8 <_svfiprintf_r+0x130>
 8007c8e:	7863      	ldrb	r3, [r4, #1]
 8007c90:	2b2a      	cmp	r3, #42	; 0x2a
 8007c92:	d134      	bne.n	8007cfe <_svfiprintf_r+0x186>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	1d1a      	adds	r2, r3, #4
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	9203      	str	r2, [sp, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bfb8      	it	lt
 8007ca0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ca4:	3402      	adds	r4, #2
 8007ca6:	9305      	str	r3, [sp, #20]
 8007ca8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d70 <_svfiprintf_r+0x1f8>
 8007cac:	7821      	ldrb	r1, [r4, #0]
 8007cae:	2203      	movs	r2, #3
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	f7f8 fa9d 	bl	80001f0 <memchr>
 8007cb6:	b138      	cbz	r0, 8007cc8 <_svfiprintf_r+0x150>
 8007cb8:	9b04      	ldr	r3, [sp, #16]
 8007cba:	eba0 000a 	sub.w	r0, r0, sl
 8007cbe:	2240      	movs	r2, #64	; 0x40
 8007cc0:	4082      	lsls	r2, r0
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	3401      	adds	r4, #1
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ccc:	4825      	ldr	r0, [pc, #148]	; (8007d64 <_svfiprintf_r+0x1ec>)
 8007cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cd2:	2206      	movs	r2, #6
 8007cd4:	f7f8 fa8c 	bl	80001f0 <memchr>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d038      	beq.n	8007d4e <_svfiprintf_r+0x1d6>
 8007cdc:	4b22      	ldr	r3, [pc, #136]	; (8007d68 <_svfiprintf_r+0x1f0>)
 8007cde:	bb1b      	cbnz	r3, 8007d28 <_svfiprintf_r+0x1b0>
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	3307      	adds	r3, #7
 8007ce4:	f023 0307 	bic.w	r3, r3, #7
 8007ce8:	3308      	adds	r3, #8
 8007cea:	9303      	str	r3, [sp, #12]
 8007cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cee:	4433      	add	r3, r6
 8007cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf2:	e768      	b.n	8007bc6 <_svfiprintf_r+0x4e>
 8007cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	e7a6      	b.n	8007c4c <_svfiprintf_r+0xd4>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	3401      	adds	r4, #1
 8007d02:	9305      	str	r3, [sp, #20]
 8007d04:	4619      	mov	r1, r3
 8007d06:	f04f 0c0a 	mov.w	ip, #10
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d10:	3a30      	subs	r2, #48	; 0x30
 8007d12:	2a09      	cmp	r2, #9
 8007d14:	d903      	bls.n	8007d1e <_svfiprintf_r+0x1a6>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0c6      	beq.n	8007ca8 <_svfiprintf_r+0x130>
 8007d1a:	9105      	str	r1, [sp, #20]
 8007d1c:	e7c4      	b.n	8007ca8 <_svfiprintf_r+0x130>
 8007d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d22:	4604      	mov	r4, r0
 8007d24:	2301      	movs	r3, #1
 8007d26:	e7f0      	b.n	8007d0a <_svfiprintf_r+0x192>
 8007d28:	ab03      	add	r3, sp, #12
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	462a      	mov	r2, r5
 8007d2e:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <_svfiprintf_r+0x1f4>)
 8007d30:	a904      	add	r1, sp, #16
 8007d32:	4638      	mov	r0, r7
 8007d34:	f3af 8000 	nop.w
 8007d38:	1c42      	adds	r2, r0, #1
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	d1d6      	bne.n	8007cec <_svfiprintf_r+0x174>
 8007d3e:	89ab      	ldrh	r3, [r5, #12]
 8007d40:	065b      	lsls	r3, r3, #25
 8007d42:	f53f af2d 	bmi.w	8007ba0 <_svfiprintf_r+0x28>
 8007d46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d48:	b01d      	add	sp, #116	; 0x74
 8007d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	ab03      	add	r3, sp, #12
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	462a      	mov	r2, r5
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <_svfiprintf_r+0x1f4>)
 8007d56:	a904      	add	r1, sp, #16
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f000 f879 	bl	8007e50 <_printf_i>
 8007d5e:	e7eb      	b.n	8007d38 <_svfiprintf_r+0x1c0>
 8007d60:	08008268 	.word	0x08008268
 8007d64:	08008272 	.word	0x08008272
 8007d68:	00000000 	.word	0x00000000
 8007d6c:	08007ac5 	.word	0x08007ac5
 8007d70:	0800826e 	.word	0x0800826e

08007d74 <_printf_common>:
 8007d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	4616      	mov	r6, r2
 8007d7a:	4699      	mov	r9, r3
 8007d7c:	688a      	ldr	r2, [r1, #8]
 8007d7e:	690b      	ldr	r3, [r1, #16]
 8007d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d84:	4293      	cmp	r3, r2
 8007d86:	bfb8      	it	lt
 8007d88:	4613      	movlt	r3, r2
 8007d8a:	6033      	str	r3, [r6, #0]
 8007d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d90:	4607      	mov	r7, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	b10a      	cbz	r2, 8007d9a <_printf_common+0x26>
 8007d96:	3301      	adds	r3, #1
 8007d98:	6033      	str	r3, [r6, #0]
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	0699      	lsls	r1, r3, #26
 8007d9e:	bf42      	ittt	mi
 8007da0:	6833      	ldrmi	r3, [r6, #0]
 8007da2:	3302      	addmi	r3, #2
 8007da4:	6033      	strmi	r3, [r6, #0]
 8007da6:	6825      	ldr	r5, [r4, #0]
 8007da8:	f015 0506 	ands.w	r5, r5, #6
 8007dac:	d106      	bne.n	8007dbc <_printf_common+0x48>
 8007dae:	f104 0a19 	add.w	sl, r4, #25
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	6832      	ldr	r2, [r6, #0]
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	42ab      	cmp	r3, r5
 8007dba:	dc26      	bgt.n	8007e0a <_printf_common+0x96>
 8007dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dc0:	1e13      	subs	r3, r2, #0
 8007dc2:	6822      	ldr	r2, [r4, #0]
 8007dc4:	bf18      	it	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	0692      	lsls	r2, r2, #26
 8007dca:	d42b      	bmi.n	8007e24 <_printf_common+0xb0>
 8007dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	47c0      	blx	r8
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d01e      	beq.n	8007e18 <_printf_common+0xa4>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	6922      	ldr	r2, [r4, #16]
 8007dde:	f003 0306 	and.w	r3, r3, #6
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	bf02      	ittt	eq
 8007de6:	68e5      	ldreq	r5, [r4, #12]
 8007de8:	6833      	ldreq	r3, [r6, #0]
 8007dea:	1aed      	subeq	r5, r5, r3
 8007dec:	68a3      	ldr	r3, [r4, #8]
 8007dee:	bf0c      	ite	eq
 8007df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df4:	2500      	movne	r5, #0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	bfc4      	itt	gt
 8007dfa:	1a9b      	subgt	r3, r3, r2
 8007dfc:	18ed      	addgt	r5, r5, r3
 8007dfe:	2600      	movs	r6, #0
 8007e00:	341a      	adds	r4, #26
 8007e02:	42b5      	cmp	r5, r6
 8007e04:	d11a      	bne.n	8007e3c <_printf_common+0xc8>
 8007e06:	2000      	movs	r0, #0
 8007e08:	e008      	b.n	8007e1c <_printf_common+0xa8>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	4649      	mov	r1, r9
 8007e10:	4638      	mov	r0, r7
 8007e12:	47c0      	blx	r8
 8007e14:	3001      	adds	r0, #1
 8007e16:	d103      	bne.n	8007e20 <_printf_common+0xac>
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e20:	3501      	adds	r5, #1
 8007e22:	e7c6      	b.n	8007db2 <_printf_common+0x3e>
 8007e24:	18e1      	adds	r1, r4, r3
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	2030      	movs	r0, #48	; 0x30
 8007e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e2e:	4422      	add	r2, r4
 8007e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e38:	3302      	adds	r3, #2
 8007e3a:	e7c7      	b.n	8007dcc <_printf_common+0x58>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	4622      	mov	r2, r4
 8007e40:	4649      	mov	r1, r9
 8007e42:	4638      	mov	r0, r7
 8007e44:	47c0      	blx	r8
 8007e46:	3001      	adds	r0, #1
 8007e48:	d0e6      	beq.n	8007e18 <_printf_common+0xa4>
 8007e4a:	3601      	adds	r6, #1
 8007e4c:	e7d9      	b.n	8007e02 <_printf_common+0x8e>
	...

08007e50 <_printf_i>:
 8007e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	7e0f      	ldrb	r7, [r1, #24]
 8007e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e58:	2f78      	cmp	r7, #120	; 0x78
 8007e5a:	4691      	mov	r9, r2
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	469a      	mov	sl, r3
 8007e62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e66:	d807      	bhi.n	8007e78 <_printf_i+0x28>
 8007e68:	2f62      	cmp	r7, #98	; 0x62
 8007e6a:	d80a      	bhi.n	8007e82 <_printf_i+0x32>
 8007e6c:	2f00      	cmp	r7, #0
 8007e6e:	f000 80d4 	beq.w	800801a <_printf_i+0x1ca>
 8007e72:	2f58      	cmp	r7, #88	; 0x58
 8007e74:	f000 80c0 	beq.w	8007ff8 <_printf_i+0x1a8>
 8007e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e80:	e03a      	b.n	8007ef8 <_printf_i+0xa8>
 8007e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e86:	2b15      	cmp	r3, #21
 8007e88:	d8f6      	bhi.n	8007e78 <_printf_i+0x28>
 8007e8a:	a101      	add	r1, pc, #4	; (adr r1, 8007e90 <_printf_i+0x40>)
 8007e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e90:	08007ee9 	.word	0x08007ee9
 8007e94:	08007efd 	.word	0x08007efd
 8007e98:	08007e79 	.word	0x08007e79
 8007e9c:	08007e79 	.word	0x08007e79
 8007ea0:	08007e79 	.word	0x08007e79
 8007ea4:	08007e79 	.word	0x08007e79
 8007ea8:	08007efd 	.word	0x08007efd
 8007eac:	08007e79 	.word	0x08007e79
 8007eb0:	08007e79 	.word	0x08007e79
 8007eb4:	08007e79 	.word	0x08007e79
 8007eb8:	08007e79 	.word	0x08007e79
 8007ebc:	08008001 	.word	0x08008001
 8007ec0:	08007f29 	.word	0x08007f29
 8007ec4:	08007fbb 	.word	0x08007fbb
 8007ec8:	08007e79 	.word	0x08007e79
 8007ecc:	08007e79 	.word	0x08007e79
 8007ed0:	08008023 	.word	0x08008023
 8007ed4:	08007e79 	.word	0x08007e79
 8007ed8:	08007f29 	.word	0x08007f29
 8007edc:	08007e79 	.word	0x08007e79
 8007ee0:	08007e79 	.word	0x08007e79
 8007ee4:	08007fc3 	.word	0x08007fc3
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	1d1a      	adds	r2, r3, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	602a      	str	r2, [r5, #0]
 8007ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e09f      	b.n	800803c <_printf_i+0x1ec>
 8007efc:	6820      	ldr	r0, [r4, #0]
 8007efe:	682b      	ldr	r3, [r5, #0]
 8007f00:	0607      	lsls	r7, r0, #24
 8007f02:	f103 0104 	add.w	r1, r3, #4
 8007f06:	6029      	str	r1, [r5, #0]
 8007f08:	d501      	bpl.n	8007f0e <_printf_i+0xbe>
 8007f0a:	681e      	ldr	r6, [r3, #0]
 8007f0c:	e003      	b.n	8007f16 <_printf_i+0xc6>
 8007f0e:	0646      	lsls	r6, r0, #25
 8007f10:	d5fb      	bpl.n	8007f0a <_printf_i+0xba>
 8007f12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f16:	2e00      	cmp	r6, #0
 8007f18:	da03      	bge.n	8007f22 <_printf_i+0xd2>
 8007f1a:	232d      	movs	r3, #45	; 0x2d
 8007f1c:	4276      	negs	r6, r6
 8007f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f22:	485a      	ldr	r0, [pc, #360]	; (800808c <_printf_i+0x23c>)
 8007f24:	230a      	movs	r3, #10
 8007f26:	e012      	b.n	8007f4e <_printf_i+0xfe>
 8007f28:	682b      	ldr	r3, [r5, #0]
 8007f2a:	6820      	ldr	r0, [r4, #0]
 8007f2c:	1d19      	adds	r1, r3, #4
 8007f2e:	6029      	str	r1, [r5, #0]
 8007f30:	0605      	lsls	r5, r0, #24
 8007f32:	d501      	bpl.n	8007f38 <_printf_i+0xe8>
 8007f34:	681e      	ldr	r6, [r3, #0]
 8007f36:	e002      	b.n	8007f3e <_printf_i+0xee>
 8007f38:	0641      	lsls	r1, r0, #25
 8007f3a:	d5fb      	bpl.n	8007f34 <_printf_i+0xe4>
 8007f3c:	881e      	ldrh	r6, [r3, #0]
 8007f3e:	4853      	ldr	r0, [pc, #332]	; (800808c <_printf_i+0x23c>)
 8007f40:	2f6f      	cmp	r7, #111	; 0x6f
 8007f42:	bf0c      	ite	eq
 8007f44:	2308      	moveq	r3, #8
 8007f46:	230a      	movne	r3, #10
 8007f48:	2100      	movs	r1, #0
 8007f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f4e:	6865      	ldr	r5, [r4, #4]
 8007f50:	60a5      	str	r5, [r4, #8]
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	bfa2      	ittt	ge
 8007f56:	6821      	ldrge	r1, [r4, #0]
 8007f58:	f021 0104 	bicge.w	r1, r1, #4
 8007f5c:	6021      	strge	r1, [r4, #0]
 8007f5e:	b90e      	cbnz	r6, 8007f64 <_printf_i+0x114>
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	d04b      	beq.n	8007ffc <_printf_i+0x1ac>
 8007f64:	4615      	mov	r5, r2
 8007f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8007f6e:	5dc7      	ldrb	r7, [r0, r7]
 8007f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f74:	4637      	mov	r7, r6
 8007f76:	42bb      	cmp	r3, r7
 8007f78:	460e      	mov	r6, r1
 8007f7a:	d9f4      	bls.n	8007f66 <_printf_i+0x116>
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d10b      	bne.n	8007f98 <_printf_i+0x148>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	07de      	lsls	r6, r3, #31
 8007f84:	d508      	bpl.n	8007f98 <_printf_i+0x148>
 8007f86:	6923      	ldr	r3, [r4, #16]
 8007f88:	6861      	ldr	r1, [r4, #4]
 8007f8a:	4299      	cmp	r1, r3
 8007f8c:	bfde      	ittt	le
 8007f8e:	2330      	movle	r3, #48	; 0x30
 8007f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f98:	1b52      	subs	r2, r2, r5
 8007f9a:	6122      	str	r2, [r4, #16]
 8007f9c:	f8cd a000 	str.w	sl, [sp]
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	aa03      	add	r2, sp, #12
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4640      	mov	r0, r8
 8007fa8:	f7ff fee4 	bl	8007d74 <_printf_common>
 8007fac:	3001      	adds	r0, #1
 8007fae:	d14a      	bne.n	8008046 <_printf_i+0x1f6>
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	b004      	add	sp, #16
 8007fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f043 0320 	orr.w	r3, r3, #32
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	4833      	ldr	r0, [pc, #204]	; (8008090 <_printf_i+0x240>)
 8007fc4:	2778      	movs	r7, #120	; 0x78
 8007fc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	6829      	ldr	r1, [r5, #0]
 8007fce:	061f      	lsls	r7, r3, #24
 8007fd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fd4:	d402      	bmi.n	8007fdc <_printf_i+0x18c>
 8007fd6:	065f      	lsls	r7, r3, #25
 8007fd8:	bf48      	it	mi
 8007fda:	b2b6      	uxthmi	r6, r6
 8007fdc:	07df      	lsls	r7, r3, #31
 8007fde:	bf48      	it	mi
 8007fe0:	f043 0320 	orrmi.w	r3, r3, #32
 8007fe4:	6029      	str	r1, [r5, #0]
 8007fe6:	bf48      	it	mi
 8007fe8:	6023      	strmi	r3, [r4, #0]
 8007fea:	b91e      	cbnz	r6, 8007ff4 <_printf_i+0x1a4>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	f023 0320 	bic.w	r3, r3, #32
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	e7a7      	b.n	8007f48 <_printf_i+0xf8>
 8007ff8:	4824      	ldr	r0, [pc, #144]	; (800808c <_printf_i+0x23c>)
 8007ffa:	e7e4      	b.n	8007fc6 <_printf_i+0x176>
 8007ffc:	4615      	mov	r5, r2
 8007ffe:	e7bd      	b.n	8007f7c <_printf_i+0x12c>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	6826      	ldr	r6, [r4, #0]
 8008004:	6961      	ldr	r1, [r4, #20]
 8008006:	1d18      	adds	r0, r3, #4
 8008008:	6028      	str	r0, [r5, #0]
 800800a:	0635      	lsls	r5, r6, #24
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	d501      	bpl.n	8008014 <_printf_i+0x1c4>
 8008010:	6019      	str	r1, [r3, #0]
 8008012:	e002      	b.n	800801a <_printf_i+0x1ca>
 8008014:	0670      	lsls	r0, r6, #25
 8008016:	d5fb      	bpl.n	8008010 <_printf_i+0x1c0>
 8008018:	8019      	strh	r1, [r3, #0]
 800801a:	2300      	movs	r3, #0
 800801c:	6123      	str	r3, [r4, #16]
 800801e:	4615      	mov	r5, r2
 8008020:	e7bc      	b.n	8007f9c <_printf_i+0x14c>
 8008022:	682b      	ldr	r3, [r5, #0]
 8008024:	1d1a      	adds	r2, r3, #4
 8008026:	602a      	str	r2, [r5, #0]
 8008028:	681d      	ldr	r5, [r3, #0]
 800802a:	6862      	ldr	r2, [r4, #4]
 800802c:	2100      	movs	r1, #0
 800802e:	4628      	mov	r0, r5
 8008030:	f7f8 f8de 	bl	80001f0 <memchr>
 8008034:	b108      	cbz	r0, 800803a <_printf_i+0x1ea>
 8008036:	1b40      	subs	r0, r0, r5
 8008038:	6060      	str	r0, [r4, #4]
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	6123      	str	r3, [r4, #16]
 800803e:	2300      	movs	r3, #0
 8008040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008044:	e7aa      	b.n	8007f9c <_printf_i+0x14c>
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	462a      	mov	r2, r5
 800804a:	4649      	mov	r1, r9
 800804c:	4640      	mov	r0, r8
 800804e:	47d0      	blx	sl
 8008050:	3001      	adds	r0, #1
 8008052:	d0ad      	beq.n	8007fb0 <_printf_i+0x160>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	079b      	lsls	r3, r3, #30
 8008058:	d413      	bmi.n	8008082 <_printf_i+0x232>
 800805a:	68e0      	ldr	r0, [r4, #12]
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	4298      	cmp	r0, r3
 8008060:	bfb8      	it	lt
 8008062:	4618      	movlt	r0, r3
 8008064:	e7a6      	b.n	8007fb4 <_printf_i+0x164>
 8008066:	2301      	movs	r3, #1
 8008068:	4632      	mov	r2, r6
 800806a:	4649      	mov	r1, r9
 800806c:	4640      	mov	r0, r8
 800806e:	47d0      	blx	sl
 8008070:	3001      	adds	r0, #1
 8008072:	d09d      	beq.n	8007fb0 <_printf_i+0x160>
 8008074:	3501      	adds	r5, #1
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	9903      	ldr	r1, [sp, #12]
 800807a:	1a5b      	subs	r3, r3, r1
 800807c:	42ab      	cmp	r3, r5
 800807e:	dcf2      	bgt.n	8008066 <_printf_i+0x216>
 8008080:	e7eb      	b.n	800805a <_printf_i+0x20a>
 8008082:	2500      	movs	r5, #0
 8008084:	f104 0619 	add.w	r6, r4, #25
 8008088:	e7f5      	b.n	8008076 <_printf_i+0x226>
 800808a:	bf00      	nop
 800808c:	08008279 	.word	0x08008279
 8008090:	0800828a 	.word	0x0800828a

08008094 <memmove>:
 8008094:	4288      	cmp	r0, r1
 8008096:	b510      	push	{r4, lr}
 8008098:	eb01 0402 	add.w	r4, r1, r2
 800809c:	d902      	bls.n	80080a4 <memmove+0x10>
 800809e:	4284      	cmp	r4, r0
 80080a0:	4623      	mov	r3, r4
 80080a2:	d807      	bhi.n	80080b4 <memmove+0x20>
 80080a4:	1e43      	subs	r3, r0, #1
 80080a6:	42a1      	cmp	r1, r4
 80080a8:	d008      	beq.n	80080bc <memmove+0x28>
 80080aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080b2:	e7f8      	b.n	80080a6 <memmove+0x12>
 80080b4:	4402      	add	r2, r0
 80080b6:	4601      	mov	r1, r0
 80080b8:	428a      	cmp	r2, r1
 80080ba:	d100      	bne.n	80080be <memmove+0x2a>
 80080bc:	bd10      	pop	{r4, pc}
 80080be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080c6:	e7f7      	b.n	80080b8 <memmove+0x24>

080080c8 <_sbrk_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d06      	ldr	r5, [pc, #24]	; (80080e4 <_sbrk_r+0x1c>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7f9 fbea 	bl	80018ac <_sbrk>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_sbrk_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_sbrk_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	200004b0 	.word	0x200004b0

080080e8 <memcpy>:
 80080e8:	440a      	add	r2, r1
 80080ea:	4291      	cmp	r1, r2
 80080ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f0:	d100      	bne.n	80080f4 <memcpy+0xc>
 80080f2:	4770      	bx	lr
 80080f4:	b510      	push	{r4, lr}
 80080f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fe:	4291      	cmp	r1, r2
 8008100:	d1f9      	bne.n	80080f6 <memcpy+0xe>
 8008102:	bd10      	pop	{r4, pc}

08008104 <_realloc_r>:
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	4680      	mov	r8, r0
 800810a:	4614      	mov	r4, r2
 800810c:	460e      	mov	r6, r1
 800810e:	b921      	cbnz	r1, 800811a <_realloc_r+0x16>
 8008110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	4611      	mov	r1, r2
 8008116:	f7ff bc49 	b.w	80079ac <_malloc_r>
 800811a:	b92a      	cbnz	r2, 8008128 <_realloc_r+0x24>
 800811c:	f7ff fbda 	bl	80078d4 <_free_r>
 8008120:	4625      	mov	r5, r4
 8008122:	4628      	mov	r0, r5
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	f000 f81b 	bl	8008162 <_malloc_usable_size_r>
 800812c:	4284      	cmp	r4, r0
 800812e:	4607      	mov	r7, r0
 8008130:	d802      	bhi.n	8008138 <_realloc_r+0x34>
 8008132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008136:	d812      	bhi.n	800815e <_realloc_r+0x5a>
 8008138:	4621      	mov	r1, r4
 800813a:	4640      	mov	r0, r8
 800813c:	f7ff fc36 	bl	80079ac <_malloc_r>
 8008140:	4605      	mov	r5, r0
 8008142:	2800      	cmp	r0, #0
 8008144:	d0ed      	beq.n	8008122 <_realloc_r+0x1e>
 8008146:	42bc      	cmp	r4, r7
 8008148:	4622      	mov	r2, r4
 800814a:	4631      	mov	r1, r6
 800814c:	bf28      	it	cs
 800814e:	463a      	movcs	r2, r7
 8008150:	f7ff ffca 	bl	80080e8 <memcpy>
 8008154:	4631      	mov	r1, r6
 8008156:	4640      	mov	r0, r8
 8008158:	f7ff fbbc 	bl	80078d4 <_free_r>
 800815c:	e7e1      	b.n	8008122 <_realloc_r+0x1e>
 800815e:	4635      	mov	r5, r6
 8008160:	e7df      	b.n	8008122 <_realloc_r+0x1e>

08008162 <_malloc_usable_size_r>:
 8008162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008166:	1f18      	subs	r0, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	bfbc      	itt	lt
 800816c:	580b      	ldrlt	r3, [r1, r0]
 800816e:	18c0      	addlt	r0, r0, r3
 8008170:	4770      	bx	lr
	...

08008174 <_init>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr

08008180 <_fini>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr
